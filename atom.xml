<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Love what you do</title>
  
  
  <link href="http://coffeethinkcode.com/atom.xml" rel="self"/>
  
  <link href="http://coffeethinkcode.com/"/>
  <updated>2024-07-07T03:43:51.524Z</updated>
  <id>http://coffeethinkcode.com/</id>
  
  <author>
    <name>Sunny</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dynamic Reference Data in NestJS</title>
    <link href="http://coffeethinkcode.com/2024/07/04/dynamic-referencedata/"/>
    <id>http://coffeethinkcode.com/2024/07/04/dynamic-referencedata/</id>
    <published>2024-07-03T14:00:00.000Z</published>
    <updated>2024-07-07T03:43:51.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Implement-a-Future-Proof-Solution-for-Your-Reference-Data-Needs"><a href="#Implement-a-Future-Proof-Solution-for-Your-Reference-Data-Needs" class="headerlink" title="Implement a Future-Proof Solution for Your Reference Data Needs"></a>Implement a Future-Proof Solution for Your Reference Data Needs</h3><p>In most API applications, providing reference data is a common need. The provision of reference data ensures we use consistent values across our application. These data include countries, product categories, or any other categorized information needed by our application.</p><p>A common approach for implementing a reference data API endpoint involves using a switch case within a single service to handle different data types. However, it can quickly become cumbersome and inflexible as the application grows.</p><p>I will explore building a dynamic and maintainable reference data endpoint in NestJS in the article.</p><h3 id="The-Switch-Case-Dilemma"><a href="#The-Switch-Case-Dilemma" class="headerlink" title="The Switch Case Dilemma"></a>The Switch Case Dilemma</h3><p>Let’s imagine a scenario where a switch case is used within our ReferenceDataService to handle different data types. Here’s a simplified example:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.controller.ts  </span></span><br><span class="line"> <span class="meta">@Get</span>(<span class="string">&#x27;:dataType&#x27;</span>)  </span><br><span class="line"> <span class="keyword">async</span> <span class="title function_">getReferenceData</span>(<span class="meta">@Param</span>(<span class="string">&#x27;dataType&#x27;</span>) <span class="attr">dataType</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Country</span>[]&gt; &#123;  </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">referenceDataFactory</span>.<span class="title function_">getReferenceData</span>(dataType);  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// reference-data.service.ts  </span></span><br><span class="line"><span class="meta">@Injectable</span>()  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReferenceDataService</span> &#123;  </span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"> <span class="keyword">private</span> <span class="keyword">readonly</span> countryService: CountryService,  </span></span><br><span class="line"><span class="params">       <span class="keyword">private</span> <span class="keyword">readonly</span> industryService: IndustryService </span>) &#123; &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">async</span> <span class="title function_">getReferenceData</span>(<span class="attr">type</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>[]&gt; &#123;  </span><br><span class="line">       <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">&#x27;country&#x27;</span>:  </span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">countryService</span>.<span class="title function_">getReferenceData</span>();  </span><br><span class="line">           <span class="keyword">case</span> <span class="string">&#x27;industry&#x27;</span>:  </span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">industryService</span>.<span class="title function_">getReferenceData</span>();  </span><br><span class="line">           <span class="attr">default</span>:  </span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Unsupported reference data type: <span class="subst">$&#123;<span class="keyword">type</span>&#125;</span>`</span>);  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>While this works for a few data types, it becomes messy and less maintainable as more types are added. Here are the two main issues:</p><ul><li><strong>Code Clutter:</strong>  With each new data type, we need to inject a new service into the constructor and add a corresponding case in the switch statement within getReferenceData. This leads to a bloated constructor and cluttered logic, making the code harder to read and maintain.</li><li><strong>Tight Coupling:</strong>  The service becomes tightly coupled to the specific concrete services (CountryService, IndustryService). If we introduce new data types with different service implementations, we’d need to modify the ReferenceDataService constructor and switch-case statements, making the code harder to read and reason about.</li></ul><h3 id="Improved-reference-data-service-with-ModuleRef-and-Token-Providers"><a href="#Improved-reference-data-service-with-ModuleRef-and-Token-Providers" class="headerlink" title="Improved reference data service with ModuleRef and Token Providers"></a>Improved reference data service with ModuleRef and Token Providers</h3><p>A more scalable and flexible approach is to leverage NestJS’s dependency injection capabilities and dynamic service retrieval. Here’s how we can achieve this:</p><h3 id="Interface-and-Concrete-Services"><a href="#Interface-and-Concrete-Services" class="headerlink" title="Interface and Concrete Services"></a>Interface and Concrete Services</h3><p>Firstly, we define an interface for our reference data service.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ReferenceDataService</span>&lt;T <span class="keyword">extends</span> <span class="title class_">ReferenceDataItem</span>&gt; &#123;  </span><br><span class="line"> <span class="title function_">getReferenceData</span>(): <span class="title class_">Promise</span>&lt;T[]&gt;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Concrete Service Example (country.service.ts)  </span></span><br><span class="line"><span class="meta">@Injectable</span>()  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CountryService</span> <span class="keyword">implements</span> <span class="title class_">ReferenceDataService</span>&lt;<span class="title class_">Country</span>&gt; &#123;  </span><br><span class="line"> <span class="keyword">async</span> <span class="title function_">getReferenceData</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">Country</span>[]&gt; &#123;  </span><br><span class="line">   <span class="comment">// Implement logic to fetch country data  </span></span><br><span class="line">   <span class="keyword">return</span> [];  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>We can implement the concert services based on the ReferenceDataService interface whenever a new data type is introduced.</p><h3 id="Register-the-concert-services-with-token-providers"><a href="#Register-the-concert-services-with-token-providers" class="headerlink" title="Register the concert services with token providers"></a>Register the concert services with token providers</h3><p>In NestJS, we can define token providers to identify services dynamically. Here, we define two constants for token identifiers (<code>COUNTRY_DATA_TOKEN</code>  and  <code>INDUSTRY_DATA_TOKEN</code>), and register a token for each concrete service:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">COUNTRY_DATA_TOKEN</span> = <span class="string">&#x27;country&#x27;</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INDUSTRY_DATA_TOKEN</span> = <span class="string">&#x27;industry&#x27;</span>;  </span><br><span class="line"><span class="meta">@Module</span>(&#123;  </span><br><span class="line"> <span class="attr">imports</span>: [],  </span><br><span class="line"> <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],  </span><br><span class="line"> <span class="attr">providers</span>: [  </span><br><span class="line">   <span class="title class_">AppService</span>,  </span><br><span class="line">   <span class="title class_">ReferenceDataFactory</span>,  </span><br><span class="line">   &#123;  </span><br><span class="line">     <span class="attr">provide</span>: <span class="variable constant_">COUNTRY_DATA_TOKEN</span>,  </span><br><span class="line">     <span class="attr">useClass</span>: <span class="title class_">CountryService</span>  </span><br><span class="line">   &#125;,  </span><br><span class="line">   &#123;  </span><br><span class="line">     <span class="attr">provide</span>: <span class="variable constant_">INDUSTRY_DATA_TOKEN</span>,  </span><br><span class="line">     <span class="attr">useClass</span>: <span class="title class_">IndustryService</span>  </span><br><span class="line">   &#125;]  </span><br><span class="line">&#125;)  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure></div><p>By registering services with specific tokens, we decouple the service implementation from its usage.</p><h3 id="Reference-Data-Service-Refactoring"><a href="#Reference-Data-Service-Refactoring" class="headerlink" title="Reference Data Service Refactoring"></a>Reference Data Service Refactoring</h3><p>Now, we can refactor our ReferenceDataService to retrieve the specific service based on the requested data type as below.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReferenceDataFactory</span> &#123;  </span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> moduleRef: ModuleRef</span>) &#123; &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">async</span> <span class="title function_">getReferenceDataService</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span></span>) &#123;  </span><br><span class="line">       <span class="keyword">const</span> service = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">moduleRef</span>.<span class="title function_">resolve</span>(<span class="keyword">type</span>) <span class="keyword">as</span> <span class="title class_">ReferenceDataService</span>&lt;<span class="title class_">ReferenceDataItem</span>&gt;;  </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">await</span> service.<span class="title function_">getReferenceData</span>();  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In the above code, we inject ModuleRef into the service constructor. Then we use moduleRef.get with the retrieved token to dynamically get the corresponding service instance, and the instance is used to fetch the actual data.</p><p>By utilizing ModuleRef and token providers to dynamically retrieve a specific reference data service instance, we eliminate the need for individual service injection in the constructor and the switch case. When introducing a new data type, we don’t need to change the ReferenceDataFactory service!</p><h3 id="Consuming-the-Service"><a href="#Consuming-the-Service" class="headerlink" title="Consuming the Service:"></a>Consuming the Service:</h3><p>Now, in our controller, we can inject the ReferenceDataFactory and dynamically retrieve the desired data:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&#x27;:dataType&#x27;</span>)  </span><br><span class="line"> <span class="keyword">async</span> <span class="title function_">getIndustries</span>(<span class="meta">@Param</span>(<span class="string">&#x27;dataType&#x27;</span>) <span class="attr">dataType</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">ReferenceDataItem</span>[]&gt; &#123;  </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">referenceDataFactory</span>.<span class="title function_">getReferenceDataService</span>(dataType);  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>This approach is much easier to maintain, allowing us to handle new data types as our application evolves.</p><p>Although NestJS is used in this article, the same pattern applies to other programming languages and frameworks. I will write a new post to provide a similar implementation using .Net later. You can find the source code in the post  <a class="link"   href="https://github.com/sunnyy02/nest-reference-data/tree/refactor" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>I hope you find this post useful. Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Implement-a-Future-Proof-Solution-for-Your-Reference-Data-Needs&quot;&gt;&lt;a href=&quot;#Implement-a-Future-Proof-Solution-for-Your-Reference-Data</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    
    <category term="NestJS" scheme="http://coffeethinkcode.com/tags/NestJS/"/>
    
  </entry>
  
  <entry>
    <title>Friend or Foe? Examining the Pros and Cons of Feature Toggles and Trunk-Based Development</title>
    <link href="http://coffeethinkcode.com/2024/06/21/friend-or-foe-examining-the-pros-and-cons-of-feature-toggles/"/>
    <id>http://coffeethinkcode.com/2024/06/21/friend-or-foe-examining-the-pros-and-cons-of-feature-toggles/</id>
    <published>2024-06-20T14:00:00.000Z</published>
    <updated>2024-07-07T02:07:54.250Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*md8ptcB7nbqro_81fuizyg.png"                                     ></p><p>My experience at  <a class="link"   href="https://www.thoughtworks.com/en-au" >ThoughtWorks <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, a pioneer in Agile development, exposed me to “<a class="link"   href="https://www.thoughtworks.com/en-au/insights/blog/digital-transformation/Digital-talent-defaults-for-agile-org" >sensible defaults <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>” — a set of best practices that ensure efficient software delivery. Two of the most impactful practices I learned are Feature Toggles and Trunk-Based Development (TBD). These approaches are considered foundational to ThoughtWorks’ methodology due to their effectiveness in streamlining development and enabling rapid iteration.</p><p>Although TBD is somehow debatable, even within ThoughtWorks, there is no double that it delivers lots of benefits when used in the right project with proper implementation.</p><p>In this blog, I’ll discuss Feature Toggles and TBD, their benefits, and when they should and shouldn’t be used.</p><h2 id="What-is-a-feature-toggle"><a href="#What-is-a-feature-toggle" class="headerlink" title="What is a feature toggle?"></a>What is a feature toggle?</h2><blockquote><p><em>Feature Toggles (often also refered to as Feature Flags) is a technique, allowing teams to modify system behavior without changing code.</em></p></blockquote><p>Feature toggle allows specific features of an application to be activated or deactivated at will. This allows developers to safely “toggle” new features on or off for testing. Feature toggles have many use cases beyond testing, such as the targeted rollout or quick rollback of new features in production, experimentation, canary releases, operations, or activation of premium features.</p><p>Feature Toggles complement Trunk-Based Development by safely integrating incomplete features into the main branch. This way, the main branch is always in a deployable state, and teams can work on features without long-lived branches.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Let’s consider a simple .NET Core application where we want to toggle a new feature.</p><p><strong>Setting up the Feature Toggle</strong></p><p>First, we define a feature toggle service. For simplicity, we can use a configuration-based approach.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// IFeatureToggleService.cs  </span><br><span class="line">public interface IFeatureToggleService  </span><br><span class="line">&#123;  </span><br><span class="line">    bool IsFeatureEnabled(string feature);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// FeatureToggleService.cs  </span><br><span class="line">public class FeatureToggleService : IFeatureToggleService  </span><br><span class="line">&#123;  </span><br><span class="line">    private readonly IConfiguration _configuration; public FeatureToggleService(IConfiguration configuration)  </span><br><span class="line">    &#123;  </span><br><span class="line">        _configuration = configuration;  </span><br><span class="line">    &#125; public bool IsFeatureEnabled(string feature)  </span><br><span class="line">    &#123;  </span><br><span class="line">        return _configuration.GetValue&lt;bool&gt;($&quot;Features:&#123;feature&#125;&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>Configure and use the Feature Toggle</strong></p><p>In  <code>appsettings.json</code>, we add our feature flags.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  &quot;Features&quot;: &#123;  </span><br><span class="line">    &quot;NewFeature&quot;: true  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Here, we store the feature toggle setting in the config file for simplicity. In real-world projects, it is recommended that the settings be stored in a database. By storing the feature toggle settings in the database, you can change the state of a feature (on&#x2F;off) and see those changes reflected instantly within your application.</p><p>This is particularly important because it allows product owners and stakeholders to have instant control over the visibility of new features, enabling them to be showcased and explored in isolation before being released to production users.</p><p>To use the feature toggle service is as simple as injecting the feature toggle service and an if statement, as in the example below.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> public HomeController(IFeatureToggleService featureToggleService)  </span><br><span class="line">    &#123;  </span><br><span class="line">        _featureToggleService = featureToggleService;  </span><br><span class="line">    &#125; public IActionResult Index()  </span><br><span class="line">    &#123;  </span><br><span class="line">        if (_featureToggleService.IsFeatureEnabled(&quot;NewFeature&quot;))  </span><br><span class="line">        &#123;  </span><br><span class="line">            ViewBag.Message = &quot;New Feature is Enabled!&quot;;  </span><br><span class="line">        &#125;  </span><br><span class="line">        else  </span><br><span class="line">        &#123;  </span><br><span class="line">            ViewBag.Message = &quot;Welcome to our website!&quot;;  </span><br><span class="line">        &#125; return View();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="When-Not-to-Use-Feature-Toggles"><a href="#When-Not-to-Use-Feature-Toggles" class="headerlink" title="When Not to Use Feature Toggles"></a><strong>When Not to Use Feature Toggles</strong></h2><p>While feature toggles offer flexibility, they shouldn’t be a permanent solution. Here’s when to consider alternatives:</p><ul><li><strong>Core Functionality:</strong>  Don’t toggle essential features that define your application’s core behavior.</li><li><strong>Complex Logic:</strong>  Avoid intricate logic based on toggles, which can lead to maintenance headaches.</li><li><strong>Short-Lived Features</strong>: If a feature is very short-lived or experimental, the overhead of adding and managing a toggle might not be worth it.</li></ul><h2 id="Trunk-Based-Development"><a href="#Trunk-Based-Development" class="headerlink" title="Trunk-Based Development"></a>Trunk-Based Development</h2><p>Trunk-based development (TBD) is a source-control branching model in which developers integrate small, frequent changes into the main branch (trunk). With trunk-based development, your team integrates changes directly into the main branch (trunk), whereas other branching strategies like GitFlow involve integrating into multiple feature branches.</p><p>TBD doesn’t mean we completely ditch feature branches. Instead, these branches are kept short-lived. We can still use them for code review, merge requests, and branch builds to get quick feedback. The key difference is that you avoid long-lived branches like release branches.</p><p>TBD and feature toggles are complementary practices used in Agile development. We can use feature toggles in development without adapting TBD, but they are often combined together, as the feature toggle is a must-have tool for TBD.</p><h2 id="Prerequisite-for-TBD"><a href="#Prerequisite-for-TBD" class="headerlink" title="Prerequisite for TBD"></a>Prerequisite for TBD</h2><p>Trunk-based development can be a very efficient and powerful tool only if the team meets the conditions below:</p><ul><li>A capable team with a high level of trust between the members. TBD often works well with a small and skillful team. It is key to have a strong dev team. Without it, the TBD will cause more harm than good.</li><li>Automated unit and integration testing in place with good test coverage.</li><li>A solid CI pipeline</li></ul><p>Implementing trunk-based development without those is a recipe for disaster. The common symptoms include frequent broken builds and code churn.</p><p>Some can argue that the benefits of Trunk-Based Development (TBD) are more a result of its prerequisites, like good unit test coverage, rather than TBD itself. This argument is not wrong. However, TBD acts as a framework that enforces practices like good test coverage, continuous integration, early feedback, and clear communication. These practices, in turn, create an environment where good unit test coverage flourishes and delivers its benefits.</p><h2 id="TBD-only-works-with-a-strong-team"><a href="#TBD-only-works-with-a-strong-team" class="headerlink" title="TBD only works with a strong team"></a>TBD only works with a strong team</h2><p>The success of trunk-based development hinges on a strong, well-coordinated team. Without a culture of clear communication, mutual respect, and a willingness to learn from each other, especially for less experienced developers, the challenges of trunk-based development can quickly become overwhelming.</p><p>The clear communication between teams is essential. The team members must talk openly to fix problems quickly and share any changes affecting the main codebase (trunk).</p><p>Another good practice that complements TBD is  <strong>pair programming</strong>. As developers work together, code reviews become part of the development process. This allows for immediate feedback, early bug detection, and knowledge sharing. However, to avoid burnout, pair programming should be an opt-in approach. Developers should choose when collaboration can be most beneficial.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a><strong>Conclusion</strong></h2><p>Feature toggles and trunk-based development empower developers to deliver features faster and more reliably. By understanding their benefits and limitations, we can leverage them effectively to streamline our development process and deliver faster and more frequently.</p><p>Remember, feature toggles are for temporary control, not a long-term architectural solution. In other words, don’t forget to remove the feature toggle in the end! Use them wisely to keep your application on the cutting edge.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://miro.medium.co</summary>
      
    
    
    
    <category term="Software Development" scheme="http://coffeethinkcode.com/categories/Software-Development/"/>
    
    <category term="Agile" scheme="http://coffeethinkcode.com/categories/Software-Development/Agile/"/>
    
    
    <category term="Best Practice" scheme="http://coffeethinkcode.com/tags/Best-Practice/"/>
    
    <category term="Software development" scheme="http://coffeethinkcode.com/tags/Software-development/"/>
    
    <category term="Agile" scheme="http://coffeethinkcode.com/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title>Embrace Secure RESTful APIs with NestJS on Educative.io</title>
    <link href="http://coffeethinkcode.com/2024/06/15/restapi/"/>
    <id>http://coffeethinkcode.com/2024/06/15/restapi/</id>
    <published>2024-06-14T14:00:00.000Z</published>
    <updated>2024-07-07T02:15:31.702Z</updated>
    
    <content type="html"><![CDATA[<p>The course is online now!</p><p>As a seasoned developer, I have worked on various frameworks and technologies. NestJS is my favorite. It is easy to start but challenging to master. Its design principles are simple, and it combines sophisticated features with great community support. With its versatility and power, NestJS has always been my reliable partner, whether crafting APIs or architecting intricate applications.</p><p>That’s why I’m thrilled to announce the launch of my first online course, “Building Secure RESTful APIs with NestJS: A Practical Guide(<a class="link"   href="https://www.educative.io/courses/building-secure-restful-apis-with-nestjs-a-practical-guide)%E2%80%9D" >https://www.educative.io/courses/building-secure-restful-apis-with-nestjs-a-practical-guide)” <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on the esteemed <a class="link"   href="https://www.educative.io/learn/home" >Educative  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>platform.</p><h2 id="Why-another-NestJS-course"><a href="#Why-another-NestJS-course" class="headerlink" title="Why another NestJS course?"></a>Why another NestJS course?</h2><p>Since NestJS is one of the most popular NodeJS frameworks, many NestJS online courses are readily available in the market. You might be wondering why you chose this one. Here’s what sets this course apart:</p><h3 id="Text-based-learning-with-Educative-io"><a href="#Text-based-learning-with-Educative-io" class="headerlink" title="Text-based learning with Educative.io"></a>Text-based learning with Educative.io</h3><p>Educative offers a unique interactive course platform. What truly differentiates it from other popular online learning platforms is its **text-based **learning.</p><p>Combined with practical application, text-based learning has demonstrated effectiveness in technical education. On average, reading surpasses video speed, with videos typically spoken at 150 words per minute compared to humans’ reading pace of 250 words per minute.</p><p>Personally, I found the interactive text-based learning environment to be more efficient than the video-based courses. Focusing on the course content is much easier, and practicing the theory using the embedded coding editor is a big plus.</p><h3 id="Online-learning-within-the-browser"><a href="#Online-learning-within-the-browser" class="headerlink" title="Online learning within the browser"></a>Online learning within the browser</h3><p>While many online courses require downloading coding environments, extra packages, and various programs before beginning, Educative streamlines the process with its integrated coding environment within the browser.</p><p>In this course, we have 59 code playgrounds for hands-on practice. You can build a new NestJS application, edit the code online, write new unit tests, or create a new docker image and deploy it to AWS ECS with a free trial AWS account. All these tasks&#x2F; practices are provided within the browser.</p><h3 id="A-beginner-course-that-goes-beyond"><a href="#A-beginner-course-that-goes-beyond" class="headerlink" title="A beginner course that goes beyond"></a>A beginner course that goes beyond</h3><p>While the course is beginner-friendly, it also delves deep into advanced security concepts, making it suitable for developers of all skill levels. Whether you’re just starting your journey or looking to advance your skills, this course offers something valuable.</p><h3 id="What-to-Expect-from-Our-Course"><a href="#What-to-Expect-from-Our-Course" class="headerlink" title="What to Expect from Our Course"></a>What to Expect from Our Course</h3><p>“<a class="link"   href="https://www.educative.io/courses/building-secure-restful-apis-with-nestjs-a-practical-guide" >Building Secure RESTful APIs with NestJS: A Practical Guide <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>” is designed to equip you with the knowledge and skills to develop secure and scalable APIs using NestJS, a powerful Node.js framework. While theoretical knowledge is essential, this course emphasizes practical application. We’ll learn the concepts and see how they are applied in real-world scenarios, preparing us for challenges we’ll encounter in real-world projects.</p><p>Here’s a sneak peek into what you’ll learn:</p><ul><li><p><strong>NestJS Fundamentals</strong>: We’ll gain a solid understanding of NestJS, its architecture, and the powerful tools it provides for building modern web APIs.</p></li><li><p><strong>RESTful API Design</strong>: Learn how to design RESTful APIs, adhering to best practices and industry standards to create efficient and user-friendly APIs.</p></li><li><p><strong>Database Integration</strong>: We’ll explore database integration using MySQL, a popular relational database management system, and TypeORM, a powerful Object-Relational Mapping (ORM) framework.</p></li><li><p><strong>Authentication and Security</strong>: We’ll cover implementing secure authentication methods to protect our APIs and user data.</p></li><li><p><strong>Validation and Serialization</strong>: Discover how to validate incoming data and serialize outgoing responses, ensuring data integrity and consistency.</p></li><li><p><strong>Testing Strategies</strong>: We’ll master the art of writing unit and end-to-end tests to ensure the reliability and correctness of our NestJS applications. (End-to-end testing evaluates the functionality of an entire application to ensure it works correctly from start to finish.)</p></li><li><p><strong>Deployment to AWS</strong>: Learn how to deploy our NestJS applications to AWS ECS (Amazon Elastic Container Service) for seamless scalability and reliability in production environments.</p></li></ul><h2 id="Start-the-Learning-Journey"><a href="#Start-the-Learning-Journey" class="headerlink" title="Start the Learning Journey"></a>Start the Learning Journey</h2><p>Whether you’re a seasoned developer looking to improve your skills or a newcomer eager to explore NestJs development, <a class="link"   href="https://www.educative.io/courses/building-secure-restful-apis-with-nestjs-a-practical-guide" >the course <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> has something for everyone. Its practical approach, focus on best practices, comprehensive content, and hands-on exercises will equip you to tackle real-world challenges and confidently build secure and scalable APIs.</p><p>If you are thinking of enhancing your skills and advancing your career, Enroll now with Educative.io and embark on the journey to becoming a proficient NestJS developer!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The course is online now!&lt;/p&gt;
&lt;p&gt;As a seasoned developer, I have worked on various frameworks and technologies. NestJS is my favorite. It</summary>
      
    
    
    
    <category term="Programming" scheme="http://coffeethinkcode.com/categories/Programming/"/>
    
    
    <category term="TypeScript" scheme="http://coffeethinkcode.com/tags/TypeScript/"/>
    
    <category term="NestJS" scheme="http://coffeethinkcode.com/tags/NestJS/"/>
    
    <category term="Course" scheme="http://coffeethinkcode.com/tags/Course/"/>
    
  </entry>
  
  <entry>
    <title>Exploring Etag and If-Match in NestJS</title>
    <link href="http://coffeethinkcode.com/2024/03/05/exploring-etag/"/>
    <id>http://coffeethinkcode.com/2024/03/05/exploring-etag/</id>
    <published>2024-03-04T14:00:00.000Z</published>
    <updated>2024-07-07T03:46:12.490Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Optimizing-Concurrency-Handling-with-ETag-and-If-Match"><a href="#Optimizing-Concurrency-Handling-with-ETag-and-If-Match" class="headerlink" title="Optimizing Concurrency Handling with ETag and If-Match"></a>Optimizing Concurrency Handling with ETag and If-Match</h3><p>HTTP headers play an important role in building an efficient RESTful API. Two such headers,  <code>ETag</code>  and  <code>If-Match/If-None-Match</code>, are instrumental in handling concurrency and caching in RESTful APIs.</p><p>In this post, we will delve into  <code>Etag</code>  and  <code>If-Match/If-None-Match</code>  headers, and explore how to use them in NestJS. Correctly using them will allow us to design a robust RESTful API capable of handling concurrent transactions.</p><h2 id="Understanding-ETag-and-If-Match"><a href="#Understanding-ETag-and-If-Match" class="headerlink" title="Understanding ETag and If-Match"></a>Understanding ETag and If-Match</h2><p>An Entity Tag, or  <code>ETag</code>, is used to identify a specific version of a resource uniquely. It is a hash or identifier associated with the state of a resource on the server. There are two types of Etag:  <a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Conditional_requests#weak_validation" >weak <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  and  <a class="link"   href="https://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation" >strong <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. The weak Etag allows for flexibility in representing semantically equivalent content. Strong Etag is suitable for the resource representation that is byte-for-byte identical for all users.</p><p>When a client requests a resource, the server attaches an ETag to the response. Subsequent requests from the client can include this ETag in the  <code>If-None-Match</code>  header. The header is used to determine whether the resource has changed, the server responds with a “<code>304 Not Modified</code>” status if the resource has not changed, reducing unnecessary data transfer and enhancing performance.</p><p>On the other hand, the  <code>If-Match</code>  header is employed for optimistic concurrency control. It can ensure that an operation, such as an update or deletion, is only performed if the provided  <code>ETag</code>  matches the current state of the resource on the server.</p><p>The significance of  <code>ETag</code>  and  <code>If-Match</code>  lies in their ability to prevent conflicting updates. In scenarios where multiple clients modify the same resource concurrently, these headers act as safeguards.  <code>ETag</code>  enables efficient caching and reduces unnecessary data transfers while  <code>If-Match</code>  ensuring that updates occur only when the client possesses the latest resource version. Together, they contribute to a more resilient interaction between clients and servers in RESTful APIs.</p><h2 id="Generate-and-return-an-Etag"><a href="#Generate-and-return-an-Etag" class="headerlink" title="Generate and return an Etag"></a>Generate and return an Etag</h2><p>To generate an  <code>ETag</code>  in NestJS using the  <code>[etag](https://github.com/jshttp/etag)</code>  library, follow the below steps to install and import the library.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// install it  </span></span><br><span class="line">npm install etag  </span><br><span class="line"><span class="comment">// import it  </span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> etag <span class="keyword">from</span> <span class="string">&#x27;etag&#x27;</span>;</span><br></pre></td></tr></table></figure></div><p>Then, we can generate an  <code>Etag</code>  with a one-line call.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="comment">// your data here;  </span></span><br><span class="line"><span class="keyword">const</span> generatedETag = <span class="title function_">etag</span>(data);</span><br></pre></td></tr></table></figure></div><p>Please note that the etag function only accepts string, buffer, or steams. We can’t pass objects or arrays directly, but a workaround exists below.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayData = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];  </span><br><span class="line"><span class="keyword">const</span> etagForArray = <span class="title function_">etag</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arrayData));  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> objectData = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;  </span><br><span class="line"><span class="keyword">const</span> etagForObject = <span class="title function_">etag</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(objectData));</span><br></pre></td></tr></table></figure></div><p>Then, we can return the  <code>Etag</code>  in the response header for a GET request.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>(<span class="string">&#x27;etag&#x27;</span>)  </span><br><span class="line"> <span class="keyword">async</span> <span class="title class_">GetResource</span>(<span class="meta">@Res</span>(&#123; <span class="attr">passthrough</span>: <span class="literal">true</span> &#125;) <span class="attr">res</span>: <span class="title class_">Response</span>) &#123;  </span><br><span class="line">   <span class="comment">// fetching resource data  </span></span><br><span class="line">   <span class="keyword">const</span> resourceData = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchResourceData</span>();  </span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Attach ETag to the response header  </span></span><br><span class="line">   res.<span class="title function_">set</span>(<span class="string">&#x27;ETag&#x27;</span>, <span class="title function_">etag</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(resourceData)));  </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> resourceData;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>Please note that we need to set the  <code>passthrough</code>  option to true in the  <code>@Res(&#123; passthrough: true &#125;)</code>  decorator because injecting the  <code>@Res</code>  will disable the default route handling by default.</p><h2 id="Use-Etag-for-Caching"><a href="#Use-Etag-for-Caching" class="headerlink" title="Use Etag for Caching"></a>Use Etag for Caching</h2><p>One of the primary purposes of  <code>Etag</code>  is caching. After calling the GET the first time, the client retrieves the  <code>Etag</code>  in response, and then the subsequent requests can include this  <code>ETag</code>  in the  <code>If-None-Match</code>  header.</p><h3 id="an-example-of-if-none-match-header-in-the-request"><a href="#an-example-of-if-none-match-header-in-the-request" class="headerlink" title="an example of if-none-match header in the request"></a>an example of if-none-match header in the request</h3><p>If-None-Match: “bfc13a64729c4290ef5b2c2730249c88ca92d82d”</p><p>In the GET endpoint, add a check to compare the  <code>Etag</code>  in  <code>If-None-Match</code>  to determine whether a resource has been modified. We can return a 304 Not Modified response if the resource has not been changed.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()  </span><br><span class="line"> <span class="keyword">async</span> <span class="title function_">getResource</span>(<span class="params"> <span class="meta">@Res</span>(&#123; passthrough: <span class="literal">true</span> &#125;) res: Response,  </span></span><br><span class="line"><span class="params">   <span class="meta">@Headers</span>(<span class="string">&#x27;if-none-match&#x27;</span>) ifNoneMatch: <span class="built_in">string</span>, </span>)&#123;  </span><br><span class="line">   <span class="comment">// fetching the resource data  </span></span><br><span class="line">   <span class="keyword">const</span> resourceData = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">fetchResourceData</span>();  </span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Check If-None-Match header to determine if the resource has changed  </span></span><br><span class="line">   <span class="keyword">if</span> (ifNoneMatch &amp;&amp; ifNoneMatch === <span class="title function_">etag</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(resourceData))) &#123;  </span><br><span class="line">     <span class="comment">// Resource has not changed, return 304 Not Modified  </span></span><br><span class="line">     res.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">NOT_MODIFIED</span>).<span class="title function_">send</span>();  </span><br><span class="line">     <span class="keyword">return</span>;  </span><br><span class="line">   &#125;  </span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Return the resource data with the current ETag  </span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div><p>Upon receiving the response with a 304 status, most modern browsers will fetch the resource from the local cache.</p><h2 id="If-Match-for-Optimistic-Concurrency-Control"><a href="#If-Match-for-Optimistic-Concurrency-Control" class="headerlink" title="If-Match for Optimistic Concurrency Control"></a>If-Match for Optimistic Concurrency Control</h2><p>The  <code>If-Match</code>  header is commonly used to facilitate optimistic concurrency control. What exactly is optimistic concurrency control?</p><blockquote><p>Optimistic concurrency control is a strategy for managing multiple users attempting to modify the same piece of data simultaneously. Instead of locking the data and preventing others from making changes, optimistic concurrency assumes that conflicts are rare. Users can make changes independently, but before saving their modifications, the system checks if someone else has modified the data. If no changes conflict, the modifications are accepted; otherwise, the system prompts users to resolve the inconsistency.</p></blockquote><p>Now, let’s see how to implement it in a PUT request.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Put</span>(<span class="string">&#x27;:id&#x27;</span>)  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">updateResource</span>(  </span><br><span class="line">    <span class="meta">@Res</span>() <span class="attr">res</span>: <span class="title class_">Response</span>,  </span><br><span class="line">    <span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>,  </span><br><span class="line">    <span class="meta">@Body</span>() <span class="attr">updateData</span>: <span class="built_in">any</span>,  </span><br><span class="line">    <span class="meta">@Headers</span>(<span class="string">&#x27;if-match&#x27;</span>) <span class="attr">ifMatch</span>: <span class="built_in">string</span>, <span class="comment">// Extract If-Match header  </span></span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;  </span><br><span class="line">    <span class="comment">// Simulate fetching the resource data from the database  </span></span><br><span class="line">    <span class="keyword">const</span> currentResourceData = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getResourceData</span>(id);  </span><br><span class="line">    <span class="keyword">const</span> currentEtag = <span class="title function_">etag</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(currentResourceData));  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Validate If-Match header against the current ETag  </span></span><br><span class="line">    <span class="keyword">if</span> (ifMatch.<span class="title function_">toString</span>() !== currentEtag.<span class="title function_">toString</span>()) &#123;  </span><br><span class="line">      <span class="comment">// ETag mismatch, return Precondition Failed status  </span></span><br><span class="line">      res.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">PRECONDITION_FAILED</span>).<span class="title function_">send</span>();  </span><br><span class="line">      <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>When a client sends a request to update a resource, the client includes the current  <code>ETag</code>  of the resource in the  <code>If-Match</code>  header. The server then checks if the provided  <code>ETag</code>  matches the current state of the resource. If there’s a match, the update proceeds; otherwise, the server returns a “<code>412 Precondition Failed</code>” status, indicating that another party has modified the resource.</p><p>The same approach can be used not only for PUT but also applicable to DELETE and PATCH requests.</p><h2 id="If-Match-vs-If-None-Match"><a href="#If-Match-vs-If-None-Match" class="headerlink" title="If-Match vs If-None-Match"></a>If-Match vs If-None-Match</h2><p>It is worth highlighting that  <code>If-Match</code>  and  <code>If-None-Match</code>  headers serve different purposes in the context of  <code>ETags</code>. Here’s a breakdown of their differences:</p><p><code>**If-Match**</code> <strong>Header</strong></p><ul><li>It is used in requests to operate (e.g., update or delete) only if the provided  <code>ETag</code>  matches the current ETag of the resource on the server.</li><li>If the ETag matches, the operation is performed; otherwise, the server responds with a “<strong>412</strong>  Precondition Failed” status, indicating that another party modified the resource.</li></ul><p><code>**If-None-Match**</code> <strong>Header</strong></p><ul><li>It is used in requests to get a resource only if its ETag does not match the specified ETag(s).</li><li>If the ETag matches, the server responds with a “<strong>304</strong>  Not Modified” status, indicating that the client’s cached version is still valid and there’s no need to transfer the resource again.</li></ul><p>We discussed the usage of Etag and If-match&#x2F;if-none-match in this post. In many cases, it is a good practice to use a combination of etag and if-match for optimistic concurrency control. I hope you have learned one thing or two in this post.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Optimizing-Concurrency-Handling-with-ETag-and-If-Match&quot;&gt;&lt;a href=&quot;#Optimizing-Concurrency-Handling-with-ETag-and-If-Match&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    
    <category term="NestJS" scheme="http://coffeethinkcode.com/tags/NestJS/"/>
    
    <category term="Security" scheme="http://coffeethinkcode.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Durandal vs Angular</title>
    <link href="http://coffeethinkcode.com/2024/02/05/durandal-angular/"/>
    <id>http://coffeethinkcode.com/2024/02/05/durandal-angular/</id>
    <published>2024-02-04T14:00:00.000Z</published>
    <updated>2024-07-07T02:41:38.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-has-changed-for-Single-Page-App-in-the-last-ten-years"><a href="#What-has-changed-for-Single-Page-App-in-the-last-ten-years" class="headerlink" title="What has changed for Single Page App in the last ten years"></a>What has changed for Single Page App in the last ten years</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1046/1*Xbq4XJa6oQ-10YLsjAF-bQ.png"                                     ></p><p>Have you heard of Durandal? If you’re not a seasoned JS developer, you might not have. A decade ago, it was a popular single-page app (SPA) framework.</p><p>Back then, I worked on a significant project using Durandal for more than a year. I liked it. It was small, flexible, and easy to expand.</p><p>A decade is a long time in IT. Now, Durandal is no longer in use. The new generation of front-end JS frameworks is dominating the world of web applications.</p><p>Recently, I had a task to make a minor improvement to an old Durandal application. It felt like reconnecting with an old friend. Naturally, I compared it with the current JS framework, Angular 16.</p><p>As you can guess, Angular has surpassed Durandal in almost every aspect. However, many of the design concepts in Durandal still hold their own. Looking at these comparisons, it’s clear how much Single Page App (SPA) frameworks have evolved over the past decade. It’s kind of fascinating to see how far we’ve come.</p><h3 id="Framework-overview"><a href="#Framework-overview" class="headerlink" title="Framework overview"></a>Framework overview</h3><p>Durandal was created as a lightweight SPA framework focusing on simplicity and modularity. It relied on a combination of libraries like  <code>Knockout</code>  and  <code>Require.js</code>  to achieve its goals.</p><p>Durandal provides the essential features for making SPAs. It’s also designed to be easily integrated with other libraries.</p><p>Angular, on the other hand, is a complete package. That’s why it is called “batteries-included.” This means that Angular provides everything we need to build a rich single-page web app well-suited for large and complex projects.</p><h3 id="AMD-vs-ES6-module"><a href="#AMD-vs-ES6-module" class="headerlink" title="AMD vs ES6 module"></a>AMD vs ES6 module</h3><p>Durandal used the Asynchronous Module Definition (AMD) pattern for module loading and dependency management. One example usage of AMD is as below:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Define a module using AMD in Durandal  </span><br><span class="line">define([&#x27;knockout&#x27;], function(ko) &#123;  </span><br><span class="line">    var viewModel = &#123;  </span><br><span class="line">        message: ko.observable(&#x27;Hello, Durandal!&#x27;)  </span><br><span class="line">    &#125;;  </span><br><span class="line">    return viewModel;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>Angular, as well as other new JS frameworks, use the ES6 Module. Unlike AMD, ES6 modules are native to JavaScript, eliminating the need for additional loaders or libraries like Require.js. ES6 modules allow for static analysis, which enables better tooling, tree-shaking, and improved performance. By default, ES6 modules provide better encapsulation, making managing dependencies easier and preventing unintentional conflicts. Here is an example of usage.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Import the module  </span><br><span class="line">import &#123; greet &#125; from &#x27;./myModule&#x27;;  </span><br><span class="line">  </span><br><span class="line">// Angular Component  </span><br><span class="line">@Component(&#123;  </span><br><span class="line">  selector: &#x27;app-greeting&#x27;,  </span><br><span class="line">&#125;)  </span><br><span class="line">export class GreetingComponent &#123;  </span><br><span class="line">  message: string;  </span><br><span class="line">  </span><br><span class="line">  constructor() &#123;  </span><br><span class="line">    // Use the imported function  </span><br><span class="line">    this.message = greet(&#x27;John&#x27;);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Component-Based-Architecture"><a href="#Component-Based-Architecture" class="headerlink" title="Component-Based Architecture"></a>Component-Based Architecture</h3><p>Component-based architecture is a fundamental design paradigm in modern SPA frameworks. It involves breaking down the user interface into reusable, self-contained components, fostering modularity and maintainability in web applications.</p><p>Durandal has the concept of the component but lacks the structured component-based architecture seen in modern SPAs.</p><p>Angular emphasizes a component-based architecture and enforces a structured development approach by encapsulating functionality within reusable components, promoting a clear separation of concerns and maintainability in web applications.</p><h3 id="State-Management"><a href="#State-Management" class="headerlink" title="State Management"></a>State Management</h3><p>Durandal uses a combination of view models, routing, lifecycle methods, and storage options to help us manage and maintain the state. As the application grows, tracking and managing the state transitions between different components and views may become more challenging.</p><p>There are many state management frameworks in Angular. The most popular one is NgRx, a state management library inspired by Redux. It offers a structured way to manage the application state, making it easier to handle complex data flows.</p><h3 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h3><p>Durandal doesn’t provide a dedicated dependency injection container but offers a modular structure and integration with AMD (Asynchronous Module Definition) loaders like  <code>Require.js</code>.</p><p>Angular’s Dependency Injection (DI) is a powerful mechanism that lets us manage and inject dependencies effortlessly. With its built-in DI, we can keep our code clean, organized, and testable, making it an excellent feature for building robust web applications.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// Angular component with dependency injection  </span><br><span class="line">import &#123; Component &#125; from &#x27;@angular/core&#x27;;  </span><br><span class="line">import &#123; DataService &#125; from &#x27;./data.service&#x27;;  </span><br><span class="line">  </span><br><span class="line">@Component(&#123;  </span><br><span class="line">  selector: &#x27;app-example&#x27;,  </span><br><span class="line">  template: &#x27;&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;&#x27;,  </span><br><span class="line">&#125;)  </span><br><span class="line">export class ExampleComponent &#123;  </span><br><span class="line">  constructor(private dataService: DataService) &#123;  </span><br><span class="line">    this.message = this.dataService.getMessage();  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h3><p>Durandal employed two-way data binding with  <code>Knockout</code>, allow it to handle dynamic UI updates.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Durandal binding --&gt;  </span><br><span class="line">var vm = &#123;  </span><br><span class="line">    message = ko.observable(&#x27;Hello world&#x27;)  </span><br><span class="line">&#125;;  </span><br><span class="line">ko.applyBindings(vm);</span><br></pre></td></tr></table></figure></div><p>Angular provides its own two-way data binding mechanism, and it has improved performance and flexibility over time.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Angular HTML template --&gt;  </span><br><span class="line">&lt;input [(ngModel)]=&quot;message&quot; /&gt;  </span><br><span class="line">&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></div><p>Other modern frontend JS frameworks like React utilize one-way data binding, which enhances performance by updating the data state through events.</p><h3 id="Tooling-CLI-and-performance-optimization"><a href="#Tooling-CLI-and-performance-optimization" class="headerlink" title="Tooling, CLI, and performance optimization"></a>Tooling, CLI, and performance optimization</h3><p>Durandal kept things simple and modular but didn’t have a CLI tool. It also doesn’t come with the built-in performance optimization feature.</p><p>Unlike Angular, it didn’t have server-side rendering support out of the box.</p><p>Angular comes with its CLI — a rich toolkit for building, testing, and deploying Angular apps. It makes life easier for developers and supercharges productivity.</p><p>Angular 16 takes it up a notch with cool performance tricks like AOT compilation and improved tree-shaking. This means quicker load times and smaller bundles, making the app faster overall.</p><p>Angular 16 also rolled out the improved Angular Universal, giving us a proper server-side rendering capability. This makes your pages load faster and boosts the SEO.</p><p>These significant advancements have levelled up modern Single Page Apps (SPAs). They’re powerful, easy to maintain, and super fast. Comparing Angular with Durandal is like comparing a fancy new sports car to an older model. Durandal was remarkable in its time, but the new generation SPA frameworks have taken things to a whole new level!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;What-has-changed-for-Single-Page-App-in-the-last-ten-years&quot;&gt;&lt;a href=&quot;#What-has-changed-for-Single-Page-App-in-the-last-ten-years&quot; cl</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    <category term="Programming" scheme="http://coffeethinkcode.com/categories/Web-Development/Programming/"/>
    
    
    <category term="Angular" scheme="http://coffeethinkcode.com/tags/Angular/"/>
    
    <category term="Durandal" scheme="http://coffeethinkcode.com/tags/Durandal/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Index Signature Explained</title>
    <link href="http://coffeethinkcode.com/2024/02/01/typescript-index-signature-explained/"/>
    <id>http://coffeethinkcode.com/2024/02/01/typescript-index-signature-explained/</id>
    <published>2024-01-31T14:00:00.000Z</published>
    <updated>2024-07-07T03:40:54.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript-Index-Signature-Explained"><a href="#TypeScript-Index-Signature-Explained" class="headerlink" title="TypeScript Index Signature Explained"></a>TypeScript Index Signature Explained</h1><p>Demystifying TypeScript Index Signatures for Enhanced Code Flexibility</p><p>Index signatures in TypeScript provide a way to define a dynamic data structure when the properties of an object aren’t known beforehand, but the types of properties are known. They allow for dynamic property access and are particularly useful when working with objects with a variable set of keys.</p><p>This post will delve into the index signature, how to use it, and when to use it in TypeScript.</p><h3 id="What-is-the-index-signature"><a href="#What-is-the-index-signature" class="headerlink" title="What is the index signature?"></a>What is the index signature?</h3><p>An index signature is defined using square brackets [] and the type for keys, followed by a colon and the type for corresponding values. It enables TypeScript to understand and enforce the expected structure of the object.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyStats</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">scores</span>: <span class="title class_">MyStats</span> = &#123;</span><br><span class="line">  <span class="attr">total</span>: <span class="number">50</span>,</span><br><span class="line">  <span class="attr">average</span>:<span class="number">80</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index siganture enforce the type constraint</span></span><br><span class="line"><span class="comment">// here, the value must be a number</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">scores2</span>: <span class="title class_">MyStats</span> = &#123;</span><br><span class="line">  <span class="attr">total</span>: <span class="string">&quot;50&quot;</span>, <span class="comment">//Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.(2322)</span></span><br><span class="line">  <span class="attr">average</span>:<span class="number">80</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In this example, MyStats can have any string keys, and the values associated with those keys must be of type number.</p><p>The syntax for index signatures involves using the [] notation within the interface or type declaration. The below example shows the same index signature for interface and type.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CarType</span> = &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Note that index signatures can use different key types, such as string, number, symbol or literal typeand the associated value type can be any valid TypeScript type.</p><h3 id="Mixing-an-index-signature-with-explicit-members"><a href="#Mixing-an-index-signature-with-explicit-members" class="headerlink" title="Mixing an index signature with explicit members"></a>Mixing an index signature with explicit members</h3><p>In TypeScript, we can mix an index signature with explicit member declarations. It is helpful for cases requiring a combination of known and dynamic properties.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CarConfiguration</span> &#123;</span><br><span class="line">  [<span class="attr">feature</span>: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>When we mix the index signature with explicit members, all explicit members need to conform to the index signature types.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// invalid case</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CarConfiguration</span> &#123;</span><br><span class="line">  [<span class="attr">feature</span>: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">model</span>: <span class="built_in">string</span>; <span class="comment">// Error: Property &#x27;model&#x27; of type &#x27;string&#x27; is not assignable to &#x27;string&#x27; index type &#x27;number&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// valid</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CarConfiguration</span> &#123;</span><br><span class="line">  [<span class="attr">feature</span>: <span class="built_in">string</span>]: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">model</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Readonly-index-signature"><a href="#Readonly-index-signature" class="headerlink" title="Readonly index signature"></a>Readonly index signature</h3><p>Index signature supports readonly modifier. By applying the readonly modifier, the properties in the object will be immutable.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">toyota</span>: <span class="title class_">Car</span> = &#123;<span class="attr">hybrid</span>: <span class="literal">true</span>, <span class="attr">luxury</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">toyota.<span class="property">hybrid</span> = <span class="literal">false</span>; <span class="comment">//Error: Index signature in type &#x27;Car&#x27; only permits reading.(2542)</span></span><br></pre></td></tr></table></figure></div><p>In the above example, an error occurs when trying to modify the ‘hybrid’ property because the interface allows only reading, not writing.</p><h3 id="How-to-use-index-signature"><a href="#How-to-use-index-signature" class="headerlink" title="How to use index signature"></a>How to use index signature</h3><p>Let’s see a real-world example of how index signatures can be used. Imagine we’re developing a web application with various features. Each feature includes its own set of settings. We are also able to enable or disable these features.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">FeatureConfig</span> &#123;</span><br><span class="line">  [<span class="attr">feature</span>: <span class="built_in">string</span>]: &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">settings</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">boolean</span>&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In this example, we define an interface named FeatureConfig. It uses an index signature to allow dynamic property names of type string associated with anenabled boolean property and a settings object. It is handy for representing configurations with dynamic feature names and associated settings. For example, we can apply the interface to the following object.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">features</span>: <span class="title class_">FeatureConfig</span> = &#123;</span><br><span class="line">  <span class="attr">profile</span>: &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">settings</span>: &#123;</span><br><span class="line">      <span class="attr">showPhoto</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">allowEdit</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">notification</span>: &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">settings</span>: &#123;</span><br><span class="line">      <span class="attr">richText</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">batchMode</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>In the features object, the feature names can vary, but the structure for each feature remains consistent. Each feature is expected to have an enabled boolean and a settings object.   </p><p>To improve the type safety, can we apply a union-type constraint to the feature name in the above interface?</p><p>If the set of features in our application is known, we can define the union of string literals namedFeatureType.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FeatureType</span> = <span class="string">&#x27;profile&#x27;</span> | <span class="string">&#x27;notification&#x27;</span> | <span class="string">&#x27;reporting&#x27;</span>;  </span><br></pre></td></tr></table></figure></div><p>The key of the index signature does not support the union type, but we can work around it using a mapped type.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FeatureConfig2</span> = &#123;</span><br><span class="line">  [feature <span class="keyword">in</span> <span class="title class_">FeatureType</span>]: &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">settings</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">boolean</span>&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>[feature in FeatureType]is a mapped type that iterates over each string literal in the union type FeatureType (which includes ‘profile’, ‘notification’, and ‘reporting’), and it uses each value as the resulting type’s property name.</p><p>Here’s an example of how we might use it:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">allFeatures</span>: <span class="title class_">FeatureConfig2</span> = &#123;</span><br><span class="line">  <span class="attr">profile</span>: &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">settings</span>: &#123;</span><br><span class="line">      <span class="attr">showPhoto</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">allowEdit</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">notification</span>: &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">settings</span>: &#123;</span><br><span class="line">      <span class="attr">richText</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">batchMode</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="attr">reporting</span>: &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">settings</span>: &#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">advanceExport</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>Note that we need to include all features defined in FeatureType to the object to match the type expectations.</p><p>If we want to allow a subset of the features as the key, we need to modify the index signature type with an “?” as an optional flag. Then, we could use the FeatureConfig2 type for an object that only contains a subset of features.</p><pre><code class="typescript">type FeatureType = &#39;profile&#39; | &#39;notification&#39; | &#39;reporting&#39;;    type FeatureConfig2 = &#123;      [feature in FeatureType]?: &#123;        enabled: boolean;        settings: Record&lt;string, boolean&gt;;      &#125;    &#125;    const subsetFeatures: FeatureConfig2 = &#123;      profile: &#123;        enabled: true,        settings: &#123;          showPhoto: true,          allowEdit: false,        &#125;,      &#125;    &#125;;</code></pre><h3 id="How-to-use-index-signatures-effectively"><a href="#How-to-use-index-signatures-effectively" class="headerlink" title="How to use index signatures effectively"></a>How to use index signatures effectively</h3><p>Some commonly used scenarios include:</p><ul><li>Configuration Objects: As the above example illustrates, index signatures excel in scenarios where configuration objects may have dynamic keys and associated values.</li><li>Data Transformation: Index signatures can be beneficial when dealing with data transformations or parsing. They allow for flexible handling of input data with varying structures.</li><li>Extensibility: In projects where extensibility is a priority, such as plugin architectures or modular systems, index signatures enable adding new components without modifying existing code.</li></ul><p>While powerful, index signatures should not be overused. Before implementing an index signature, consider whether a more explicit interface or type definition could better represent the data structure, especially when the keys have specific meanings.</p><p>Another consideration is to apply rigorously test scenarios involving index signatures. This includes testing various key-value combinations to ensure that the dynamic nature of the structure does not introduce unforeseen issues.</p><p>By avoiding common mistakes and following best practices, we can use index signatures to make TypeScript code more flexible and resilient.</p><p>Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript-Index-Signature-Explained&quot;&gt;&lt;a href=&quot;#TypeScript-Index-Signature-Explained&quot; class=&quot;headerlink&quot; title=&quot;TypeScript Index Sig</summary>
      
    
    
    
    <category term="Programming" scheme="http://coffeethinkcode.com/categories/Programming/"/>
    
    
    <category term="TypeScript" scheme="http://coffeethinkcode.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Unlocking TypeScript 5 Hidden Gems You May Not Know</title>
    <link href="http://coffeethinkcode.com/2023/08/01/unlocking-typescript-5-hidden-gems/"/>
    <id>http://coffeethinkcode.com/2023/08/01/unlocking-typescript-5-hidden-gems/</id>
    <published>2023-07-31T14:00:00.000Z</published>
    <updated>2024-07-07T03:49:46.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>TypeScript is rapidly evolving, with each new release introducing features that aim to make the language more concise, powerful, and faster. While the extensive language feature is a blessing, it can also make it challenging for developers to keep up.</p><p>In this article, I will walk through five lesser-known yet incredibly useful TypeScript features and explore how to use them to enhance your TypeScript development experience.</p><h2 id="Short-Circuiting-Assignment-Operators"><a href="#Short-Circuiting-Assignment-Operators" class="headerlink" title="Short-Circuiting Assignment Operators"></a>Short-Circuiting Assignment Operators</h2><p>Short-circuiting assignment operators are introduced in TypeScript 4.0. It allows you to perform multiple operations in a single line of code. Consider the following example.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">number</span> | <span class="literal">undefined</span>;  </span><br><span class="line"><span class="comment">// Without short-circuiting assignment  </span></span><br><span class="line"><span class="keyword">if</span> (!x) &#123;  </span><br><span class="line">  x= <span class="number">42</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// With short-circuiting assignment  </span></span><br><span class="line">x ||= <span class="number">42</span>; <span class="comment">// x is 42 if null</span></span><br></pre></td></tr></table></figure></div><p>Here, the “||&#x3D;” operator assigns the value 42 to “x” if it’s null or undefined. This can be a useful shorthand for writing if statements and can help reduce the amount of code you need to write.</p><p>Three operators are supported, including logical and (&amp;&amp;), logical or (||), and nullish coalescing (??). Below is another example:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">scores</span>: <span class="built_in">number</span>[] | <span class="literal">undefined</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Without short-circuiting assignment  </span></span><br><span class="line"><span class="keyword">if</span>(!!scores)&#123;  </span><br><span class="line">  scores = [];  </span><br><span class="line">  scores.<span class="title function_">push</span>(<span class="number">99</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// With short-circuiting assignment  </span></span><br><span class="line">(scores??= []).<span class="title function_">push</span>(<span class="number">99</span>);</span><br></pre></td></tr></table></figure></div><p>As shown in the example, using the new short-circuiting assignment operator make the code more concise.</p><h2 id="Key-Remapping-in-Mapped-Types"><a href="#Key-Remapping-in-Mapped-Types" class="headerlink" title="Key Remapping in Mapped Types"></a>Key Remapping in Mapped Types</h2><p>Key remapping in mapped types is a powerful feature that allows renaming keys in an object type.</p><p>To perform key remapping, We need to use the  <code>as</code>  keyword followed by a type expression that describes the new key. Below is the basic syntax:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MappedTypeWithNewProperties</span>&lt;T&gt; = &#123;  </span><br><span class="line">    [<span class="title class_">Properties</span> <span class="keyword">in</span> keyof T <span class="keyword">as</span> <span class="title class_">NewKeyType</span>]: <span class="title class_">Type</span>[<span class="title class_">Properties</span>]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>One of the common use cases of key remapping is to create a new type with renamed keys.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;  </span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;  </span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NewPerson</span> = &#123;  </span><br><span class="line">  [K <span class="keyword">in</span> keyof <span class="title class_">Person</span> <span class="keyword">as</span> <span class="string">`new_<span class="subst">$&#123;<span class="built_in">string</span> &amp; K&#125;</span>`</span>]: <span class="title class_">Person</span>[K];  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">const</span> <span class="title class_">John</span> : <span class="title class_">NewPerson</span> = &#123;  </span><br><span class="line">    <span class="attr">new_name</span>: <span class="string">&#x27;John&#x27;</span>,  </span><br><span class="line">    <span class="attr">new_age</span>: <span class="number">10</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In the above example, the  <code>NewPerson</code> type uses a mapped type to rename the keys in the  <code>Person</code> type. The  <code>K</code>  variable represents the keys in the  <code>Person</code> type, and the  <code>new_$&#123;string &amp; K&#125;</code>  syntax is used to rename the keys. This can be useful when you want to derive a new type based on an existing Type.</p><p>You can also use this feature to add or remove keys, making creating a well-constrained type system for your App more flexible.</p><h2 id="Labeled-Tuple-Elements"><a href="#Labeled-Tuple-Elements" class="headerlink" title="Labeled Tuple Elements"></a>Labeled Tuple Elements</h2><p>In TypeScript, Tuple is a data structure that allows us to store a fixed-size sequence of elements of different types. The value of a tuple can be accessed via array-style indexing:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">john</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;John&quot;</span>, <span class="number">20</span>];  </span><br><span class="line"><span class="keyword">let</span> <span class="attr">age_of_John</span>: <span class="built_in">number</span>= john[<span class="number">1</span>];</span><br></pre></td></tr></table></figure></div><p>As shown above, using indexing is hard to express the intent. We also need to ensure the type of the element is correct. Otherwise, an error will be thrown.</p><p>Labeled tuple elements are a feature introduced in TypeScript 4.0. It allows you to label the elements of a tuple. Below is an example:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span>= [<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>];  </span><br><span class="line"><span class="keyword">const</span> <span class="attr">myTuple</span>: <span class="title class_">Person</span> = [<span class="string">&#x27;John&#x27;</span>, <span class="number">30</span>];  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myTuple.<span class="property">name</span>); <span class="comment">// &#x27;John&#x27;  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myTuple.<span class="property">age</span>); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure></div><p>Here, the elements of the  <code>MyTuple</code> type are labeled as  <code>name</code> and  <code>age</code>, makes it more readable. The labels can also be used to access the tuple’s elements, which can be especially useful when working with complex data structures.</p><h2 id="Use-Index-Signatures-to-define-an-Object-with-an-unknown-structure"><a href="#Use-Index-Signatures-to-define-an-Object-with-an-unknown-structure" class="headerlink" title="Use Index Signatures to define an Object with an unknown structure"></a>Use Index Signatures to define an Object with an unknown structure</h2><p>Index signatures in TypeScript provide a way to define an object’s properties with a dynamic key. This is useful when we know the type of the properties, but the names of the properties are unknown. To use index signatures, we need to declare the key type as below.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; [<span class="attr">key</span>: <span class="title class_">KeyType</span>]: <span class="title class_">ValueType</span> &#125;</span><br></pre></td></tr></table></figure></div><p>Below is an example:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyObj</span> &#123;  </span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">number</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">MyObj</span> = &#123;  </span><br><span class="line">  <span class="attr">foo</span>: <span class="number">1</span>,  </span><br><span class="line">  <span class="attr">bar</span>: <span class="number">2</span>,  </span><br><span class="line">  <span class="attr">baz</span>: <span class="number">3</span>  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>Here, we defined an interface  <code>MyObj</code>  with an index signature  <code>[key: string]: number</code>. This means that  <code>MyObj</code>  can have any number of properties with string keys and number values. We then created an object  <code>obj</code>  that conforms to the  <code>MyObj</code>  interface, with properties  <code>foo</code>,  <code>bar</code>, and  <code>baz</code>.</p><p>The key of the index signature can only be a  <code>string</code>,  <code>number</code>,  <code>symbol</code> or template literal type. If you try to use other types, an error will be thrown.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*6ewi-lWkUKrIrVWgGgTuhw.png"                                     ></p><p>Error when trying to use number array to key</p><p>Note that you can also use index signatures with static properties.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStaticClass</span> &#123;  </span><br><span class="line">  <span class="keyword">static</span> [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">number</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title class_">MyStaticClass</span>.<span class="property">foo</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></div><p>The static index signature is only available for TypeScript 4.3 and above.</p><h2 id="Use-satisfies-operator-to-validate-against-another-type"><a href="#Use-satisfies-operator-to-validate-against-another-type" class="headerlink" title="Use  satisfies operator to validate against another type"></a>Use  <code>satisfies</code> operator to validate against another type</h2><p><code>satisfies</code>is a new feature that was introduced in TypeScript 4.9. It allows developers to define a type that must satisfy certain types but not affect the original type. This will be useful when you want to ensure that a type conforms to a specific set of rules and preserve the original type simultaneously.</p><p>Let’s say we have a config object containing  <code>name</code> and  <code>count</code> properties.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;  </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;My App&#x27;</span>,  </span><br><span class="line">    <span class="attr">count</span>: <span class="number">5</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ConfigType</span> = <span class="title class_">Record</span>&lt;<span class="string">&#x27;name&#x27;</span>|<span class="string">&#x27;count&#x27;</span>, <span class="built_in">number</span> | <span class="built_in">string</span>&gt;;  </span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">ConfigType</span> = &#123;  </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;My App&#x27;</span>,  </span><br><span class="line">    <span class="attr">count</span>: <span class="number">5</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>we can use a  <code>ConfigType</code> to apply type constraint to it so that we can catch any typo in compile time.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:870/1*A5eXh1x27CCU45PGhJdr2w.png"                                     ></p><p>But there is a side effect of this approach; we lost the original type inference. The  <code>count</code> property was a  <code>number</code> type, and now it has become a union of  <code>string | number.</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:603/1*BYMBhgtY2uEz-mwhpnyI1w.png"                                     ></p><p>The  <code>satisfies</code>  operator provides a better solution.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config2 = &#123;  </span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;My App&#x27;</span>  </span><br><span class="line">  <span class="attr">count</span>: <span class="number">10</span>,  </span><br><span class="line">&#125; satisfies <span class="title class_">ConfigType</span>;</span><br></pre></td></tr></table></figure></div><p>Here we use  <code>satisfies</code>  to validate the object with  <code>ConfigType</code>, and simultaneously, the original type inference is preserved.</p><p>In this article, we discuss 5 TypeScript hidden gems. They can help you to write clean and type-safe code when used in the right place.</p><p>I hope you find the article useful. Happy coding!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;TypeScript is rapidly evolving, with each new release introducing features tha</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    <category term="Programming" scheme="http://coffeethinkcode.com/categories/Web-Development/Programming/"/>
    
    
    <category term="TypeScript" scheme="http://coffeethinkcode.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Host Angular App in IIS vs. Nginx</title>
    <link href="http://coffeethinkcode.com/2023/07/02/host-angular-iis-nginx/"/>
    <id>http://coffeethinkcode.com/2023/07/02/host-angular-iis-nginx/</id>
    <published>2023-07-01T14:00:00.000Z</published>
    <updated>2024-07-06T09:36:21.366Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A-Practical-Hands-on-Guide"><a href="#A-Practical-Hands-on-Guide" class="headerlink" title="A Practical Hands-on Guide"></a>A Practical Hands-on Guide</h3><p>Hosting an Angular application can be done in various ways. Two popular approaches are IIS (Internet Information Services) and Nginx. While both options allow you to host your Angular app, there are some key differences between the two.</p><p>This article will discuss the pros and cons of these two methods.</p><h2 id="Prepare-Angular-App-for-Deployment"><a href="#Prepare-Angular-App-for-Deployment" class="headerlink" title="Prepare Angular App for Deployment"></a>Prepare Angular App for Deployment</h2><p>To get your app ready to be deployed, we need to build the app with a production configuration.</p><p>Run the following CLI command</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod</span><br></pre></td></tr></table></figure></div><p>The flag  <code>— prod</code>  means the production build output is optimized with minification, tree shaking, and AOT (ahead-of-time) compilation. As a result, the output bundle size will be significantly smaller than a development build. After the build is completed, the output files are stored in a  <code>dist/[app-name]</code>folder. These files are the artifacts for the deployment.</p><h2 id="Deploy-Angular-App-to-IIS"><a href="#Deploy-Angular-App-to-IIS" class="headerlink" title="Deploy Angular App to IIS"></a>Deploy Angular App to IIS</h2><p>IIS is a web server developed by Microsoft and included in the Windows operating system. The benefit of using IIS is that it can take advantage of various security features, i.e., Windows Authentication.</p><p><strong>Add the</strong> <code>**web.config**</code> <strong>file</strong></p><p>To be able to use IIS to host Angular App, we need to add a  <code>web.config</code>  file first.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;configuration&gt;  </span><br><span class="line">  &lt;system.webServer&gt;  </span><br><span class="line">  &lt;rewrite&gt;  </span><br><span class="line">    &lt;rules&gt;  </span><br><span class="line">      &lt;rule name=&quot;RoutesReWrite&quot; patternSyntax=&quot;Wildcard&quot; stopProcessing=&quot;true&quot;&gt;  </span><br><span class="line">        &lt;conditions logicalGrouping=&quot;MatchAll&quot;&gt;  </span><br><span class="line">          &lt;add input=&quot;&#123;REQUEST_FILENAME&#125;&quot; matchType=&quot;IsFile&quot; negate=&quot;true&quot; /&gt;  </span><br><span class="line">          &lt;add input=&quot;&#123;REQUEST_FILENAME&#125;&quot; matchType=&quot;IsDirectory&quot; negate=&quot;true&quot; /&gt;  </span><br><span class="line">        &lt;/conditions&gt;  </span><br><span class="line">        &lt;action type=&quot;Rewrite&quot; url=&quot;./index.html&quot; /&gt;  </span><br><span class="line">      &lt;/rule&gt;  </span><br><span class="line">    &lt;/rules&gt;  </span><br><span class="line">  &lt;/rewrite&gt;  </span><br><span class="line">  &lt;/system.webServer&gt;  </span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></div><p>The above  <code>web.config</code>  file contains the IIS rewrite rules. You may need to update the file to match the requirements of your app. For example, add a rewrite rule if your Angular App needs to  <a class="link"   href="https://medium.com/javascript-in-plain-english/all-you-need-to-know-about-angular-proxy-configuration-a1aeb2d8c86" >proxy the API call <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>The  <code>web.config</code>  file must be copied into the root directory of the Anguar app artifacts.</p><p><strong>Set up the website in IIS</strong></p><p>We can follow these steps to set up a new website in IIS.</p><ul><li>Create a new website: Use the IIS manager to create the new site and specify the physical path to the directory where the Angular app’s build artifacts are located.</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*jJwQiRpdNZGA_vkGpOpFpQ.png"                                     ></p><ul><li>Install URL Rewrite module: If it is not installed, install the URL rewrite module from  <a class="link"   href="https://www.iis.net/downloads/microsoft/url-rewrite" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. You should see it appear in the IIS manager after the installation.</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*nuzKYd5H_h3KJfDEQKwrcA.png"                                     ></p><ul><li>Deploy the Angular app: Use a pipeline or scripts to automate copying the build output to the physical path specified for the website in IIS.</li></ul><p>We can restart the IIS by running the following command.</p><p>iisreset</p><p>Now, navigate to the localhost URL to test the Angular App. For any issues configuring the URL rewrite and proxying, refer to this  <a class="link"   href="https://medium.com/javascript-in-plain-english/all-you-need-to-know-about-angular-proxy-configuration-a1aeb2d8c86" >article <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  for more info.</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx is a free and open-source web server commonly used on Linux servers. It is fast and efficient, making it a popular option for hosting websites and web applications.</p><p>Assuming Nginx is installed, run the following command to verify it.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx  </span><br><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure></div><p>If Nginx is started, type the server’s public IP address into the browser, and the default Nginx page will be shown.</p><p>The next step is to edit the Nginx configuration  <code>nginx.conf</code>. Typically, the Nginx configuration file can be found in either  <code>/etc/nginx/nginx.conf</code>  or  <code>/etc/nginx/sites-enabled/default</code>.</p><p>An example of the updated config file is as below.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">http &#123;  </span><br><span class="line">  .....  </span><br><span class="line">    server &#123;  </span><br><span class="line">        listen 80 default_server;  </span><br><span class="line">        listen [::]:80 default_server;  </span><br><span class="line">        server_name domainXYZ.com;  </span><br><span class="line">        location / &#123;  </span><br><span class="line">          proxy_pass /app/[name of Angular App]/dist;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        error_page 404 /404.html;  </span><br><span class="line">            location = /40x.html &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        error_page 500 502 503 504 /50x.html;  </span><br><span class="line">            location = /50x.html &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>These settings define the server domain name and port number. You can use any port number as long as the port is allowed in your host security group.</p><p>In the above setting, we assume that the app bundles reside on  <code>/app/[name of Angular App]/dist</code>. We need to either enable a pipeline or use a script to copy the Angular build output into the folder.</p><p>After updating the configuration file, we need to restart the Nginx server to make the change effective.</p><p>sudo systemclt restart nginx</p><p>Enter the server domain name and port number into the browser, and your Angular app should run!</p><p>Another must-do in a real-world app is to register and install an SSL certificate and configure it in Nginx. You can find the details in  <a class="link"   href="https://medium.com/gitconnected/build-and-host-a-dynamic-web-site-for-only-1-per-month-1aa5aa3a7bd1#5776" >this article <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><h2 id="IIS-vs-Nginx"><a href="#IIS-vs-Nginx" class="headerlink" title="IIS vs. Nginx"></a>IIS vs. Nginx</h2><p>In summary, both IIS and Nginx can host Angular applications, but they have different strengths and weaknesses.</p><p>IIS is tightly integrated with the Windows operating system, making it easy to use and manage in a corporate environment. At the same time, Nginx is known for its high performance and low resource usage, making it well-suited for high-traffic websites. For normal web apps, the performance difference between these two is negligible. But Nginx has an edge in its flexibility and extensive configuration options.</p><p>Both servers use a reverse proxy to forward incoming requests to the Angular application.</p><p>While IIS is primarily designed for Windows, Nginx can run on multiple platforms, including Linux, macOS, and Windows. This cross-platform compatibility gives Nginx broader adoption and flexibility in deployment scenarios.</p><p>Ultimately, the choice depends on many factors, such as platform preference, the team’s skillset, and performance requirements.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;A-Practical-Hands-on-Guide&quot;&gt;&lt;a href=&quot;#A-Practical-Hands-on-Guide&quot; class=&quot;headerlink&quot; title=&quot;A Practical Hands-on Guide&quot;&gt;&lt;/a&gt;A Practi</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    <category term="Programming" scheme="http://coffeethinkcode.com/categories/Web-Development/Programming/"/>
    
    
    <category term="Angular" scheme="http://coffeethinkcode.com/tags/Angular/"/>
    
    <category term="IIS" scheme="http://coffeethinkcode.com/tags/IIS/"/>
    
    <category term="Nginx" scheme="http://coffeethinkcode.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Postman Flow - The Good Parts and Bad Parts</title>
    <link href="http://coffeethinkcode.com/2023/06/27/postman/"/>
    <id>http://coffeethinkcode.com/2023/06/27/postman/</id>
    <published>2023-06-26T14:00:00.000Z</published>
    <updated>2024-07-07T08:35:43.328Z</updated>
    
    <content type="html"><![CDATA[<p>Postman is the most popular API testing tool. I often use it to do random API tests in the development process.</p><p>Recently, I‘ve come across a new feature called “flow” in Postman. It was released to the general public in March 2023.</p><p>I was truly excited about Postman Flow because it looked perfect for the task I was working on. However, I realised it wasn’t perfect after a few days working with it. As with any new features or tools, Postman flow comes with its pros and cons.</p><p>In this post, I will share my experiences with Postman flow. Please note this post is not a tutorial on how to use Postman flow. It is an overview of what it can and can’t do.</p><h2 id="What-is-Postman-Flow"><a href="#What-is-Postman-Flow" class="headerlink" title="What is Postman Flow"></a>What is Postman Flow</h2><p>Postman’s official site gives a good definition.</p><blockquote><p>Postman Flows is a visual tool for building API-driven applications for the  <a class="link"   href="https://www.postman.com/api-first/" >API-First <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  world. You can use flows to chain requests, handle data, and create real-world workflows in your Postman workspace.</p></blockquote><p>When we create a new flow, a blank canvas is shown with a start button. We can right-click to add an element from many “Blocks.”</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/0*bHzDZgOahkLAbd0y.gif"                                     ></p><p>Source:  <a class="link"   href="https://learning.postman.com/docs/postman-flows/tutorials/building-your-first-flow/" >https://learning.postman.com/docs/postman-flows/tutorials/building-your-first-flow/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>The blocks are divided into a few categories:  <strong>action</strong> (i.e., Send request),  <strong>decision&#x2F;logic</strong> (i.e., If, Evaluate), and i<strong>nformation</strong> (i.e., text, output).</p><p>The decision&#x2F;logic blocks allow the flow control, such as  <code>if</code> condition or looping. A Flows Query Language(<strong>FQL</strong>) is provided to parse and transform the data. FQL supports some basic functions like  <code>$count</code> or  <code>$each</code>. They can be used with the  <a class="link"   href="https://learning.postman.com/docs/postman-flows/reference/blocks-list/#evaluate" >Evaluate block <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  to manipulate the JSON data.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/0*xJ12NCCFIGo1vu_3.gif"                                     ></p><p>Source:  <a class="link"   href="https://learning.postman.com/docs/postman-flows/tutorials/building-your-first-flow/" >https://learning.postman.com/docs/postman-flows/tutorials/building-your-first-flow/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>Like other entities in Postman, the flow resides within the Postman workspace. You can share or fork the flow within the team workspace or move it to another one.</p><p>Overall, it is a powerful and good-looking tool.</p><p>Let’s dive into the good parts first.</p><h2 id="Good-Parts"><a href="#Good-Parts" class="headerlink" title="Good Parts"></a>Good Parts</h2><h3 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h3><p>It is a nice looking visual tool, and the running animation looks great. The animation enhances the running experience, and it makes the flow easier to understand.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*vOowZFMzbhAgDXN1rE523A.png"                                     ></p><p>Source:  <a class="link"   href="https://learning.postman.com/docs/postman-flows/gs/flows-overview/" >https://learning.postman.com/docs/postman-flows/gs/flows-overview/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>If you turn on the dark theme, it looks even better.</p><h2 id="Low-code-x2F-No-code"><a href="#Low-code-x2F-No-code" class="headerlink" title="Low-code &#x2F;No-code"></a><strong>Low-code &#x2F;No-code</strong></h2><p>Prior to Postman Flow, we would need to use the collection runner to chain a few requests. The collection runner would execute the requests by order of requests in the collection or write a script with  <code>setNextRequest</code>  method to create a manual workflow.</p><p>With Postman flow, we only need to drag-and-drop, no code necessary. This is great for non-technical users.</p><h2 id="Select-from-the-sample-response-data"><a href="#Select-from-the-sample-response-data" class="headerlink" title="Select from the sample response data."></a>Select from the sample response data.</h2><p>The Select block is used to select a value from the output of the upstream block (i.e., the response body of the previous request).</p><p>It works well with JSON response data, as well as HTML(although it isn’t documented). After you run the flow once, the response data will be saved as an example, and you can choose from a drop-down with the example data.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:389/1*IpR6Fy5LFFUXjun6pK5Iww.png"                                     ></p><p>Source:  <a class="link"   href="https://learning.postman.com/docs/postman-flows/tutorials/using-response-data-in-a-request/" >https://learning.postman.com/docs/postman-flows/tutorials/using-response-data-in-a-request/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="Re-use-Existing-Requests"><a href="#Re-use-Existing-Requests" class="headerlink" title="Re-use Existing Requests"></a>Re-use Existing Requests</h2><p>If you already have existing Postman collections&#x2F;requests, they can be easily dropped into the flow canvas and chained into a workflow. This is a huge advantage for my project because we have accumulated many Postman requests over the years, most of which are standalone.</p><p>Using the Postman Flow, we can connect them with minor modifications. It provides more test coverage and increases the visibility for business users.</p><p>Compared with the old collection approach, flow can share the existing request in the collection. In other words, you don’t need to duplicate requests to get them into the flow. That makes the flow building much cleaner and more re-usable.</p><h1 id="Bad-Parts"><a href="#Bad-Parts" class="headerlink" title="Bad Parts"></a>Bad Parts</h1><p>Postman offers a free plan which allows you to run basic API tests and other features, including flow. But keep in mind that Postman isn’t an open-source tool. The free features may be changed or limited at any time. Recently, a new limitation was added to restrict the number of runs for free and “professional” paid account usage,  <a class="link"   href="https://community.postman.com/t/250-collection-runs-per-month-on-professional/43946/89" >which many developers felt unjustifiable <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. So, it is something to consider when investing effort into building API tests with Postman flow.</p><h2 id="Lack-of-Export-and-limits-on-the-free-plan"><a href="#Lack-of-Export-and-limits-on-the-free-plan" class="headerlink" title="Lack of Export and limits on the free plan"></a>Lack of Export and limits on the free plan</h2><p>Postman allows you to export requests, collections, and environments to JSON files. These exported files are very handy, as they can be shared between the team and&#x2F;or stored in the version controller system.</p><p>However, the flow cannot be exported. This feature isn’t being provided, though many developers have asked for it in the Postman forum. Instead, the capability to share the flow with Postman team workspace is provided. This means only team members can access or fork a flow.</p><p>Lacking the export feature also means the flow can only be stored in Postman’s workspace.</p><p>To make things worse, the free plan has a limit of 3 members in a team workspace. Although the flow feature is available to a free plan, those limitations make it almost non-usable in a team.</p><p>From a business perspective, it is understandable that the free plan is limited. However, I found it hard to justify that the export feature doesn’t exist for even paid account users.</p><h2 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h2><p>Although we can re-use the existing requests in a flow, there is a hidden limitation: you can’t modify an environment variable or collection variable inside the flow.</p><p>It is very common to have these scripts embedded in a Postman request:</p><p>pm.environment.set(“variable_key”, “variable_value”);<br>pm.collectionVariables.set(“variable_key”, “variable_value”);</p><p>But if you use one of these requests to build your flow, the script above will throw an error. It is  <a class="link"   href="https://github.com/postmanlabs/postman-flows/discussions/142" >a design decision <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  from the Postman team.</p><p>Below are some extracts from the Postman team’s response.</p><p>“_Environment works in a read-only mode, updates to the environment from scripts are not respected._”</p><p>“_We encourage using the connection to pipe data from one block to another, rather than using Globals&#x2F;Environments, etc._”</p><p>I am disappointed with this decision. It breaks many of my existing request scripts. Many developers are in the same situation.</p><h2 id="If-block"><a href="#If-block" class="headerlink" title="If block"></a>If block</h2><p>There is an important logic block in flow:  <code>if</code>. It is a logical gate that allows you to decide the flow path based on the input.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*xVhZ0XcHm5zuIpDzxy2cLw.png"                                     ></p><p>Source:  <a class="link"   href="https://www.postman.com/postman/workspace/flows-snippets/flow/63bcba94f3155f2e86b54eb0" >https://www.postman.com/postman/workspace/flows-snippets/flow/63bcba94f3155f2e86b54eb0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>As in any programming language,  <code>if</code> is the most essential building block. The issue of  <code>if</code>  block in Post flow is that it only supports  <strong>one</strong>  condition.</p><p>When we have more than one condition, the workaround is to chain multiple  <code>if</code>  blocks together. In a real-world project, multiple conditions are extremely common. Chaining multiple  <em>if</em> blocks for one line of code is so cumbersome!</p><p>These are the main issues I encountered in my few days experience with Postman flow.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Postman flow has the potential to be a game changer in simplifying API testing. With sleek design and user friendly drag and drop UI, it offers an intuitive experience.</p><p>However, I am disappointed as both the absence of the export feature and single-condition if block are deal-breakers for my use cases.Moreover, I have reservations about Postman’s product philosophy, particularly concerning to the way of  <a class="link"   href="https://community.postman.com/t/250-collection-runs-per-month-on-professional/43946/89" >pressuring users to a paid account <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, rather than providing value added services that naturally encourage users to upgrade.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Postman is the most popular API testing tool. I often use it to do random API tests in the development process.&lt;/p&gt;
&lt;p&gt;Recently, I‘ve com</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    
    <category term="API" scheme="http://coffeethinkcode.com/tags/API/"/>
    
    <category term="tools" scheme="http://coffeethinkcode.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>DotNet-Format vs CSharpier Which Auto-Formatting Tool is Best for Your .NET Code</title>
    <link href="http://coffeethinkcode.com/2023/05/05/dotnet-formater/"/>
    <id>http://coffeethinkcode.com/2023/05/05/dotnet-formater/</id>
    <published>2023-05-04T14:00:00.000Z</published>
    <updated>2024-07-06T09:31:58.626Z</updated>
    
    <content type="html"><![CDATA[<p>Having consistently formatted code is essential for maintainability and readability. Without Auto-formatting tools, the codebase can lack consistency. This can result in excessive time spent on code reviews nitpicking coding standards, diverting attention from critical aspects such as functionality.</p><p>As developers, we all know it is a tedious task. Fortunately, some tools can automate the formatting of dotnet code, such as  <code>dotnet-format</code>  and  <code>csharpier.</code>  These tools provide a range of features, including indenting, line breaks, and code alignment.</p><p>This article will explore two auto-formatting tools in dotnet space:  <a class="link"   href="https://github.com/dotnet/format" >Dotnet-format <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  and  <a class="link"   href="https://csharpier.com/" >CSharpier <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  — and highlight their differences and optimal use cases.</p><h2 id="DotNet-format"><a href="#DotNet-format" class="headerlink" title="DotNet format"></a>DotNet format</h2><p>dotnet-format is a code formatter for dotnet that applies style preferences to a project or solution. Before .Net 6, we needed to install the standalone  <a class="link"   href="https://github.com/dotnet/format" >DotNet Format <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  tool.</p><p><code>dotnet tool install -g dotnet-format</code></p><p>However, now, this tool comes with the .NET 6 SDK, eliminating the need for installation.</p><p><strong>EditorConfig</strong></p><p>EditorConfig is an open-source file format. It provides a standard way to define coding styles for different file types in a project, such as indentation, line endings, and whitespace. EditorConfig files are stored in the project directory and can be easily shared among team members to enforce consistent code formatting. Many popular code editors and IDEs, including Visual Studio and VS Code, support the EditorConfig format.</p><p>dotnet-format will read preferences from a  <code>.editorconfig</code> file. A default set of preferences will be used if the file doesn’t exist.</p><h2 id="Setup-and-Use-DotNet-Format"><a href="#Setup-and-Use-DotNet-Format" class="headerlink" title="Setup and Use DotNet Format"></a>Setup and Use DotNet Format</h2><p>To set up dotnet-format, the first step is to add a  <code>editorconfig</code> file. In the root of your dotnet project, you can create this file and add the following content:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// top-most EditorConfig file  </span><br><span class="line">root = true  </span><br><span class="line">[*]  </span><br><span class="line">insert_final_newline = true  </span><br><span class="line">indent_style = space  </span><br><span class="line">indent_size = 2  </span><br><span class="line">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure></div><p>It is worth noting that the rules in the root .editorConfig file will be applied to all projects within the solution. You can also add a .editorConfig file to an individual project, which will only be effective within the project.</p><p>Now if you run the following command, the tool will format all the dotnet files in the solution.</p><p><code>dotnet format</code></p><p>There are a number of arguments available with the command</p><p><code>dotnet format whitespace // format the whitespace only  </code><br><code>dotnet format --verify-no-changes // dry-run without actually change the file  </code><br><code>dotnet format --include [list of files with relative path] // format a list of files</code></p><p>The code style options available for  <code>dotnet-format</code>  are more than just spaces&#x2F;new lines&#x2F;indentation; you can add  <a class="link"   href="https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/language-rules" >Language rules <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>,  <a class="link"   href="https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules" >naming rules <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, and  <a class="link"   href="https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0055" >Formatting rules <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>You can also integrate the tool into your CI pipeline to enforce the code-style rules for all commits.</p><h2 id="CSharpier"><a href="#CSharpier" class="headerlink" title="CSharpier"></a>CSharpier</h2><p><a class="link"   href="https://csharpier.com/" >CSharpier <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  is an opinionated code formatter for c#. It uses Roslyn to parse your code and re-print it with its rules.</p><p>To install CSharpier</p><p><code>dotnet tool install csharpier -g</code></p><p>After installation, we need to configure CSharpier to customize the code style. You can do this by creating a file called  <code>.csharpierrc.json</code>  in the project’s root directory. Here is an example :</p><p><code>&#123;     &quot;indent&quot;: 2,     &quot;useTabs&quot;: false,     &quot;maxLineLength&quot;: 80,     &quot;braceStyle&quot;: &quot;1tbs&quot;,     &quot;spacesBeforeConditional&quot;: true,     &quot;spacesAroundLambdaArrow&quot;: &quot;before&quot;,     &quot;spacesInsideParentheses&quot;: false,     &quot;spacesInsideSquareBrackets&quot;: false   &#125;</code></p><p>Now, you can use CSharpier to format your code. To do this, run the following command in the terminal:</p><p>dotnet csharpier .  &#x2F;&#x2F; format the contents of a directory and its children</p><p>or you can choose to format a particular file or directory</p><p>dotnet csharpier &#x2F;path&#x2F;to&#x2F;your&#x2F;code.cs</p><p>CSharpier is remarkably straightforward to set up and use. However, the options with this tool are quite limited. It is intentional in accordance with the <a class="link"   href="https://prettier.io/docs/en/option-philosophy.html" >Option Philosophy. <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>it is worth noting that I am impressed with CSharpier’s performance in my testing.</p><h2 id="Integration-with-pre-recommit-hook"><a href="#Integration-with-pre-recommit-hook" class="headerlink" title="Integration with pre-recommit hook"></a>Integration with pre-recommit hook</h2><p>Integration of the auto-formatting tool with a pre-commit hook can ensure that all commits adhere to the predefined rules. We can use  <code>Husky</code>  and  <code>lint-staged</code>  to achieve that.</p><p>Husky is a tool that can define Git hooks as npm scripts in your  <code>package.json</code>  file. Git hooks are scripts that run automatically when certain events occur, such as committing or pushing code.</p><p><code>lint-staged</code>  allows you to run linters against files that are staged for commit. This can help to catch issues before they are committed to the repository.</p><p>Firstly, let’s install the required tools.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev husky lint-staged  </span><br><span class="line"></span><br><span class="line">// add a package.json file   </span><br><span class="line">npm init --yes</span><br><span class="line"></span><br><span class="line">Add the following elements to the newly created package.json file.</span><br><span class="line"></span><br><span class="line">// Add the following script command   </span><br><span class="line">&quot;scripts&quot;: &#123;  </span><br><span class="line">  &quot;pre-commit&quot;: &quot;npx lint-staged -r&quot;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">// if using dotnet format  </span><br><span class="line">    &quot;lint-staged&quot;: &#123;  </span><br><span class="line">        &quot;*.cs&quot;: &quot;dotnet format --verify-no-changes --include&quot;  </span><br><span class="line">    &#125;,  </span><br><span class="line">// if using csharpier  </span><br><span class="line">    &quot;lint-staged&quot;: &#123;  </span><br><span class="line">        &quot;*.cs&quot;: &quot;dotnet csharpier&quot;  </span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div><p>Then we can set up Husky.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky-init &amp;&amp; npm install</span><br></pre></td></tr></table></figure></div><p>Running the above command will create a new file  <code>.husky/pre-commit</code> which is the pre-commit hook. Open the file, and replace the last line from  <code>npm test</code>  to  <code>npm run pre-commit.</code>  Add the following into <code>package.json.</code></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;husky&quot;: &#123;  </span><br><span class="line">       &quot;hooks&quot;: &#123;  </span><br><span class="line">           &quot;pre-commit&quot;: &quot;npx lint-staged -r&quot;  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><p>Now, we have completed the integration of Husky&#x2F;lint-staged with the auto-formatting tool. In other words, when we try to push a commit,  <code>husky</code>  will run the  <code>lint-staged</code>  script. If any formatting error is detected, the push will fail.</p><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><p>CSharpier and dotnet-format are great tools to format .NET code, but they have some key differences. Here are a few:</p><ul><li>CSharpier is a third-party tool that Microsoft does not officially support, whereas dotnet-format is an official tool included in the .NET 6 SDK above.</li><li>CSharpier is more opinionated than dotnet-format, meaning it has more specific options built-in on how code should be formatted. Depending on your needs, this can be a strength and a weakness.</li><li>dotnet-format is more configurable than Csharpier; it allows you to choose from a wide range of settings to suit your preferences.</li><li>dotnet-format depends on MSBuild to load the .Net projects; it may not be able to work on some of the older versions of projects, i.e., the Xamarin project. CSharpier doesn’t have this limitation.</li></ul><p>Both tools can format code for .Net solutions. dotnet-format is more configurable, and CSharpier has limited options. However, CSharpier is faster and doesn’t depend on MSBuild.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Both CSharpier and dotnet-format are capable tools for formatting .NET code, and the choice between them will depend on your specific needs and preferences.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Having consistently formatted code is essential for maintainability and readability. Without Auto-formatting tools, the codebase can lack</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    <category term="Programming" scheme="http://coffeethinkcode.com/categories/Web-Development/Programming/"/>
    
    
    <category term="Dotnet" scheme="http://coffeethinkcode.com/tags/Dotnet/"/>
    
    <category term="CSharpier" scheme="http://coffeethinkcode.com/tags/CSharpier/"/>
    
    <category term="formatting" scheme="http://coffeethinkcode.com/tags/formatting/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Recursive Type Aliases Explained</title>
    <link href="http://coffeethinkcode.com/2023/05/01/typescript-recursitve-type-aliases-explained/"/>
    <id>http://coffeethinkcode.com/2023/05/01/typescript-recursitve-type-aliases-explained/</id>
    <published>2023-04-30T14:00:00.000Z</published>
    <updated>2024-07-07T04:16:22.224Z</updated>
    
    <content type="html"><![CDATA[<h4 id="A-Deep-Dive-into-TypeScript-Recursive-Type-Aliases"><a href="#A-Deep-Dive-into-TypeScript-Recursive-Type-Aliases" class="headerlink" title="A Deep Dive into TypeScript Recursive Type Aliases"></a>A Deep Dive into TypeScript Recursive Type Aliases</h4><p>Before TypeScript 3.7, a recursive type reference will cause the TypeScript compiler to throw a circular references error message. Developers must make a workaround (i.e., using an interface) to achieve a recursive reference.</p><p>The recursive type has been introduced since TypeScript 3.7. It allows the reference to the type from its own definition by  <a class="link"   href="https://github.com/microsoft/TypeScript/pull/33050" >deferring the type reference until the instantiating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>As recursion is a common programming pattern, there are many use cases in which a recursive type is very useful. Using recursive type, we can concisely represent a complex data structure.</p><p>In this article, I will explore how to use recursive type aliases in TypeScript.</p><h3 id="Use-recursive-type-to-represent-a-data-structure"><a href="#Use-recursive-type-to-represent-a-data-structure" class="headerlink" title="Use recursive type to represent a data structure."></a>Use recursive type to represent a data structure.</h3><p>The recursive type can be used to represent a data type that has a nested structure. Below is an example:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myData = &#123;  </span><br><span class="line">    <span class="attr">top</span>: <span class="number">1</span>,  </span><br><span class="line">    <span class="attr">rest</span>: &#123;  </span><br><span class="line">        <span class="attr">top</span>: <span class="number">2</span>,  </span><br><span class="line">        <span class="attr">rest</span>: &#123;  </span><br><span class="line">            <span class="attr">top</span>: <span class="number">3</span>,  </span><br><span class="line">            <span class="attr">rest</span>: <span class="literal">null</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>This data type can be abstracted as a  <a class="link"   href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)" >stack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  data type.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Stack</span>&lt;T&gt; = &#123;  </span><br><span class="line">  <span class="attr">top</span>: T;  </span><br><span class="line">  <span class="attr">rest</span>: <span class="title class_">Stack</span>&lt;T&gt; | <span class="literal">null</span>;  </span><br><span class="line">&#125; ;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// Then we can strong typed the data  </span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">myData</span>: <span class="title class_">Stack</span>&lt;<span class="built_in">number</span>&gt; = &#123;  </span><br><span class="line">    <span class="attr">top</span>: <span class="number">1</span>,  </span><br><span class="line">    <span class="attr">rest</span>: &#123;  </span><br><span class="line">        <span class="attr">top</span>: <span class="number">2</span>,  </span><br><span class="line">        <span class="attr">rest</span>: &#123;  </span><br><span class="line">            <span class="attr">top</span>: <span class="number">3</span>,  </span><br><span class="line">            <span class="attr">rest</span>: <span class="literal">null</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>The above code defines a generic data type  <code>Stack</code>. It is composed of a  <code>top</code>  property of type  <code>T</code>, and a  <code>rest</code>  property that is of the same  <code>Stack</code>  type inside the type definition.</p><p>Another good example is the JSON data type. In the recursive type TypeScript playground example, the following code snippet is used to define a JSON type:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Json</span> = <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span> | <span class="literal">null</span> | <span class="title class_">Json</span>[] | &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="title class_">Json</span> &#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> <span class="attr">exampleStatusJSON</span>: <span class="title class_">Json</span> = &#123;  </span><br><span class="line">  <span class="attr">available</span>: <span class="literal">true</span>,  </span><br><span class="line">  <span class="attr">username</span>: <span class="string">&quot;Jean-loup&quot;</span>,  </span><br><span class="line">  <span class="attr">room</span>: &#123;  </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Highcrest&quot;</span>,  </span><br><span class="line">    <span class="comment">// Cannot add functions into the Json type  </span></span><br><span class="line">    <span class="comment">// update: () =&gt; &#123;&#125;  </span></span><br><span class="line">  &#125;,  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>The  <code>Json</code>  type works just like our previous  <code>Stack</code>  type, and we are using the  <code>Json</code>  type alias to represent the nested JSON child nodes.</p><p>As shown in the above examples, using recursive type makes the type definition cleaner and more readable, as the type definition matches the recursive nature of a data structure.</p><h3 id="Limitation-of-Recursive-Type"><a href="#Limitation-of-Recursive-Type" class="headerlink" title="Limitation of Recursive Type"></a>Limitation of Recursive Type</h3><p>The recursive type aliases in TypeScript have the limitation of not allowing immediate “self-instantiation”. Below is an example:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Stack</span>&lt;T&gt; = &#123;  </span><br><span class="line">  <span class="attr">top</span>: T;  </span><br><span class="line">  <span class="attr">rest</span>: <span class="title class_">Stack</span>&lt;T&gt; | <span class="literal">null</span>;  </span><br><span class="line">&#125; ;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Stack1</span> = <span class="title class_">Stack</span>&lt;<span class="title class_">Stack1</span>&gt;;</span><br></pre></td></tr></table></figure></div><p>In this case, the TypeScript compiler throws an error: “_Type alias ‘Stack1’ circularly references itself. (2456)_”. The restriction is reasonable, as the immediate self-reference in the above example will cause infinity recursion in compile time.</p><h3 id="Advanced-Usage"><a href="#Advanced-Usage" class="headerlink" title="Advanced Usage"></a>Advanced Usage</h3><p>We can achieve some complex type operations by combining recursive type aliases with other advanced type features (i.e., Conditional Type).</p><p>Let’s say we have a  <code>Client</code>  Type that represents client data.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Client</span> = &#123;  </span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>,  </span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,  </span><br><span class="line">  <span class="attr">address</span>: &#123;  </span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span>,  </span><br><span class="line">    <span class="attr">suburb</span>: &#123;  </span><br><span class="line">      <span class="attr">postCode</span>: <span class="built_in">number</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>We aim to define a  <code>PropertyType</code>  property type that can extract from the nested type structure.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> postCode = <span class="title class_">PropertyType</span>&lt;<span class="title class_">Client</span>, <span class="string">&#x27;address.suburb.postCode&#x27;</span>&gt;;  </span><br><span class="line"><span class="comment">// the postCode type returns &quot;number&quot;   </span></span><br><span class="line"><span class="keyword">type</span> noExist = <span class="title class_">PropertyType</span>&lt;<span class="title class_">Client</span>, <span class="string">&#x27;address.suburb.noExist&#x27;</span>&gt;;  </span><br><span class="line"><span class="comment">// return &quot;never&quot; because the path does not exist</span></span><br></pre></td></tr></table></figure></div><p>The type should be able to take two arguments, a generic type argument, and a property path string, to locate the property. If the property path doesn’t exist, then return the<code>never</code>  type.</p><p>Recursive type aliases fit this situation well, enabling us to traverse through the object type structure.</p><p>Below is the implementation of the  <code>PropertyType</code></p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PropertyType</span>&lt;T, <span class="title class_">Path</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; =  </span><br><span class="line">    <span class="title class_">Path</span> <span class="keyword">extends</span> keyof T ? T[<span class="title class_">Path</span>] :  </span><br><span class="line">        <span class="title class_">Path</span> <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer K&#125;</span>.<span class="subst">$&#123;infer R&#125;</span>`</span> ? K <span class="keyword">extends</span> keyof T ? <span class="title class_">PropertyType</span>&lt;T[K], R&gt; :   </span><br><span class="line">        <span class="built_in">never</span> :  </span><br><span class="line">    <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure></div><p>Although the type is just a one-liner, it makes use of a few advanced type features on top of recursive type aliases:</p><ul><li>Generics</li><li><a class="link"   href="https://javascript.plainenglish.io/typescript-infer-keyword-explained-76f4a7208cb0" >Infer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>Conditional Types</li><li><a class="link"   href="https://blog.logrocket.com/how-to-use-keyof-operator-typescript/" >keyof operator <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><p>The first part of the conditional type checks whether the path is a key of type T, if it is, then the type is set to be the key value:  <code>T[Path]</code>.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Path</span> <span class="keyword">extends</span> keyof T ? T[<span class="title class_">Path</span>]</span><br></pre></td></tr></table></figure></div><p>Then,  <code>infer</code>  operator is used in the second part of the conditional type check to extract  <code>K</code>  and  <code>R</code>  out. Here, a pattern  <code>$&#123;...&#125;.$&#123;...&#125;</code>  is used to match the string with  <code>.</code> exists.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Path</span> <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer K&#125;</span>.<span class="subst">$&#123;infer R&#125;</span>`</span> ? K <span class="keyword">extends</span> keyof T ? <span class="title class_">PropertyType</span>&lt;T[K], R&gt;</span><br></pre></td></tr></table></figure></div><p>When all conditions match, we make a recursive call to the next level property  <code>PropertyType&lt;T[K], R&gt;</code>. Otherwise, it means the Path doesn’t exist, and a  <code>never</code>  type will be returned.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>In this article, we examine a few recursive type aliases. Recursive type alias can represent a data structure with a recursion nature, and we can also use it to traverse or manipulate complex data types.</p><p>I hope this article can be useful to you. Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;A-Deep-Dive-into-TypeScript-Recursive-Type-Aliases&quot;&gt;&lt;a href=&quot;#A-Deep-Dive-into-TypeScript-Recursive-Type-Aliases&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="Programming" scheme="http://coffeethinkcode.com/categories/Programming/"/>
    
    
    <category term="TypeScript" scheme="http://coffeethinkcode.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Types vs. interfaces in TypeScript</title>
    <link href="http://coffeethinkcode.com/2023/04/06/type-interface-ts/"/>
    <id>http://coffeethinkcode.com/2023/04/06/type-interface-ts/</id>
    <published>2023-04-05T14:00:00.000Z</published>
    <updated>2024-07-07T04:18:17.315Z</updated>
    
    <content type="html"><![CDATA[<h1>Types vs. interfaces in TypeScript</h1><p>We have two options for defining types in TypeScript: types and interfaces. One of the most frequently asked questions about TypeScript is whether we should use interfaces or types. </p><p>The answer to this question, like many programming questions, is that it depends. There are cases where one has a clear advantage over the other, but in many cases they are interchangeable.</p><p>In this article, I will discuss the key differences and similarities between types and interfaces and explore when it is appropriate to use each one.</p><p>Let’s start with the basics of types and interfaces.</p><h2>Types and type aliases</h2><p><code>type</code> is a keyword in TypeScript that we can use to define the shape of data. The basic types in TypeScript include:</p><ul><li>String</li><li>Boolean</li><li>Number</li><li>Array</li><li><a class="link"   href="https://blog.logrocket.com/use-cases-named-tuples-typescript/" >Tuple <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://blog.logrocket.com/typescript-string-enums-guide/" >Enum <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>Advanced types</li></ul><p>Each of these comes with its unique features and purposes, allowing developers to choose the appropriate one for their particular use case.</p><p>Type aliases in TypeScript mean “a name for any type.” They provide a way of creating new names for existing types. Type aliases don’t define new types; instead, they simply provide an alternative name for an existing type. </p><p>Type aliases can be created using the <code>type</code> keyword, and can refer to any valid TypeScript type, including primitive types.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyNumber</span> = <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In the above example, we create two type aliases: <code>MyNumber</code> and <code>User</code>. We can use <code>MyNumber</code> as shorthand for a number type, and use <code>User type aliases</code> to represent the type definition of a user.</p><p>When we say “types versus interfaces,” what we are actually referring to is “type <em>aliases</em> versus interfaces”. For example, you can create the following aliases:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ErrorCode</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Answer</span> = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure></div><p>The two type aliases above represent alternative names for the same union type: <code>string | number</code>. While the underlying type is the same, the different names express different intents, which makes the code more readable.</p><h2>Interfaces in TypeScript</h2><p>In TypeScript, an interface defines a contract that an object must adhere to. Below is an example:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Client</span> &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>; </span><br><span class="line">    <span class="attr">address</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>We can express the same <code>Client</code> contract definition using type annotations:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Client</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">address</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h2>Differences between types and interfaces</h2><p>For the above case, you can use either <code>type</code> or <code>interface</code>. But there are some scenarios in which using <code>type</code> instead of <code>interface</code> makes a difference.</p><h3>Declaration merging</h3><p><a class="link"   href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html" >Declaration merging <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> is a feature that is exclusive to interfaces. With declaration merging, we can define an interface multiple times and the TypeScript compiler will automatically merge these definitions into a single interface definition.</p><p>In the following example, the two <code>Client</code> interface definitions are merged into one by the TypeScript compiler, and we have two properties when using the <code>Client</code> interface:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Client</span> &#123; </span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">harry</span>: <span class="title class_">Client</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Harry&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">41</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Type aliases can’t be merged in the same way. If you try to define the <code>Client</code> type more than once, as in the above example, an error will be thrown:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.logrocket.com/wp-content/uploads/2023/03/define-type-more-than-once-error.png"                      alt="alt_text" title="image_tooltip"                ></p><p>When used in the right places, declaration merging can be very useful. One common use case for declaration merging is to extend a third-party library’s type definition in order to fit the needs of a particular project.</p><p>If you find yourself needing to merge declarations, interfaces are the way to go.</p><h3>`Extends` vs. intersection</h3><p>An interface can extend one or multiple interfaces. By using the <code>extends</code> keyword, a new interface can inherit all the properties and methods of an existing interface, while also adding new properties.</p><p>For example, we can create a <code>VIPClient</code> interface by extending the <code>Client</code> interface:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">VIPClient</span> <span class="keyword">extends</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="attr">benefits</span>: <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>To achieve a similar result for types, we need to use an intersection operator:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">VIPClient</span> = <span class="title class_">Client</span> &amp; &#123;<span class="attr">benefits</span>: <span class="built_in">string</span>[]&#125;; <span class="comment">// Client is a type</span></span><br></pre></td></tr></table></figure></div><p>You can also extend an interface from a type alias with statically known members:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Client</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">VIPClient</span> <span class="keyword">extends</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="attr">benefits</span>: <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>The exception is union types. Union types allow us to describe values that can be one of several types and create unions of various primitive types, literal types, or complex types. </p><p>There is no equivalent to a union type in an interface. If you try to extend an interface from a union type, you’ll receive the following error:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Jobs</span> = <span class="string">&#x27;salary worker&#x27;</span> | <span class="string">&#x27;retired&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MoreJobs</span> <span class="keyword">extends</span> <span class="title class_">Jobs</span> &#123;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.logrocket.com/wp-content/uploads/2023/03/union-type-not-statically-known-error.png"                      alt="alt_text" title="image_tooltip"                ></p><p>This error occurs because the union type is not statically known. The interface definition needs to be statically known at compile time.</p><p>Type aliases can extend interfaces using the intersection, as below:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Type</span> <span class="title class_">VIPClient</span> = <span class="title class_">Client</span> &amp; &#123; <span class="attr">benefits</span>: <span class="built_in">string</span>[]&#125;;</span><br></pre></td></tr></table></figure></div><p>In a nutshell, both interfaces and type aliases can be extended. An interface can extend a statically known type alias, while a type alias can extend an interface using an intersection operator.</p><h3>Handling conflicts when extending</h3><p>Another difference between types and interfaces is how conflicts are handled when you try to extend from one with the same property name. </p><p>When extending interfaces, the same property key isn’t allowed, as in the example below:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">getPermission</span>: <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Staff</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="attr">getPermission</span>: <span class="function">() =&gt;</span> <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>An error is thrown because a conflict is detected.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.logrocket.com/wp-content/uploads/2023/03/conflict-detected-error-thrown.png"                      alt="alt_text" title="image_tooltip"                ></p><p>Type aliases handle conflicts differently. In the case of a type alias extending another type with the same property key, it will automatically merge all properties instead of throwing errors.</p><p>In the following example, the intersection operator merges the method signature of the two <code>getPermission</code> declarations, and a <code><a class="link"   href="https://blog.logrocket.com/how-to-use-keyof-operator-typescript/" >typeof operator <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></code> is used to narrow down the union type parameter, so we can get the return value in a type-safe way:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">getPermission</span>: <span class="function">(<span class="params">id: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Staff</span> = <span class="title class_">Person</span> &amp; &#123;</span><br><span class="line">   <span class="attr">getPermission</span>: <span class="function">(<span class="params">id: <span class="built_in">string</span>[]</span>) =&gt;</span> <span class="built_in">string</span>[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AdminStaff</span>: <span class="title class_">Staff</span> = &#123;</span><br><span class="line">  <span class="attr">getPermission</span>: <span class="function">(<span class="params">id: <span class="built_in">string</span> | <span class="built_in">string</span>[]</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span> id === <span class="string">&#x27;string&#x27;</span>?  <span class="string">&#x27;admin&#x27;</span> : [<span class="string">&#x27;admin&#x27;</span>]) <span class="keyword">as</span> <span class="built_in">string</span>[] &amp; <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>It is important to note that the type intersection of two properties may produce unexpected results. In the example below, the <code>name</code> property for the extended type <code>Staff</code> becomes <code>never</code>, since it can’t be both <code>string</code> and <code>number</code> at the same time:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Staff</span> = person &amp; &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">number</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// error: Type &#x27;string&#x27; is not assignable to type &#x27;never&#x27;.(2322)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Harry</span>: <span class="title class_">Staff</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;Harry&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure></div><p>In summary, interfaces will detect property or method name conflicts at compile time and generate an error, whereas type intersections will merge the properties or methods without throwing errors. Therefore, if we need to overload functions, type aliases should be used.</p><h3>Implementing classes using interfaces or type aliases</h3><p>In TypeScript, we can implement a class using either an interface or a type alias:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">greet</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Pet</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>As shown above, both interfaces and type aliases can be used to implement a class similarly; the only difference is that we can’t implement a union type.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> primaryKey = &#123; <span class="attr">key</span>: <span class="built_in">number</span>; &#125; | &#123; <span class="attr">key</span>: <span class="built_in">string</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// can not implement a union type</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealKey</span> <span class="keyword">implements</span> primaryKey &#123;</span><br><span class="line">  key = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.logrocket.com/wp-content/uploads/2023/03/class-represents-specific-data-shape-error.png"                      alt="alt_text" title="image_tooltip"                ></p><p>In the above example, the TypeScript compiler throws an error because a class represents a specific data shape, but a union type can be one of several data types.</p><h3>Working with Tuple types</h3><p>In TypeScript, Tuple type allows us to express an array with a fixed number of elements, where each element has its own data type. It can be useful when you need to work with arrays of data with a fixed structure:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TeamMember</span> = [<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">role</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>];</span><br></pre></td></tr></table></figure></div><p>Interfaces don’t have direct support for tuple types. Although we can create some workarounds like in the example below, it is not as concise or readable as using the tuple type:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ITeamMember</span> <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; </span><br><span class="line">&#123;</span><br><span class="line"> <span class="number">0</span>: <span class="built_in">string</span>; <span class="number">1</span>: <span class="built_in">string</span>; <span class="number">2</span>: <span class="built_in">number</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">peter</span>: <span class="title class_">ITeamMember</span> = [<span class="string">&#x27;Harry&#x27;</span>, <span class="string">&#x27;Dev&#x27;</span>, <span class="number">24</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Tom</span>: <span class="title class_">ITeamMember</span> = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;Manager&#x27;</span>]; <span class="comment">//Error: Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br></pre></td></tr></table></figure></div><h2>Advanced type features</h2><p>TypeScript provides a wide range of advanced type features that can’t be found in interfaces. Some of the unique features in TypeScript include:</p><ul><li>Type inferences: Can infer the type of variables and functions based on their usage. This reduces the amount of code and improves readability</li><li>Conditional types: Allow us to create complex type expressions with conditional behaviors that depend on other types</li><li><a class="link"   href="https://blog.logrocket.com/how-to-use-type-guards-typescript/" >Type guards <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>: Used to write sophisticated control flow based on the type of a variable</li><li>Mapped types: Transforms an existing object type into a new type</li><li>Utility types: A set of out-of-the-box utilities that help to manipulate types</li></ul><p>TypeScript’s typing system is constantly evolving with every new release, making it a complex and powerful toolbox. The impressive typing system is one of the main reasons why many developers prefer to use TypeScript.</p><h2>When to use types vs. interfaces</h2><p>Type aliases and interfaces are very similar, but have some subtle differences, as shown in the previous section.</p><p>While almost all interface features are available in types or have equivalents, there is one exception: declaration merging. In general, interfaces should be used in scenarios where declaration merging is necessary, such as extending an existing library or authoring a new library. Additionally, if you prefer the object-oriented inheritance style, using the <code>extends</code> keyword with an interface is often more readable than using the intersection with type aliases.</p><p>However, many of the features in types are difficult or impossible to achieve with interfaces. For example, TypeScript provides a rich set of features like conditional types, generic types, type guards, advanced types, and more. You can use them to build a well-constrained type system to make your app strongly typed. This can’t be achieved by the interface.</p><p>In many cases, they can be used interchangeably depending on personal preference. But, we should use type aliases in the following use cases:</p><ul><li>To create a new name for a primitive type</li><li>To define a union type, tuple type, function type, or another more complex type</li><li>To overload functions</li><li>To use mapped types, conditional types, type guard, or other advanced type features</li></ul><p>Compared with interfaces, types are more expressive. There are many advanced type features that are not available in interfaces, and those features continue to grow as TypeScript evolves.</p><p>In addition, many developers prefer to use types because they are a good match with the <a class="link"   href="https://en.wikipedia.org/wiki/Functional_programming" >functional programming paradigm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. The rich type expression makes it easier to achieve functional composition, immutability, and other functional programming capabilities in a type-safe manner.</p><h1>Summary</h1><p>In this article, we discussed type aliases and interfaces, as well as their differences. While there are some scenarios in which one is preferred over the other, in most cases, the choice between them boils down to personal preference.</p><p>I lean towards using types, simply because of the amazing type system. What are your preferences? You are welcome to share your opinions in the comments section below.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Types vs. interfaces in TypeScript&lt;/h1&gt;


&lt;p&gt;We have two options for defining types in TypeScript: types and interfaces. One of the most</summary>
      
    
    
    
    <category term="Programming" scheme="http://coffeethinkcode.com/categories/Programming/"/>
    
    
    <category term="TypeScript" scheme="http://coffeethinkcode.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>All You Need to Know About Angular Proxy Configuration</title>
    <link href="http://coffeethinkcode.com/2023/03/05/all-you-need-to-know-about-angular-proxy-configuration/"/>
    <id>http://coffeethinkcode.com/2023/03/05/all-you-need-to-know-about-angular-proxy-configuration/</id>
    <published>2023-03-05T01:14:56.000Z</published>
    <updated>2024-07-07T04:23:21.946Z</updated>
    
    <content type="html"><![CDATA[<h3>A complete guide on setting up a proxy in Angular for API calls behind a corporate proxy or with windows authentication</h3>Angular Developers use Angular CLI for local development. One of the most common needs is to set up a proxy in the local dev environment to avoid CORS error when the Angular app sends an HTTP request to an API residing on a different domain. Angular CLI makes the process relatively easy but can be tricky in some edge cases.<p>In this article, I am going to discuss how to set up a dev server proxy for</p><ul><li><a class="link"   href="https://medium.com/javascript-in-plain-english/all-you-need-to-know-about-angular-proxy-configuration-a1aeb2d8c86#e0ed" >proxy to API in localhost <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://medium.com/javascript-in-plain-english/all-you-need-to-know-about-angular-proxy-configuration-a1aeb2d8c86#d919" >proxy to external API within a corporate network <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://medium.com/javascript-in-plain-english/all-you-need-to-know-about-angular-proxy-configuration-a1aeb2d8c86#2e9b" >proxy to API using Windows authentication (IIS) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>m<a class="link"   href="https://medium.com/javascript-in-plain-english/all-you-need-to-know-about-angular-proxy-configuration-a1aeb2d8c86#55ad" >ultiple schemes in one WWW-Authenticate header <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><h3 id="Setup-a-proxy-to-connect-to-API-in-localhost"><a href="#Setup-a-proxy-to-connect-to-API-in-localhost" class="headerlink" title="Setup a proxy to connect to API in localhost"></a>Setup a proxy to connect to API in localhost</h3><p>We can start the local dev server using the command below with Angular CLI.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure></div><p>The command invokes the internal dev server based on  <a class="link"   href="https://webpack.js.org/configuration/dev-server/" >webpack dev server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. By default, the dev server runs on  <code>[http://localhost:4200](http://localhost:4200./)</code><a href="http://localhost:4200./">.</a></p><p>When the Angular app needs to call its backend API, which is also hosted locally at  <code>[http://localhost:3000](http://localhost:3000./),</code> then we will encounter a CORS error because the HTTP call uses a different origin (<code>localhost:3000</code>).</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.http.get(&#x27;http://locahost:3000/api/&#x27;)  </span><br><span class="line">    .subscribe(res =&gt; &#123;...&#125;);</span><br></pre></td></tr></table></figure></div><p>The CORS issue can be resolved by configuring the Angular dev server proxy. A sample proxy config can be created below</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// proxy.conf.json  </span><br><span class="line">&#123;  </span><br><span class="line">  &quot;/api&quot;: &#123; &quot;target&quot;: &quot;http://localhost:3000&quot;, &quot;secure&quot;: false,  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">// we change the angular http call to remove the domain prefix  </span><br><span class="line">this.http.get(&#x27;/api/&#x27;)  </span><br><span class="line">    .subscribe(res =&gt; &#123;...&#125;);</span><br></pre></td></tr></table></figure></div><p>As illustrated by the following diagram, the proxy sits between the Angular app and the backend API and translates the “<code>api/v1</code>” calls to backend API. The CORS error doesn’t happen because the call to API is the same origin (<code>[localhost:4200](http://localhost:4200./)/api</code><strong>)</strong>  now.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*_2jpbQ3XXY-FzQ3Nq-8DSQ.png"                                     ></p><p>To make the proxy configuration take effect, it must be passed into the  <code>ng serve</code>  command.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ng serve --proxy-config proxy.conf.json</span><br><span class="line"></span><br><span class="line">Or we can add it to the  `angular.json`  configuration</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&quot;serve&quot;: &#123;  </span><br><span class="line">  ...  </span><br><span class="line">  &quot;options&quot;: &#123;  </span><br><span class="line">    ...  </span><br><span class="line">    &quot;proxyConfig&quot;: &quot;proxy.conf.json&quot;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Connect-to-external-API-behind-corporate-Proxy"><a href="#Connect-to-external-API-behind-corporate-Proxy" class="headerlink" title="Connect to external API behind corporate Proxy"></a>Connect to external API behind corporate Proxy</h3><p>Often, we worked within a corporate network, and the Angular app in a local dev environment also needed to connect to an external API. Using the previous example, we might need to call  <a class="link"   href="http://abc.company.com/api." >http://abc.company.com/api <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  in the Angular app instead of calling  <a href="http://localhost:3000,/">http://localhost:3000/api</a>.</p><p>Accessing an external API behind a corporate proxy requires  <code>HTTP_PROXY</code>  and  <code>HTTPS_PROXY</code>  environment variables to be configured. If the proxy utilizes an SSL certificate, the  <code>secure</code>  flag must be false to bypass the certificate verification.</p><p>To handle corporate proxy, we need to create a  <code>proxy.conf.js</code>  as below.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const HttpsProxyAgent = require(&#x27;https-proxy-agent&#x27;);  </span><br><span class="line">  </span><br><span class="line">const proxyConfig = [  </span><br><span class="line">  &#123;  </span><br><span class="line">    context: &#x27;/api&#x27;,  </span><br><span class="line">    pathRewrite: &#123; &#x27;^/api&#x27;: &#x27;&#x27; &#125;,  </span><br><span class="line">    target: &#x27;https://api.abc.com&#x27;,  </span><br><span class="line">    changeOrigin: true,  </span><br><span class="line">    secure: false  </span><br><span class="line">  &#125;  </span><br><span class="line">];  </span><br><span class="line">  </span><br><span class="line">function setupForCorporateProxy(proxyConfig) &#123;  </span><br><span class="line">  const proxyServer = process.env.http_proxy || process.env.HTTP_PROXY;  </span><br><span class="line">  </span><br><span class="line">  if (proxyServer) &#123;  </span><br><span class="line">    const agent = new HttpsProxyAgent(proxyServer);  </span><br><span class="line">    proxyConfig.forEach(c =&gt; &#123;  </span><br><span class="line">      c.agent = agent;  </span><br><span class="line">    &#125;);  </span><br><span class="line">  &#125;  </span><br><span class="line">  return proxyConfig;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">module.exports = setupForCorporateProxy(proxyConfig);</span><br></pre></td></tr></table></figure></div><p>In the above example, we proxy a request like  <code>api/v1/client</code>  to an external server  <code>https://api.abc.com/v1/client</code>. When a corporate proxy is required, we set up an  <a class="link"   href="https://nodejs.org/api/https.html#https_class_https_agent" >HTTPS agent <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  object in the proxy based on  <code>HTTP_PROXY</code>  and  <code>HTTPS_PROXY</code>  environment variables. The  <code>secure:false</code>  option is added to handle the custom SSL certificate in the corporate proxy.</p><p>To use the new js configuration for the Angular app, run the following</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve --proxy-config proxy.conf.js</span><br></pre></td></tr></table></figure></div><p>It is worth noting that there are two types of agents:  <code>HttpsProxyAgent</code>  and  <code>HttpProxyAgent,</code>  it is necessary to choose the appropriate one based on the environment setting.</p><h3 id="Proxy-to-API-using-Windows-authentication-IIS"><a href="#Proxy-to-API-using-Windows-authentication-IIS" class="headerlink" title="Proxy to API using Windows authentication (IIS)"></a>Proxy to API using Windows authentication (IIS)</h3><p>Many companies rely on the Microsoft ecosystem, and Windows authentication is widely used. However, the situation can be tricky if the Angular App connects to an API service hosted with IIS protected by Windows authentication.</p><p>The typical problem is that the call from the Angular app to the API will return 401 when using the proxy setting in the local dev environment.</p><p>For example,  <code>/api/v1/../login</code>  is an Endpoint protected by Windows Authentication, the request to the API from a locally running Angular App receives 401 unauthorized responses. Below is the screenshot of the network tab in Chrome dev tools.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*kewDSVjh_LP_TjNEEitLAA.png"                                     ></p><p>failed request</p><p>The root cause of the issue is that Windows authentication is connection-based, but the Proxy breaks the keep-live connection.</p><p>Under the hood of Windows authentication, it uses either Kerberos or NTLM; either protocol will require a keep-live connection to keep the authentication state.</p><p>When the  <code>/api/v1/../login</code>  is called, the browser tries to establish a connection with the IIS server via NTLM negotiation handshake, which includes three parts. They are the Type-1 message, the Type-2, and the Type-3 message. You can find more details of the NTLM handshake  <a class="link"   href="https://web.archive.org/web/20210126065105/http://www.innovation.ch/personal/ronald/ntlm.html" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. You may already notice two HTTP calls shown for the same request in the above screenshot. They are the first two parts of the handshake.</p><p>Because the request is proxying locally, the three handshake messages were sent in 3 separate requests(sockets) through the proxy. Thus, a keep-live connection can’t be kept in the process, so the last message didn’t occur.</p><p>To fix the issue, We need to configure the proxy to maintain a single connection between the browser and IIS server. The<code>[agentkeepalive](https://github.com/node-modules/agentkeepalive#readme)</code>  package can help us to achieve this goal. The updated proxy configuration is shown below.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const Agent = require(&quot;agentkeepalive&quot;);  </span><br><span class="line">  </span><br><span class="line">const keepaliveAgent = new Agent(&#123;  </span><br><span class="line">    maxSockets: 1,  </span><br><span class="line">    keepAlive: true,  </span><br><span class="line">    maxFreeSockets: 10,  </span><br><span class="line">    keepAliveMsecs: 1000,  </span><br><span class="line">    timeout: 60000,  </span><br><span class="line">    keepAliveTimeout: 30000 // free socket keepalive for 30 seconds  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">const PROXY_CONFIG = [  </span><br><span class="line">    &#123;  </span><br><span class="line">        target: &quot;http://localhost:3000&quot;,  </span><br><span class="line">        context: &quot;/api&quot;,  </span><br><span class="line">        secure: false,  </span><br><span class="line">        changeOrigin: true,  </span><br><span class="line">        loglevel: &quot;debug&quot;,  </span><br><span class="line">        agent: keepaliveAgent  </span><br><span class="line">    &#125;  </span><br><span class="line">];  </span><br><span class="line">module.exports = PROXY_CONFIG;</span><br></pre></td></tr></table></figure></div><p>The updated proxy config set the  <code>maxSockets</code>  to 1,  <code>keepAlive</code>  flag to true and set the timeout to 30 seconds, which is long enough to complete the handshake. This config aims to make  <code>http.Agent</code>  to maintain a keep-live connection between the browser and IIS server via proxy in the authentication process.</p><p>Now, the  <code>/api/v1/../login</code>  API request should work.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*EWspU6LBiNGgJX32wz7yow.png"                                     ></p><p>success request</p><p>The network tab logs above after successful authentication with the new config. We can see the three requests during the handshake, and the last one returns HTTP 200 success status.</p><h3 id="Multiple-schemes-in-one-WWW-Authenticate-header"><a href="#Multiple-schemes-in-one-WWW-Authenticate-header" class="headerlink" title="Multiple schemes in one WWW-Authenticate header"></a>Multiple schemes in one WWW-Authenticate header</h3><p>Another possible cause of the error from Windows authentication is the  <code>www-authenticate</code>  header. According to RFC 7235, it is okay to have multiple authentication schemes in one  <code>www-authenticate</code>  header field, although it can make the field difficult to be parsed.</p><blockquote><p>agents will need to take special care in parsing the WWW-<br>Authenticate or Proxy-Authenticate header field value if it contains<br>more than one challenge, or if more than one WWW-Authenticate header<br>field is provided, since the contents of a challenge may itself<br>contain a comma-separated list of authentication parameters.</p></blockquote><p>The reality is that the browser support is  <a class="link"   href="http://test.greenbytes.de/tech/tc/httpauth/" >questionable <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. Below is an example of the www-authenticate header with two schemes.</p><p><code>WWW-Authenticate: Negotiate, NTLM</code></p><p>Some browsers may not be able to parse the above correctly, and this will break the NTLM handshake process. To resolve this issue, we can utilize the  <code>proxyRes</code>  callback in the  <code>[http-proxy-middleware](https://www.npmjs.com/package/http-proxy-middleware)</code>  as below</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const onProxyRes = function (proxyRes, req, res) &#123;  </span><br><span class="line">     var key = &#x27;www-authenticate&#x27;;  </span><br><span class="line">     proxyRes.headers[key] = proxyRes.headers[key] &amp;&amp; proxyRes.headers[key].split(&#x27;,&#x27;);  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">// add it into the proxy config option  </span><br><span class="line">onProxyRes: onProxyRes</span><br></pre></td></tr></table></figure></div><p>The full proxy configuration looks like below.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const Agent = require(&quot;agentkeepalive&quot;);  </span><br><span class="line">  </span><br><span class="line">const keepaliveAgent = new Agent(&#123;  </span><br><span class="line">    maxSockets: 1,  </span><br><span class="line">    keepAlive: true,  </span><br><span class="line">    maxFreeSockets: 10,  </span><br><span class="line">    keepAliveMsecs: 1000,  </span><br><span class="line">    timeout: 60000,  </span><br><span class="line">    keepAliveTimeout: 30000 // free socket keepalive for 30 seconds  </span><br><span class="line">&#125;);  </span><br><span class="line">const onProxyRes = function (proxyRes, req, res) &#123;  </span><br><span class="line">     var key = &#x27;www-authenticate&#x27;;  </span><br><span class="line">     proxyRes.headers[key] = proxyRes.headers[key] &amp;&amp; proxyRes.headers[key].split(&#x27;,&#x27;);  </span><br><span class="line">&#125;;  </span><br><span class="line">const PROXY_CONFIG = [  </span><br><span class="line">    &#123;  </span><br><span class="line">        target: &quot;http://localhost:3000&quot;,  </span><br><span class="line">        context: &quot;/api&quot;,  </span><br><span class="line">        secure: false,  </span><br><span class="line">        changeOrigin: true,  </span><br><span class="line">        onProxyRes: onProxyRes,  </span><br><span class="line">        agent: keepaliveAgent  </span><br><span class="line">    &#125;  </span><br><span class="line">];  </span><br><span class="line">module.exports = PROXY_CONFIG;</span><br></pre></td></tr></table></figure></div><p>With the new callback added, the multiple schemes in the  <code>www-authenticate</code>  header will be sent in multiple lines, and the NTLM negotiation handshake can continue.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// From the original response header  </span><br><span class="line">www-authenticate: Negotiate, NTLM  </span><br><span class="line">  </span><br><span class="line">// After the onProxRes callback function  </span><br><span class="line">www-authenticate: [&#x27;Negotiate&#x27;, &#x27;NTLM&#x27;]  </span><br><span class="line">  </span><br><span class="line">// It is equivalent to  </span><br><span class="line">&lt; WWW-Authenticate: Negotiate  </span><br><span class="line">&lt; WWW-Authenticate: NTLM  </span><br></pre></td></tr></table></figure></div><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>This article discusses how to avoid CORS issues by setting up a proxy using Angular CLI for local development. I hope it is useful if you’re working on Angular behind a corporate proxy and&#x2F;or using IIS with Windows authentication.</p><p>Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;
A complete guide on setting up a proxy in Angular for API calls behind a corporate proxy or with windows authentication
&lt;/h3&gt;
Angular D</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    
    <category term="TypeScript" scheme="http://coffeethinkcode.com/tags/TypeScript/"/>
    
    <category term="Angular" scheme="http://coffeethinkcode.com/tags/Angular/"/>
    
    <category term="Proxy" scheme="http://coffeethinkcode.com/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Host Your Free Personal Knowledge Base With Trilium Notes</title>
    <link href="http://coffeethinkcode.com/2023/02/12/host-free-personal-knowledge-base/"/>
    <id>http://coffeethinkcode.com/2023/02/12/host-free-personal-knowledge-base/</id>
    <published>2023-02-11T14:00:00.000Z</published>
    <updated>2024-07-09T11:31:51.095Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Complete-Guide-on-Install-and-Configure-Trilium-Notes-App-using-Trilium-Nginx-Docker-and-Oracle-Cloud"><a href="#Complete-Guide-on-Install-and-Configure-Trilium-Notes-App-using-Trilium-Nginx-Docker-and-Oracle-Cloud" class="headerlink" title="Complete Guide on Install and Configure Trilium Notes App using Trilium, Nginx, Docker, and Oracle Cloud"></a>Complete Guide on Install and Configure Trilium Notes App using Trilium, Nginx, Docker, and Oracle Cloud</h3><p><a class="link"   href="https://github.com/zadam/trilium/" >Trilium Notes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  is an open-source note-taking App for building a personal knowledge base. It is a surprisingly powerful tool, including some impressive features like mermaid charts, WYSIWYG note editing, syntax highlighting, full-text search, etc.</p><p>Trilium can be installed on a desktop or on your own server. The most common approach is to use Docker to set up the App on a cloud VM so you can access it from anywhere. There are  <a class="link"   href="https://trilium.cc/paid-hosting" >3rd party paid services to host a Trilium instance for you <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  and some free options.</p><p>In this article, I will walk through the process of hosting it on an  <a class="link"   href="https://medium.com/gitconnected/build-and-host-a-dynamic-web-site-for-only-1-per-month-1aa5aa3a7bd1" >Oracle always free VM instance <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><h2 id="Oracle-forever-free-VM"><a href="#Oracle-forever-free-VM" class="headerlink" title="Oracle forever free VM"></a>Oracle forever free VM</h2><p>Recently, I  <a href="https://coffeethinkcode.com/2023/02/05/install-config-your-own-mysql-on-oracle-free-vm/">migrated a MySQL server to Oracle forever-free VM</a>. The free ARM-based VM has three core CPUs and 18 G memory, and its current CPU and memory utilization is very low, as shown below.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*eEJQG_7fPgT19Y78VASDpQ.png"                      alt="low usage"                ></p><p>Its remaining capability is more than enough to host a Trilium App.</p><p>Let’s do it.</p><h2 id="Install-the-App-using-Docker"><a href="#Install-the-App-using-Docker" class="headerlink" title="Install the App using Docker"></a>Install the App using Docker</h2><p>Firstly, we need to install docker on the Oracle VM. I won’t go through the process in detail, as it is described on the  <a class="link"   href="https://docs.docker.com/engine/install/ubuntu/#prerequisites" >official Docker site <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. Below are the essential commands for the installation.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt install docker-ce  </span><br><span class="line">docker --version # check version  </span><br><span class="line">sudo docker run hello-world # test the installation</span><br></pre></td></tr></table></figure></div><p>Now we can pull the Trilium docker image and run it as below.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull zadam/trilium:0.58.7   </span><br><span class="line">### create a data directory for trilium  </span><br><span class="line">sudo mkdir trilium-data  </span><br><span class="line">  </span><br><span class="line">#run it locally  </span><br><span class="line">sudo docker run -d -t -i -p 127.0.0.1:8080:8080 -v ~/trilium-data:/home/trilium/data zadam/trilium:0.58.7  </span><br><span class="line">  </span><br><span class="line">### test it  </span><br><span class="line">sudo docker ps  </span><br><span class="line">curl 127.0.0.1:8080  </span><br><span class="line">### stop the local run  </span><br><span class="line">sudo docker stop beautiful_bose  </span><br><span class="line">  </span><br><span class="line">### run it and open to any ips  </span><br><span class="line">sudo docker run -d -p 0.0.0.0:8080:8080 -v ~/trilium-data:/home/trilium/data zadam/trilium:0.58.7</span><br></pre></td></tr></table></figure></div><p>In the above commands, the following actions are performed</p><ul><li>The trilium image version 0.58.7 (the latest available at the time of writing) is pulled.</li><li>The data volume is mapped to the  <code>/trilium-data</code>  directory on the host machine</li><li>The Docker port is mapped to port 8080 on the host machine</li><li>Access to the app is allowed from any IP address</li></ul><p>As you can see, it is pretty straightforward to run a trilium app with Docker.</p><p>If you test the new instance from your browser using the URL:<code>[http://[IP](http://[ip/)  address]:8080</code>, the setup screen should be shown.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*ysPZseup_RFopJMaWo8l5Q.png"                      alt="trilium setup page"                ></p><h2 id="Secure-the-App-with-Ngnix-and-SSL-certificate"><a href="#Secure-the-App-with-Ngnix-and-SSL-certificate" class="headerlink" title="Secure the App with Ngnix and SSL certificate."></a>Secure the App with Ngnix and SSL certificate.</h2><p>The next step is to secure the App, make it accessible behind a reverse proxy and install an SSL certificate to protect the communication between the browser and the server.</p><p>Firstly, let’s install the Nginx server.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx # install  </span><br><span class="line">  </span><br><span class="line">sudo service nginx start #start  </span><br><span class="line">  </span><br><span class="line">sudo service nginx status # verify the nginx status</span><br></pre></td></tr></table></figure></div><p>We can verify that the new instance is listening to port 80.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tulpn</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*3apBx-yl0Si1tfymdUSEtg.png"                      alt="Nginx listening port 80"                ></p><p>Once Nginx is installed, a free Let’s Encrypt SSL certificate can be created, and the appropriate configuration can be added to Nginx.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install certbot  </span><br><span class="line">sudo apt-get install python3-certbot-nginx  </span><br><span class="line">  </span><br><span class="line">#request certificate for notes.xxx.com  </span><br><span class="line">sudo certbot --nginx -d [your domain name]</span><br></pre></td></tr></table></figure></div><p>To set up the auto-renew of the certificate:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#setup auto renew certificate  </span><br><span class="line">sudo crontab -e  </span><br><span class="line">### add the following line  </span><br><span class="line"> 0 12 * * * /usr/bin/certbot renew --quiet</span><br></pre></td></tr></table></figure></div><p>If you own a domain name, you can set up a sub domain for your new Trilium app. For example, create an A record for<code>notes.xxx.com</code>, and map it to your VM IP address. This will allow you to access the URL  <code>[https://notes.xxx.com](https://notes.xxx.com/)</code>  in the browser.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*b84IrvdkYohQDO42Emxhrg.png"                      alt="default Nginx"                ></p><p>The final step is to configure the redirect in the Nginx. The Nginx configuration file can typically be found in either  <code>/etc/nginx/nginx.conf</code>  or  <code>/etc/nginx/sites-enabled/default</code>. The default setting is something like the one below.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server_name notes.xxx.com; # managed by Certbot  </span><br><span class="line"> </span><br><span class="line">   location / &#123;  </span><br><span class="line">           # First attempt to serve request as file, then  </span><br><span class="line">           # as directory, then fall back to displaying a 404.  </span><br><span class="line">         try_files $uri $uri/ =404;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div><p>The location section needs to be updated as below, so the request to port 443 will be directed to port 8080 at the VM.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;  </span><br><span class="line">           proxy_pass http://localhost:8080;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p>To make the change effective, we should restart Nginx. Then, you can enjoy the new App instance by accessing  <code>https://notes.xxx.com</code>.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*RHjeyTaiLmHbRCptIU7NNw.png"                      alt="Trilium is working"                ></p><h2 id="Troubleshooting-Notes-don’t-refresh"><a href="#Troubleshooting-Notes-don’t-refresh" class="headerlink" title="Troubleshooting: Notes don’t refresh"></a>Troubleshooting: Notes don’t refresh</h2><p>If you got an issue where refreshing the browser is necessary to view changes in Trillium Notes, It may be caused by the missing  <a class="link"   href="http://nginx.org/en/docs/http/websocket.html" >nginx proxy setting to support <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> the web socket.</p><p>To determine whether it is the cause, open the Chrome dev tools, to check for the below error is shown.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*LNmeOwBVbZFKs0A5-GZCfg.png"                                     ></p><p>To fix the issue, log in to the server and update Nginx config file as follows:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;  </span><br><span class="line">    proxy_pass http://localhost:8080;  </span><br><span class="line">    proxy_http_version 1.1;  </span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;  </span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>After the update, don’t forget to restart the Ngnix server.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Trilium is a great note-taking App. It is lightweight, able to work offline, fast, and works well on a mobile browser.</p><p>There are a couple of advanced topics being skipped in this article</p><ul><li>Install multiple instances of the App on a single VM</li><li>Automatical backup of the data</li><li>Sync data between multiple apps</li></ul><p>If you are interested in these topics, leave a comment below. I will write another post to cover them if there is enough interest.</p><p>Happy noting!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Complete-Guide-on-Install-and-Configure-Trilium-Notes-App-using-Trilium-Nginx-Docker-and-Oracle-Cloud&quot;&gt;&lt;a href=&quot;#Complete-Guide-on-I</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    <category term="Programming" scheme="http://coffeethinkcode.com/categories/Web-Development/Programming/"/>
    
    
    <category term="Nginx" scheme="http://coffeethinkcode.com/tags/Nginx/"/>
    
    <category term="trilium" scheme="http://coffeethinkcode.com/tags/trilium/"/>
    
    <category term="hosting" scheme="http://coffeethinkcode.com/tags/hosting/"/>
    
    <category term="Docker" scheme="http://coffeethinkcode.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Install and ConfigureYour Own MySQL Server On Oracle Always Free Ubuntu VM</title>
    <link href="http://coffeethinkcode.com/2023/02/05/install-config-your-own-mysql-on-oracle-free-vm/"/>
    <id>http://coffeethinkcode.com/2023/02/05/install-config-your-own-mysql-on-oracle-free-vm/</id>
    <published>2023-02-04T14:00:00.000Z</published>
    <updated>2024-07-06T09:51:12.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Complete-guide-and-tricks-on-how-to-connect-to-the-MySQL-instances-remotely"><a href="#Complete-guide-and-tricks-on-how-to-connect-to-the-MySQL-instances-remotely" class="headerlink" title="Complete guide and tricks on how to connect to the MySQL instances remotely"></a>Complete guide and tricks on how to connect to the MySQL instances remotely</h2><p>In my previous article, I wrote about <a class="link"   href="https://medium.com/gitconnected/build-and-host-a-dynamic-web-site-for-only-1-per-month-1aa5aa3a7bd1" >hosting a site on Oracle always free offering <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. The Oracle always free is a generous offer. One of the eligible free services is:</p><blockquote><p>Arm-based Ampere A1 cores and 24 GB of memory usable as 1 VM or up to 4 VMs with 3,000 OCPU hours and 18,000 GB hours per month</p></blockquote><p>That means you can set up a free VM with 4 cores CPU and 24 GB of memory!</p><p>Recently, I utilize the Oracle Arm-based VM to build a MySQL instance and migrate an existing MySQL database over. The migrated server runs very well.</p><p>In this article, I will go through the process and share some tricks of configuring the database.</p><h3 id="Setup-and-Access-the-VM"><a href="#Setup-and-Access-the-VM" class="headerlink" title="Setup and Access the VM"></a>Setup and Access the VM</h3><p>I won’t repeat the details of VM setup and access via SSH, as it can be found in <a class="link"   href="https://medium.com/gitconnected/build-and-host-a-dynamic-web-site-for-only-1-per-month-1aa5aa3a7bd1" >my previous article <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. The only difference in setup is to choose the AMPERE as Shape.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2072/1*MmzJDp-C5kpQC8ZcRUyY_A.png"                                     ></p><p>Please note that I choose 3 core OCPU and 18 GB memory, although the max total limit is 4 cores and 24 GB memory. I leave some resources for my other free VM instance.</p><p>The new VM is running as below.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/3824/1*NAa7kiGIefLFTZScNoX9rA.png"                                     ></p><h3 id="Install-MySQL-Server"><a href="#Install-MySQL-Server" class="headerlink" title="Install MySQL Server"></a>Install MySQL Server</h3><p>After the new VM runs, we can log in to it via SSH.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2036/1*MNoWCLOvXgGzXZL0-B9wMg.png"                                     ></p><p>It is time to install the MySQL server by running the following commands.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># update apt</span><br><span class="line">sudo apt update</span><br><span class="line"># install the mysql server using the APT package repository</span><br><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></div><p>After the installation is completed, we can verify the installation by checking the version.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2092/1*iisW-LZm9LZPuawW09nPnQ.png"                                     ></p><h3 id="Secure-the-MySQL-instance"><a href="#Secure-the-MySQL-instance" class="headerlink" title="Secure the MySQL instance"></a>Secure the MySQL instance</h3><p>The next step is to secure the database by running the mysql_secure_installation script.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure></div><p>The mysql_secure_installation script will go through a few steps, and modify MySQL’s default security options to make it more secure. The first step is to set the level of password policy.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2232/1*9t1AlMZBQl1UvBgMbcac6w.png"                                     ></p><p>I choose the strong policy option, then was asked to set up the password of the root user. At this point, the following error is shown and blocks me from continuing.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2488/1*n8XkDiD3jiQ2rE8fryvtyA.png"                                     ></p><p>After some googling, I found a solution: update the authentication method of the root user. Starts a new SSH session, and log in to MySQL using the following command.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">#under mysql prompt</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password </span><br><span class="line">BY &#x27;[your passowrd]&#x27;;</span><br><span class="line"></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure></div><p>Now, we can restart the mysql_secure_installation and should be able to complete the full process. In each question other than the password policy, I choose Yes and Enter for the default choice.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2504/1*ktmsja1IqmDdPXmvJCV0lA.png"                                     ></p><p>The secure installation script performs these actions to tighten up the security.</p><ul><li><p>remove some anonymous users</p></li><li><p>remove the test database</p></li><li><p>disable root login remotely</p></li></ul><p>We can verify the status of the newly installed database instance.</p><pre><code>sudo systemctl status mysql.service</code></pre><h3 id="Add-a-new-MySQL-User"><a href="#Add-a-new-MySQL-User" class="headerlink" title="Add a new MySQL User"></a>Add a new MySQL User</h3><p>Now, our new server is running with theroot user created. Since the root user is designed to be used for admin purposes only, we need to create another user which can be used from an external service or App.</p><p>Firstly, connect to MySQL prompt via root user login. Then, execute the following SQL commands to create an appuser account.</p>  <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#x27;appuser&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;[your password]&#x27;;</span><br><span class="line">mysql&gt; GRANT CREATE, ALTER, DROP, INSERT, UPDATE, DELETE, SELECT, REFERENCES,</span><br><span class="line"> RELOAD on *.* TO &#x27;appuser&#x27;@&#x27;%&#x27; WITH GRANT OPTION; </span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">mysql&gt; exit;</span><br></pre></td></tr></table></figure></div><p>Then, we can try to log in as the newly created user.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u appuser -p</span><br></pre></td></tr></table></figure></div><h3 id="Connect-to-the-MySQL-instance-remotely"><a href="#Connect-to-the-MySQL-instance-remotely" class="headerlink" title="Connect to the MySQL instance remotely"></a>Connect to the MySQL instance remotely</h3><p>We have set up the MySQL instance with the necessary security options and user accounts in the Oracle cloud. At this point, you should be able to connect to the instance from the MySQL workbench using the public IP address via TCP&#x2F;IP+SSH.</p><p>But you will receive an error if you try to connect to it via TCP&#x2F;IP only via the MySQL workbench or any clients. That is because by default MySQL server is only configured to listen to local connections.</p><p>To allow remote access to the MySQL instance, we need to open up port 3306 which should be listened to by the MySQL server for external connections. It is a tricky step, as there are a few moving parts. The following are the steps involved:</p><ul><li><p>Add an ingress rule in the security list to allow port 3306</p></li><li><p>Update MySQL configuration to enable it to listen to external requests</p></li><li><p>Open the OS (Ubuntu) level firewall setting for port 3306</p></li></ul><p>Let’s add the ingress access rule first. Navigate to the VM Instance Details page, clicks on the Virtual Cloud Network link will bring you to the VCN page. From the VCN page, navigate to the security list via “Subnet link” &gt; “Default Security List for vcn-xxx”, then clicks on the “Add ingress rule” button to add a new rule.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/3204/1*ZNa4aNgS4yNMCV6c6RkENQ.png"                      alt="Ingress rule"                ><em>Ingress rule</em></p><p>Please note that the Source CIDR field should be the IP address you will use to connect to the MySQL instance from. It is possible to allow any IP addresses by 0.0.0.0&#x2F;0, but it is not recommended for obvious security reasons.</p><h3 id="Update-MySQL-configuration"><a href="#Update-MySQL-configuration" class="headerlink" title="Update MySQL configuration"></a><strong>Update MySQL configuration</strong></h3><p>By default, there is a configuration in MySQL setting to only allow the server to listen to local connections.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address   = 127.0.0.1</span><br></pre></td></tr></table></figure></div><p>We need to either comment it out or change it to an external IP address. In the below example, 0.0.0.0 will allow any IP to connect. Since I already set up the ingress rule earlier, so only the whitelisted IP can reach the server, I use any IP setting here.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address = 0.0.0.0</span><br></pre></td></tr></table></figure></div><p>The location of the MySQL config varies depending on the distribution versions. In my case, the file can be found at &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf. It can be in my.cnf or mysql.cnf file in other MySQL distributions.</p><p>After the file is updated, you will need to restart the server to make it effective.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure></div><p>To verify the server is listening to port 3306 for any IP address after the change, run the following command</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anutp | grep : 3306</span><br></pre></td></tr></table></figure></div><p>You should see a line of output similar to below</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2520/1*bsJksYpJ4Lek4VwxS4Tg0g.png"                                     ></p><p>The last step is to open up port 3306 at the OS level.</p><h3 id="Configure-iptables"><a href="#Configure-iptables" class="headerlink" title="Configure iptables"></a><strong>Configure iptables</strong></h3><p>iptables is a firewall program that is used by ubuntu. The default Ubuntu distribution actually doesn’t apply any restrictions in iptables. In other words, port 3306 should be allowed by default setting. But the Oracle Ubuntu image takes a different approach, iptables is configured to deny all accesses by default. You can run this command to view the current rules:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -L</span><br></pre></td></tr></table></figure></div><p>To allow port 3306 to pass through, you can run the following command</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install iptables-persistent</span><br><span class="line">sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 3306 -j ACCEPT</span><br><span class="line">sudo netfilter-persistent save</span><br></pre></td></tr></table></figure></div><p>Or for testing purposes, you can allow all ports temporary</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -I INPUT -j ACCEPT</span><br></pre></td></tr></table></figure></div><p>Finally, you should be able to connect to your new instance</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2516/1*a4SKHpree8Q675Sm8QvB7w.png"                      alt="MySQL Workbench test connection"                ><em>MySQL Workbench test connection</em></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2000/1*5vuWpHM3NGqtj_JYhkPCOQ.png"                                     ></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>So far, what we achieved are:</p><ul><li><p>Create an always free VM with 3 core CPU and 18 GB memory</p></li><li><p>Install and configure a MySQL server instance with proper security and user accounts</p></li><li><p>Update the VCN rules and allow the new server remotely accessible</p></li></ul><p>The new MySQL server runs very fast. I can’t be happier with it.</p><p>There are still some remaining works:</p><ul><li><p>migrate the existing database to the new DB instance</p></li><li><p>Set up automatic backups</p></li></ul><p>But this article is already too long, I will write another post for those tasks.</p><p>Thanks for reading!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Complete-guide-and-tricks-on-how-to-connect-to-the-MySQL-instances-remotely&quot;&gt;&lt;a href=&quot;#Complete-guide-and-tricks-on-how-to-connect-t</summary>
      
    
    
    
    <category term="Database" scheme="http://coffeethinkcode.com/categories/Database/"/>
    
    
    <category term="MySQL" scheme="http://coffeethinkcode.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Maximize Code Security in Your NestJS Applications (Part 2)</title>
    <link href="http://coffeethinkcode.com/2023/01/09/maximize-code-security-in-your-nestjs-applications-part-2/"/>
    <id>http://coffeethinkcode.com/2023/01/09/maximize-code-security-in-your-nestjs-applications-part-2/</id>
    <published>2023-01-08T14:00:00.000Z</published>
    <updated>2024-07-09T11:32:34.267Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Top-Secure-Code-Best-Practices-for-NestJS-Developers"><a href="#Top-Secure-Code-Best-Practices-for-NestJS-Developers" class="headerlink" title="Top Secure Code Best Practices for NestJS Developers"></a>Top Secure Code Best Practices for NestJS Developers</h4><p>In  <a href="https://coffeethinkcode.com/2022/12/21/maximize-code-security-in-your-nestjs-applications-part-1/">Part 1 of this article</a>, We walk through 4 common security risks and their prevention in the context of NestJS. It is worth noting that although NestJS is used here (as one of my favored API frameworks), those best practices are framework agnostic.</p><p>Let’s continue to dive into other common security vulnerabilities.</p><h3 id="Injection"><a href="#Injection" class="headerlink" title="Injection"></a>Injection</h3><p>As one of the most well-known vulnerabilities, Injection occurs when an attacker manages to execute arbitrary code or commands by injecting them into an app. Injection attacks can take many forms, such as SQL injection, command injection, and expression injection.</p><p>Although injection is a well-known risk, it is still occurring frequently. Some recent incidents include the  <a class="link"   href="https://en.wikipedia.org/wiki/2017_Equifax_data_breach" >2017 Equifax data breach <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  affecting 147 million users, the  <a class="link"   href="https://en.wikipedia.org/wiki/British_Airways_data_breach#:~:text=British%20Airways%20said%20the%20attack,380%2C000%20total%20customers%20being%20compromised." >2018 British airway data breach <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  leaking 380,000 credit card details, and the  <a class="link"   href="https://www.capitalone.com/digital/facts2019/#:~:text=When%20did%20this%20occur%3F,4." >2019 Capital One <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  breach exposing 100 million users’ personal information due to SQL injection.</p><p>Below is an example of SQL injection</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Connection</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Injectable</span>()  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ClientService</span> &#123;  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> connection: Connection</span>) &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getClients</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;  </span><br><span class="line">    <span class="keyword">const</span> query = <span class="string">`SELECT * FROM client WHERE name = &#x27;<span class="subst">$&#123;name&#125;</span>&#x27;`</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">connection</span>.<span class="title function_">query</span>(query);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// Client Controller  </span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ClientController</span> &#123;  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> clientService: ClientService</span>) &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;search&#x27;</span>)  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">searchClient</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">clientService</span>.<span class="title function_">getClients</span>(name);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In this example, the  <code>ClientService</code> class use the  <code>name</code>  parameter to construct an SQL query that is executed against a database. If the  <code>name the</code> parameter isn’t properly sanitized; an attacker could inject malicious code into the query by including special characters. For example, an attacker could send a request with a  <code>name</code>  parameter such as  <code>&#39;; DROP TABLE client; --</code>, which would delete the  <code>client</code> table.</p><p>SQL injection can be prevented by sanitizing user input and using prepared statements or parameterized queries whenever possible. Here is an improved version of the previous example.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Connection</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Injectable</span>()  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ClientService</span> &#123;  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> connection: Connection</span>) &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getClients</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;  </span><br><span class="line">    <span class="keyword">const</span> query = <span class="string">&#x27;SELECT * FROM client WHERE name = $1&#x27;</span>;  </span><br><span class="line">    <span class="keyword">const</span> params = [name];  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">connection</span>.<span class="title function_">query</span>(query, params);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>The revised  <code>ClientService</code> uses a parameterized query, which helps to ensure that user input is treated as data rather than executable code.</p><p>Another common type of Injection attack is OS command injection. It happens when an attacker injects an arbitrary OS command and executes it; the injection can be done via a request header or parameter, etc. Here is an example.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ClientService</span> &#123;  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">executeCommand</span>(<span class="attr">command</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;  </span><br><span class="line">    <span class="keyword">const</span> commandArray = command.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);  </span><br><span class="line">    <span class="title function_">spawn</span>(commandArray[<span class="number">0</span>], commandArray.<span class="title function_">slice</span>(<span class="number">1</span>));  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Without proper sanitizing or validating the  <code>command</code> input, the above code opens the door for a malicious command like “<code>rm rf /var/www</code>”.</p><p>To prevent OS command injection, the best way is to replace the OS commands in the app with framework-specific API. Alternatively, we should escape and validate the user input to ensure that only the expected input will pass the validation.</p><h3 id="Lack-of-Resources-and-Rate-limiting"><a href="#Lack-of-Resources-and-Rate-limiting" class="headerlink" title="Lack of Resources and Rate limiting"></a>Lack of Resources and Rate limiting</h3><p>Many clients can call an API at the same time. If the amount of simultaneous requests exceeds the limit, the API will become unresponsive or even crash.</p><p>This vulnerability can be triggered by a sudden surge of  legitimate requests during peak hours or malicious DDoS attacks. One of the recent DDoS attacks is the  <a class="link"   href="https://www.a10networks.com/blog/aws-hit-by-largest-reported-ddos-attack-of-2-3-tbps/" >2020 AWS web service attack <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>Any API endpoint without rate limiting can be vulnerable when an attacker sends a large number of requests in a short period of time. To prevent it, we can use a rate-limiting middleware in NestJS. You have a few choices available, such as  <code>[nestjs/throttler](https://github.com/nestjs/throttler)</code>  or <code>e``[xpress-rate-limit](https://github.com/express-rate-limit/express-rate-limit)``.</code></p><p>In the below example, we use  <code>nestjs/throttler</code>  to restrict that maximum of 10 requests from the same IP can be made to a single endpoint in 1 minute. It applies to all the incoming requests for the app.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;  </span><br><span class="line">  <span class="attr">imports</span>: [  </span><br><span class="line">    <span class="title class_">ThrottlerModule</span>.<span class="title function_">forRoot</span>(&#123;  </span><br><span class="line">      <span class="attr">ttl</span>: <span class="number">60</span>,  </span><br><span class="line">      <span class="attr">limit</span>: <span class="number">10</span>,  </span><br><span class="line">    &#125;),  </span><br><span class="line">  ],  </span><br><span class="line">&#125;)  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure></div><p>There are other options available to customize the throttling. For example, you can use  <code>@SkipThrottle</code>  decorator to disable rate limiting for an endpoint or use  <code>@Throttle()</code>  decorator to override the  <code>limit</code>  and  <code>ttl</code>  set in the global module.</p><p>Besides the number of requests, the following limits should also be considered.</p><ul><li>Execution timeout: If a request takes too long to complete, it should be terminated.</li><li>Payload size&#x2F;Maximum number of data in response, if a request returns a potentially large amount of data</li><li>Maximum allocable memory: excessive memory usage can cause the App to crash.</li></ul><h3 id="Identification-and-Authentification-Failure"><a href="#Identification-and-Authentification-Failure" class="headerlink" title="Identification and Authentification Failure"></a>Identification and Authentification Failure</h3><p>Identification and authentication failures are vulnerabilities related to applications’ authentication and identification processes.</p><p>It can happen when a system or application does not have robust methods in place to verify the identity of users or when the authentication process can be easily bypassed or manipulated.</p><p>This vulnerability can come in many different forms. The most common one is known as session hijacking. Here is an example of how this could happen in a NestJS application:</p><ul><li>The attacker intercepts the normal user’s session cookies. These cookies may contain information such as the user’s ID or Role and other identifying information.<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Cookies content  </span><br><span class="line">eyJ1c2VySWQiOjEyMzQ1LCJ1c2VyUm9sZSI6Im5vcm1hbCJ9  </span><br><span class="line">// JSON  </span><br><span class="line">&#123;&quot;userId&quot;:12345,&quot;userRole&quot;:&quot;normal&quot;&#125;</span><br></pre></td></tr></table></figure></div></li><li>The attacker modifies the session cookies to change the user Role and other identifying information to match an administrative account.</li><li>The attacker returns the modified cookies to the server, pretending to be the administrator. The server receives the modified cookies and grants the attacker access to the app with administrative privileges.</li></ul><p>The above example is obviously caused by insufficient authentication at the server. One way to prevent this type of attack in NestJS is to implement the authentication using JWT (JSON Web token). NestJS provides a <a class="link"   href="https://github.com/nestjs/jwt" > <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> <code>[@nestjs/jwt](https://github.com/nestjs/jwt)</code> package for JWT manipulation. You can find more details on implementing JWT in your NestJS app  <a class="link"   href="https://docs.nestjs.com/security/authentication#jwt-functionality" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>You can consider implementing MFA (multi-factor authentication) to tighten the authentication further. The most popular form of MFA is OTP (one-time passcode).</p><p>You can create your own OTP service to store the one-time passcode and manage the sending via phone or email. If you don’t want to reinvent the wheel, we can use existing libraries like  <a class="link"   href="https://github.com/yeojz/otplib" >otplib <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>Below are the basic steps to use otplib in NestJS</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// install Otplib  </span><br><span class="line">npm install otplib  </span><br><span class="line">// import it  </span><br><span class="line">import * as OTPLib from &#x27;otplib&#x27;;  </span><br><span class="line">  </span><br><span class="line">// generate a secrete  </span><br><span class="line">const secret = OTPLib.authenticator.generateSecret();  </span><br><span class="line">// then, we can gerenate a QRCode url to show a QRCode in your app  </span><br><span class="line">// we should save the generated secret in database for later use  </span><br><span class="line">const otpUrl = OTPLib.authenticator.keyuri(&#x27;user&#x27;, &#x27;The App name&#x27;, secret);  </span><br><span class="line">  </span><br><span class="line">// Now user scan the QRCode and sent it to the NestJS endpoint  </span><br><span class="line">// we can use the built in authenticator.verify to validate the otp token  </span><br><span class="line">import &#123; authenticator &#125; from &#x27;otplib&#x27;;  </span><br><span class="line">  </span><br><span class="line">authenticator.verify(&#123;  </span><br><span class="line">      token: token // Sent from Client,  </span><br><span class="line">      secret: secrete // previously saved secrete  </span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></div><p>If MFA can’t be implemented, the other options to consider for additional security includes the following:</p><ul><li>security questions</li><li>CAPTCHA</li><li>require strong password</li></ul><h3 id="Missing-Object-level-access-control"><a href="#Missing-Object-level-access-control" class="headerlink" title="Missing Object level access control"></a>Missing Object level access control</h3><p>Object-level access control is a security mechanism that can control access to a specific object or resource based on the permissions or roles of the user requesting access.</p><p>Below is an example of how the risk might occur in a NestJS application:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;  </span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ClientService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./client.service&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Injectable</span>()  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AttachmentController</span> &#123;  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> clientService: ClientService</span>) &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;/document/:id&#x27;</span>)  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">getFile</span>(<span class="attr">id</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">clientService</span>.<span class="title function_">getAttachmentById</span>(id);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In this example, the<code>getFile</code>  method in the  <code>AttachmentController</code>  doesn’t have object-level access control in place to ensure that only the attachment owner or users with permissions can access it. An attacker could potentially access any file in the system by guessing attachment Ids.</p><p>To prevent the risk, we can verify the user is the owner or has permission to access the object or resource.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AttachmentController</span> &#123;  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> clientService: ClientService</span>) &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;/document/:id&#x27;</span>)  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">getFile</span>(<span class="attr">id</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;  </span><br><span class="line">    <span class="keyword">const</span> currentUser = <span class="title function_">getCurrentUser</span>();  </span><br><span class="line">    <span class="keyword">const</span> <span class="variable language_">document</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">clientService</span>.<span class="title function_">getAttachmentById</span>(id);  </span><br><span class="line">    <span class="keyword">if</span> (currentUser.<span class="property">id</span> !== <span class="variable language_">document</span>.<span class="property">ownerId</span>) &#123;  </span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ForbiddenException</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Please note that the above is a contrived example based on the assumption that only the attachment file’s owner can access it.</p><p>To further reduce the risk, we can also use random values that are difficult to predict as record Ids. This can help to prevent attackers from guessing or enumerating record IDs. Below is an example to use  <code>uuid</code> module to generate a random unique value for the document id.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; v4 <span class="keyword">as</span> uuid &#125; <span class="keyword">from</span> <span class="string">&#x27;uuid&#x27;</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="variable language_">document</span> = &#123;  </span><br><span class="line">  <span class="attr">id</span>: <span class="title function_">uuid</span>(),  </span><br><span class="line">  <span class="attr">ownerId</span>: currentUser.<span class="property">id</span>,  </span><br></pre></td></tr></table></figure></div><p>The best practice is to ensure the server-side functions are protected with a role-based authorization  <a class="link"   href="https://docs.nestjs.com/guards" >guard <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> in your NestJS app.</p><h3 id="Final-thoughts"><a href="#Final-thoughts" class="headerlink" title="Final thoughts"></a>Final thoughts</h3><p>It is a common myth that security is the final step in the software development cycle, either in the form of a penetration test or through the use of a static scanning tool. However, this approach is not enough.</p><p>Instead, security should be integrated into every development process step, from design to coding and testing. Security considerations should be a key part of the planning and development a software application rather than an afterthought.</p><p>In this article, We discuss several common security risks that can impact NestJS applications, there are  <a class="link"   href="https://owasp.org/www-community/vulnerabilities/" >many others <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  that need to be considered. I hope you found this article helpful in building a secure and resilient app.<br>If you are interested to learn more, welcome to <a href="https://coffeethinkcode.com/2024/06/15/restapi/">my NestJS course</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Top-Secure-Code-Best-Practices-for-NestJS-Developers&quot;&gt;&lt;a href=&quot;#Top-Secure-Code-Best-Practices-for-NestJS-Developers&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="Security" scheme="http://coffeethinkcode.com/categories/Security/"/>
    
    
    <category term="TypeScript" scheme="http://coffeethinkcode.com/tags/TypeScript/"/>
    
    <category term="NestJS" scheme="http://coffeethinkcode.com/tags/NestJS/"/>
    
    <category term="Security" scheme="http://coffeethinkcode.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t Leave Your NestJS API Exposed</title>
    <link href="http://coffeethinkcode.com/2023/01/05/donnot-export-your-nestjs-endpoint/"/>
    <id>http://coffeethinkcode.com/2023/01/05/donnot-export-your-nestjs-endpoint/</id>
    <published>2023-01-04T14:00:00.000Z</published>
    <updated>2024-07-07T04:13:35.139Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Using-Reflect-and-the-NestJS-Undocumented-API-to-Identify-Unsecured-Endpoints-in-Unit-Tests"><a href="#Using-Reflect-and-the-NestJS-Undocumented-API-to-Identify-Unsecured-Endpoints-in-Unit-Tests" class="headerlink" title="Using Reflect and the NestJS Undocumented API to Identify Unsecured Endpoints in Unit Tests"></a>Using Reflect and the NestJS Undocumented API to Identify Unsecured Endpoints in Unit Tests</h4><p>It is a given that an API should be secured to prevent potential attacks. However, it is surprising how often simple human mistakes can lead to an API endpoint being unprotected. A recent example of this is the <a class="link"   href="https://www.acma.gov.au/optus-data-breach" >Optus data breach <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, which was caused by “*an API that did not require authentication to access customer data.*”. This highlights the importance of thorough testing and strict security measures for APIs to prevent such incidents from occurring.</p><p>Unprotected API is one of the top OWASP vulnerabilities. It is defined as below:</p><blockquote><p>Modern applications often involve rich client applications and APIs, such as JavaScript in the browser and mobile apps, that connect to an API of some kind. These APIs are often unprotected and contain numerous vulnerabilities.</p></blockquote><p>To avoid unprotected API, the first line of defense is via unit test. In this article, we are going to discuss how to ensure NestJS controllers and Endpoints are protected using the Unit test.</p><h3 id="Guards"><a href="#Guards" class="headerlink" title="Guards"></a>Guards</h3><p>In NestJS, we use authentication&#x2F;authorization guards to protect controllers or endpoints. Using Guards, we can ensure only authorized users have access to the API. Below is an example of an authentication Guard.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">canActivate</span>(</span><br><span class="line">    <span class="attr">context</span>: <span class="title class_">ExecutionContext</span>,</span><br><span class="line">  ): <span class="built_in">boolean</span> | <span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | <span class="title class_">Observable</span>&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> request = context.<span class="title function_">switchToHttp</span>().<span class="title function_">getRequest</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">validateRequest</span>(request);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">validateRequest</span>(<span class="params">request: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="comment">// Authenticate user request to ensure it is authenticated </span></span><br><span class="line">    <span class="comment">// i.e. validate a token</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>The AuthGuard class contains canActivate method which takes an ExecutionContext object as an argument. The method performs validation to determine whether the request should be allowed.</p><p>To apply the AuthGuard to a controller, we can use the @UseGuards decorator</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>)</span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppController</span> &#123;&#125;</span><br></pre></td></tr></table></figure></div><p>If the @UseGuards decorator is accidentally removed, the API will become unprotected and vulnerable to unauthorized access. To ensure that the Guard is properly applied to the controller, we can use unit tests to verify its presence.</p><p>To achieve that, we need to use the <a class="link"   href="https://www.npmjs.com/package/reflect-metadata" >reflect-metadata <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> library and NestJS undocumented DiscoveryService API. Let’s look at the <a class="link"   href="https://www.npmjs.com/package/reflect-metadata" >reflect-metadata <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> library first.</p><h3 id="Reflect-MetaData"><a href="#Reflect-MetaData" class="headerlink" title="Reflect-MetaData"></a>Reflect-MetaData</h3><p>The reflect-metadata library provides support for the Reflect API, which is part of the ECMAScript specification. We can use it to get metadata at runtime. It is worth noting that NestJS also uses the <a class="link"   href="https://www.npmjs.com/package/reflect-metadata" >reflect-metadata <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> under the hood to work with metadata.</p><p>The below example demonstrates how to retrieve the Guards metadata from the AppController.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> guards = <span class="title class_">Reflect</span>.<span class="title function_">getMetadata</span>(<span class="string">&#x27;__guards__&#x27;</span>, <span class="title class_">AppController</span>);</span><br></pre></td></tr></table></figure></div><p>The getMetaData method takes two arguments:</p><ul><li><p>metadataKey: A key used to store and retrieve metadata. In this case, the key is <strong>guards</strong>, it is used by NestJs to reference the Guards.</p></li><li><p>target: The target object on which the metadata is defined.</p></li></ul><p>with getMetadata method, we can write a simple Unit test to verify the AppController is protected.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should AuthGard be applied to the AppController&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> guards = <span class="title class_">Reflect</span>.<span class="title function_">getMetadata</span>(<span class="string">&#x27;__guards__&#x27;</span>, <span class="title class_">AppController</span>);</span><br><span class="line">   <span class="keyword">const</span> guard = <span class="keyword">new</span> guards[<span class="number">0</span>]();</span><br><span class="line">   <span class="title function_">expect</span>(guard).<span class="title function_">toBeInstanceOf</span>(<span class="title class_">AuthGuard</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></div><p>If there are multiple controllers in the app, it is possible to write a unit test that covers all of them at once? The answer is positive, but we need to use the NestJS Discovery Service.</p><h3 id="Discovery-Service"><a href="#Discovery-Service" class="headerlink" title="Discovery Service"></a>Discovery Service</h3><p>The NestJS <a class="link"   href="https://github.com/nestjs/nest/blob/master/packages/core/discovery/discovery-service.ts" >discovery service <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> is an undocumented public API. It is important to note that an “undocumented” feature may be subject to change or breakage in the future. While it is a handy feature to use, it is generally best to avoid relying on undocumented features in your app. In my personal opinion, using it in unit test is acceptable as long as you are aware of the risk.</p><p>As shown below, using this.discoveryService.getControllers(), we can get a collection of type InstanceWrapper &#x3D; { metatype, name, instance, … }.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> controllers = <span class="keyword">await</span> discoveryService.<span class="title function_">getControllers</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure></div><p>To extract the guards metadata from the InstanceWrapper, we can use the getEnhancersMetadata method. In the test below, we loop through each controller and verify that they are protected by the AuthGuard.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should have AuthGard applied for all controllers&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> controllers = <span class="keyword">await</span> discoveryService.<span class="title function_">getControllers</span>(&#123;&#125;);</span><br><span class="line">  controllers.<span class="title function_">map</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> guard = c</span><br><span class="line">      .<span class="title function_">getEnhancersMetadata</span>()</span><br><span class="line">      ?.<span class="title function_">filter</span>(</span><br><span class="line">        <span class="function">(<span class="params">&#123; instance &#125;: InstanceWrapper</span>) =&gt;</span> instance <span class="keyword">instanceof</span> <span class="title class_">AuthGuard</span>,</span><br><span class="line">      );</span><br><span class="line">    <span class="title function_">expect</span>(guard[<span class="number">0</span>].<span class="property">name</span>).<span class="title function_">toEqual</span>(<span class="string">&#x27;AuthGuard&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>To achieve a fine level of access control, we can define a RoleGuard and apply it to individual endpoints. We use SetMetadata in the function below to assign metadata with a specific key. SetMetadata is an out-of-box NestJS decorator function.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SetMetadata</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Roles</span> = (<span class="params">...roles: <span class="built_in">string</span>[]</span>) =&gt; <span class="title class_">SetMetadata</span>(<span class="string">&#x27;roles&#x27;</span>, roles);</span><br></pre></td></tr></table></figure></div><p>To apply a Roles decorator to an endpoint, we need to pass in a role to the decorator</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="meta">@Roles</span>(<span class="string">&#x27;Admin&#x27;</span>)</span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Secure-an-Endpoint"><a href="#Secure-an-Endpoint" class="headerlink" title="Secure an Endpoint"></a>Secure an Endpoint</h3><p>To detect whether an endpoint is associated with the Roles decorator, we use the getMetadata as below.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> decorators = <span class="title class_">Reflect</span>.<span class="title function_">getMetadata</span>(</span><br><span class="line">  <span class="string">&#x27;roles&#x27;</span>,</span><br><span class="line">  <span class="title class_">DevController</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getAll</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><p>In a unit test, we can verify whether an endpoint is protected by the roles decorator with a role</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(&#x27;should getAll be accessible by Admin role only&#x27;, () =&gt; &#123;</span><br><span class="line">  const decorators = Reflect.getMetadata(</span><br><span class="line">    &#x27;roles&#x27;,</span><br><span class="line">    DevController.prototype.getAll,</span><br><span class="line">  );</span><br><span class="line">  expect(decorators).toContain(&#x27;Admin&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>The Reflect API can be used to get other metadata of the endPoint.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should getHello has correct path and http method&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> path = <span class="title class_">Reflect</span>.<span class="title function_">getMetadata</span>(<span class="string">&#x27;path&#x27;</span>, appController.<span class="property">getHello</span>);</span><br><span class="line">  <span class="title function_">expect</span>(path).<span class="title function_">toBe</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> method = <span class="title class_">Reflect</span>.<span class="title function_">getMetadata</span>(<span class="string">&#x27;method&#x27;</span>, appController.<span class="property">getHello</span>);</span><br><span class="line">  <span class="title function_">expect</span>(method).<span class="title function_">toBe</span>(<span class="title class_">RequestMethod</span>.<span class="property">GET</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>In this above usage of getMetaData, the keys being used are ‘path’ and ‘method’, which corresponds to the path and HTTP method of the getHello method, respectively.</p><h3 id="Bonus-Content-Use-Discovery-Service-to-dynamically-get-a-list-of-Services"><a href="#Bonus-Content-Use-Discovery-Service-to-dynamically-get-a-list-of-Services" class="headerlink" title="Bonus Content: Use Discovery Service to dynamically get a list of Services"></a>Bonus Content: Use Discovery Service to dynamically get a list of Services</h3><p>Discovery service can be a graceful solution to certain problems. For example, in one of my recent NestJS projects, there is a MapperResolver class:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MapperResolver</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">mapperList</span>: <span class="title class_">IMapper</span>[];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> serviceAMapper: ServiceAMapper,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> serviceBMapper: ServiceBMapper,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> serviceCMapper: ServiceCMapper,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> serviceDMapper: ServiceDMapper,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mapperList</span>= [</span><br><span class="line">      serviceAMapper,</span><br><span class="line">      serviceBMapper,</span><br><span class="line">      serviceCMapper,</span><br><span class="line">      serviceDMapper</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title class_">Resolve</span>(<span class="attr">serviceType</span>: <span class="built_in">string</span>):<span class="title class_">IMapper</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mapper = <span class="variable language_">this</span>.<span class="property">mapperList</span>.<span class="title function_">find</span>(<span class="function"><span class="params">c</span> =&gt;</span> c.<span class="property">serviceType</span>=== serviceType);</span><br><span class="line">    <span class="keyword">if</span> (mapper) &#123;</span><br><span class="line">      <span class="keyword">return</span> mapper;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`No Mapper found`</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p>In the real-world project, there are more than 10 Mapper classes injected into the MapperResolver class constructor, this number continues to grow as new features are added. This has become a maintenance issue.</p><p>We can use Discovery Service to solve this problem. As this topic is outside the scope of this article, I will only give a brief description of the solution.</p><ul><li><p>create a decorator @ServiceRegister that takes an argument</p></li><li><p>add the decorator to each Mapper class i.e. @ServiceRegister(‘Mapper’)</p></li><li><p>use discoveryService.getProviders() to retrieve all providers and filter out the mapper services using the metadata.</p></li></ul><p>The end result is that we are able to remove all the injected Mapper services in the MapperResolver class. But again, please be careful in using DiscoveryService as it is an undocumented API.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>It’s important to regularly test and monitor the security of your application to ensure that it is secure and reliable. By embedding the security checking into Unit tests, and regularly running these tests, we can catch any issues and fix them before they cause problems in production.</p><p>Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Using-Reflect-and-the-NestJS-Undocumented-API-to-Identify-Unsecured-Endpoints-in-Unit-Tests&quot;&gt;&lt;a href=&quot;#Using-Reflect-and-the-NestJS-</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    <category term="Security" scheme="http://coffeethinkcode.com/categories/Web-Development/Security/"/>
    
    
    <category term="NestJS" scheme="http://coffeethinkcode.com/tags/NestJS/"/>
    
    <category term="Security" scheme="http://coffeethinkcode.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Maximize Code Security in Your NestJS Applications (Part 1)</title>
    <link href="http://coffeethinkcode.com/2022/12/21/maximize-code-security-in-your-nestjs-applications-part-1/"/>
    <id>http://coffeethinkcode.com/2022/12/21/maximize-code-security-in-your-nestjs-applications-part-1/</id>
    <published>2022-12-20T14:00:00.000Z</published>
    <updated>2024-07-09T11:32:03.408Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Top-Secure-Code-Best-Practices-for-NestJS-Developers"><a href="#Top-Secure-Code-Best-Practices-for-NestJS-Developers" class="headerlink" title="Top Secure Code Best Practices for NestJS Developers"></a>Top Secure Code Best Practices for NestJS Developers</h4><p>As a developer, we all know how critical is code security. The recent data breaches at <a class="link"   href="https://www.optus.com.au/about/media-centre/media-releases/2022/09/optus-notifies-customers-of-cyberattack" >Optus <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and <a class="link"   href="https://www.medibank.com.au/health-insurance/info/cyber-security/" >Medibank  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>highlight the importance of code security again. So, the question is: how can we write secure code to prevent various types of attacks in web applications? It is essential to follow best practices to write secure code, so our App is protected against vulnerabilities and threats.</p><p>Before we dive into how to prevent the security risk? let’s first examine the most common types of security risks. This will give us a better understanding of the challenges to keep our App secure.</p><p>The OWASP Top 10 is a widely accepted list of the most critical security risks for web applications, as determined through consensus among industry experts. Below is the list of the top 10 risks in 2017 and 2021.</p><p><img src="https://cdn-images-1.medium.com/max/2250/1*ObUHh3Z9GbA8jFlBoTHaXg.png" alt="Source: [https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/)"><em>Source: <a class="link"   href="https://owasp.org/www-project-top-ten/" >https://owasp.org/www-project-top-ten/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p><p>Many of the top 10 are critical for the security of web Apps.</p><p>As part 1 of a two-part article, I will walk through a few risks and the best practices that you can follow to prevent the risk.</p><p>They include:</p><ul><li><p><a href="#4d65">Broken access control</a></p></li><li><p><a href="#3fb4">Server-side request forgery (SSRF)</a></p></li><li><p><a href="#2dac">Mass assignment</a></p></li><li><p><a href="#ffd8">Sensitive information exposure</a></p></li></ul><h3 id="Broken-access-control"><a href="#Broken-access-control" class="headerlink" title="Broken access control"></a>Broken access control</h3><p>Broken function access is one of the most common risks. It occurs when an attacker is able to access unauthorized functions or resources. One real-world example is the <a class="link"   href="https://gibsonsec.org/snapchat/" >Snapchat incident on Jan 2014 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>To prevent this risk, it is important to follow the principle of <strong>least privilege</strong>. This means that access should always be denied by default, and privileges should only be granted on an as-needed basis.</p><p>We can use access control mechanisms such as role-based access control (RBAC) or access control lists (ACLs) to restrict access to functions or resources based on a user’s role or permissions.</p><p>Here’s an example of RBAC using <a class="link"   href="https://docs.nestjs.com/guards" >Guards  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>in a NestJS application:</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">CanActivate</span>, <span class="title class_">ExecutionContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AdminRoleGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">canActivate</span>(<span class="attr">context</span>: <span class="title class_">ExecutionContext</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> request = context.<span class="title function_">switchToHttp</span>().<span class="title function_">getRequest</span>();</span><br><span class="line">    <span class="keyword">const</span> user = request.<span class="property">user</span>;</span><br><span class="line">    <span class="keyword">return</span> user.<span class="property">role</span> === <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;cats&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsController</span> &#123;</span><br><span class="line">  <span class="meta">@UseGuards</span>(<span class="title class_">AdminRoleGuard</span>)</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">findAll</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">Cat</span>[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">catsService</span>.<span class="title function_">findAll</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In the above code snippet, we create an AdminRoleGuard that implements the CanActivate interface provided by NestJS. It checks the role of the current user and returns true when the user is an admin. We then use the @UseGuards decorator to apply the AdminRoleGuard to the findAll method, which will restrict access to the endpoint for users withadmin role only.</p><p>The access control mechanisms should be applied using centralized functions from a proven framework, to ensure it is safe and easy to maintain.</p><p>It is also recommended to have unit tests that tests the necessary Guards being applied on a controller. Thus if the Guard is accidentally removed, the unit test will catch it.</p><h3 id="Server-side-request-forgery-SSRF"><a href="#Server-side-request-forgery-SSRF" class="headerlink" title="Server-side request forgery (SSRF)"></a>Server-side request forgery (SSRF)</h3><p>SSRF is a type of cyber attack in which an attacker induces a server to make unintended requests on their behalf. These requests can be used to access restricted resources from internal networks.</p><p>To prevent SSRF, It is essential to properly validate user input. Below is an example of an endpoint vulnerable to SSRF risk.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Res</span>, <span class="title class_">HttpStatus</span>, <span class="title class_">Query</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getData</span>(<span class="params"><span class="meta">@Query</span>(<span class="string">&#x27;url&#x27;</span>) url: <span class="built_in">string</span>, <span class="meta">@Res</span>() res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In the above example, the App makes a request to the URL sourced from url query parameter and returns the response data to the client. Obviously, it is vulnerable to SSRF attacks because an attacker can send a request to the server with a malicious URL that accesses restricted resources from the internal network.</p><p>We should validate the URL parameter to prevent the risk as below.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Res</span>, <span class="title class_">HttpStatus</span>, <span class="title class_">Query</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isURL &#125; <span class="keyword">from</span> <span class="string">&#x27;validator&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getData</span>(<span class="params"><span class="meta">@Query</span>(<span class="string">&#x27;url&#x27;</span>) url: <span class="built_in">string</span>, <span class="meta">@Res</span>() res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isURL</span>(url)) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">BAD_REQUEST</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid URL&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>To further improve security, we shouldn’t allow users to pass in URLs directly in query parameters. Instead, we should use an existing service to retrieve the data from a trusted API.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getData</span>(<span class="params"><span class="meta">@Query</span>(<span class="string">&#x27;name&#x27;</span>) dataName: <span class="built_in">string</span>, <span class="meta">@Res</span>() res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> dataService.<span class="title class_">GetDataByName</span>(dataName);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>There are other ways to prevent SSRF attacks:</p><ul><li><p>Only make requests to trusted sources (i.e. known APIs or services)</p></li><li><p>Implement security headers (i.e. headers like “<a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options" >X-Frame-Options <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>”) to prevent clickjacking attacks and other types of malicious requests.</p></li><li><p>Use a Content Security Policy(CSP) to specify which sources are allowed to make requests on behalf of your application.</p></li></ul><p>In NestJS, you can use <a class="link"   href="https://docs.nestjs.com/security/helmet" >helmet  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>to easily set up security headers and a Content Security Policy.</p><h3 id="Mass-Assignment"><a href="#Mass-Assignment" class="headerlink" title="Mass Assignment"></a>Mass Assignment</h3><p>Mass assignment is a vulnerability in that an attacker is able to modify multiple object properties by sending a malicious request to your App.</p><p>In the below example, a new user is created based on the data coming from the request body. It is vulnerable to mass assignment attacks because an attacker can send a request with malicious data that overwrites sensitive fields in the Client object (i.e. role or password).</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&quot;client&quot;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ClientController</span> &#123;</span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"><span class="meta">@Body</span>() body</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">Client</span>(body);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> client.<span class="title function_">save</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>To prevent mass assignment, we can define a whitelist of allowed properties for each object. In the below example, we implemented a white list of properties to prevent overwriting of sensitive fields.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">Column</span>, <span class="title class_">PrimaryGeneratedColumn</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>()</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">role</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#125;)</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;client&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ClientController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> clientService: ClientService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">create</span>(<span class="params"><span class="meta">@Body</span>() client: Pick&lt;User, <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;email&#x27;</span>&gt;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">clientService</span>.<span class="title function_">create</span>(client);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Here, we use the TypeScript Pick type to define a whitelist of properties for the User entity. The @Body decorator is then used to bind the request body to the user parameter, which will only include the allowed properties. This prevents an attacker from modifying other properties of the User entity through mass assignment.</p><p>Other ways to prevent mass assignment include:</p><ul><li><p>Use a reduced DTO, instead of a general DTO. For example, create a InsertClientEntity and UpdateClientEntity. These DTOs only contain properties that are allowed in the insert and update operation.</p></li><li><p>Avoid directly binding to an object coming from the client side.</p></li></ul><h3 id="Sensitive-information-exposure"><a href="#Sensitive-information-exposure" class="headerlink" title="Sensitive information exposure"></a>Sensitive information exposure</h3><p>Sensitive information includes things like passwords, API keys, and other confidential data. Any data that contains personal information or payment-related information are sensitive.</p><p>Often, when designing web API, excessive data are returned to the client.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Param</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Client</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./client/client.entity&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ClientController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;clients/:id&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getClient</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Client</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// Return all fields for the client</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Client</span>.<span class="title function_">findById</span>(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In this example, the getClient method is returning all fields for the client including sensitive data like role or password. Although these data aren’t consumed or displayed by clients, they still can be intercepted and exposed by attackers.</p><p>To prevent sensitive personal data exposure, we should only return the necessary data of the client, which is name and email fields in this case. In a nutshell, we should only expose the minimum amount of data.</p><div class="highlight-container" data-rel="Typescript"><figure class="iseeu highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Param</span>, <span class="title class_">UseGuards</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Client</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./client/client.entity&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ClientController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;clients/:id&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getClient</span>(<span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) <span class="attr">id</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">Client</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// Only return the name and email</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Client</span>.<span class="title function_">findById</span>(id).<span class="title function_">map</span>(<span class="function"><span class="params">c</span> =&gt;</span> &#123;c.<span class="property">name</span>, c.<span class="property">email</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>To prevent sensitive data exposure, below are other guidelines to follow:</p><ul><li><p>Do NOT store sensitive information to version control. This information includes environment variables or configuration files</p></li><li><p>Identify sensitive information (<a class="link"   href="https://gdpr-info.eu/" >GDPR <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, <a class="link"   href="https://www.pcisecuritystandards.org/" >PCI,  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>and <a class="link"   href="https://www.cyber.gov.au/acsc/view-all-content/glossary/personally-identifiable-information-pii" >PII data <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>) in your system, and secure them through encryption.</p></li><li><p>Make sure that your App uses HTTPS between the client and the server. This will prevent sensitive data from being intercepted during transmission.</p></li></ul><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In this article, we walk through 4 common risks and the best practices to prevent those risks within the context of NestJS.</p><p>By following these best practices, you can write secure code to ensure that your NestJS app is as secure as possible.</p><p>In part 2 of the article, we continue the discussion on other top OWASP risks.<br><a href="https://coffeethinkcode.com/2023/01/09/maximize-code-security-in-your-nestjs-applications-part-2/"><strong>Maximize Code Security in Your NestJS Applications (Part 2)</strong><br>*Secure Code Best Practices with Real-World Examples</a></p><p>Happy Programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Top-Secure-Code-Best-Practices-for-NestJS-Developers&quot;&gt;&lt;a href=&quot;#Top-Secure-Code-Best-Practices-for-NestJS-Developers&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="Security" scheme="http://coffeethinkcode.com/categories/Security/"/>
    
    
    <category term="TypeScript" scheme="http://coffeethinkcode.com/tags/TypeScript/"/>
    
    <category term="NestJS" scheme="http://coffeethinkcode.com/tags/NestJS/"/>
    
    <category term="Security" scheme="http://coffeethinkcode.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Turbocharge Your App with NestJS - Tips and Tricks</title>
    <link href="http://coffeethinkcode.com/2022/09/21/build-a-high-performance-nestjs-app/"/>
    <id>http://coffeethinkcode.com/2022/09/21/build-a-high-performance-nestjs-app/</id>
    <published>2022-09-20T14:00:00.000Z</published>
    <updated>2024-07-09T11:31:40.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-Performance-Boosting-Techniques-to-Get-the-Most-Out-of-NestJS"><a href="#4-Performance-Boosting-Techniques-to-Get-the-Most-Out-of-NestJS" class="headerlink" title="4 Performance Boosting Techniques to Get the Most Out of NestJS"></a>4 Performance Boosting Techniques to Get the Most Out of NestJS</h2><p>As a powerful Node.js application framework, NestJS offers a wide range of features for building server-side apps. Its popularity continues to grow as more developers discover its benefits.</p><p>However, when it comes to building a NestJS app, performance is often an overlooked aspect. In this article, I will discuss a few practical techniques for crafting a high-performance NestJS application</p><h3 id="Architecture-Choice"><a href="#Architecture-Choice" class="headerlink" title="Architecture Choice"></a>Architecture Choice</h3><p>By default, NestJS runs on top of <a class="link"   href="https://expressjs.com/" >Express <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> primary due to its popularity. Although there are some overheads, NestJS’s performance isn’t far away from Express. Express is considered to be a well-performed framework. Thus the default option: Nest-Express is good enough for a normal server-side App.</p><p>But if performance is the first priority, a better option is to use F<a class="link"   href="https://docs.nestjs.com/techniques/performance" >astify <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> which is much faster than Express.</p><p>Below is a recent benchmark test results for Nest-Express vs Nest-Fastify vs Express alone. We can see that Nest-Fastify is more than 3 times faster than Nest-Express.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*1LITO4dK7Uw3AJEuPrh-3g.png" alt="A recent benchmark ([https://github.com/nestjs/nest/pull/10276/checks?check_run_id=8318006381](https://github.com/nestjs/nest/pull/10276/checks?check_run_id=8318006381))"><em>A recent benchmark (<a class="link"   href="https://github.com/nestjs/nest/pull/10276/checks?check_run_id=8318006381" >https://github.com/nestjs/nest/pull/10276/checks?check_run_id&#x3D;8318006381 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</em></p><p>If you are building a new NestJS App, one of the first things to consider is whether you should stick to the Express, or start with Fastify. For existing Apps, it is also possible to migrate to Fastify from Express since Nest provides framework independence using<a class="link"   href="https://docs.nestjs.com/techniques/performance" > adapter <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><h3 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h3><p>Caching can improve your NestJS app or any web app performance dramatically. It is a complex topic and is considered to be one of the <a class="link"   href="https://martinfowler.com/bliki/TwoHardThings.html" >two hard things in computing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. However, NestJS has made it easier with its well-abstracted API.</p><p>NestJS provides an out-of-box<a class="link"   href="https://docs.nestjs.com/techniques/caching" > cache manager. <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> The cache manager provides an API for various cache storage providers. The default storage provider is an in-memory data store and it is built-in. To enable in-memory caching, we need to import the CacheModule as below.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; CacheModule, Module &#125; from &#x27;@nestjs/common&#x27;;</span><br><span class="line">import &#123; AppController &#125; from &#x27;./app.controller&#x27;;</span><br><span class="line"></span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [CacheModule.register()],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;&#125;</span><br></pre></td></tr></table></figure></div><p>For more configuration options, refer to the <a class="link"   href="https://docs.nestjs.com/techniques/caching" >official documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>You can switch to a number of other storage providers, for example, <a class="link"   href="https://github.com/dabroek/node-cache-manager-redis-store" >redis store <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>Regardless of which storage provider you choose, you can set up a cache interceptor to automatically cache the get response.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import * as redisStore from &#x27;cache-manager-redis-store&#x27;;</span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [CacheModule.register(&#123;store: redisStore&#125;)],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;</span><br><span class="line">      provide: APP_INTERCEPTOR,</span><br><span class="line">      useClass: CacheInterceptor,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>The above configuration will import CacheInterceptor, and bind it to all endpoints globally. Alternatively, you also can use UseInterceptors to bind the CacheInterceptor at the controller level.</p><h3 id="Enable-Gzip"><a href="#Enable-Gzip" class="headerlink" title="Enable Gzip"></a>Enable Gzip</h3><p>Enabling Gzip compression can greatly improve API performance. It doesn’t only work with NestJS, instead, it is applicable to any common Web API service. It is easy to implement and very effective, but at the same time also easily to be forgotten.</p><p>Gzip compresses API requests and responses. The result is up to 10x reduced payload.</p><p>You can either enable Gzip compression via Nginx. Most NestJS apps sit behind Nginx, and you can configure Nginx to use gzip to compress the HTTP response on the fly. The following is an example to enable Gzip in nginx.conf.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_disable &quot;msie6&quot;;</span><br></pre></td></tr></table></figure></div><p>Another way is to enable Gzip within the NestJS app. In your NestJs App, you can make use of the compression middleware package provided to compress and serve content.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import * as compression from &#x27;compression&#x27;;</span><br><span class="line">// somewhere in your initialization file</span><br><span class="line">app.use(compression());</span><br></pre></td></tr></table></figure></div><p>In the above example, the compression middleware is imported from the @nestjs&#x2F;common package and used to enable gzip compression for all requests to the app. This allows the app to compress the response using gzip if the client supports it, which can improve the performance and efficiency of the app.</p><h3 id="Cluster-Mode"><a href="#Cluster-Mode" class="headerlink" title="Cluster Mode"></a>Cluster Mode</h3><p>By default, the NestJS App instance runs in a single thread. Since all servers have multiple CPU cores, the single-thread instance doesn’t take full advantage of the server resources.</p><p>To utilize the multiple cores to improve performance, we can use the Cluster<a class="link"   href="https://nodejs.org/api/cluster.html" > module <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> in NodeJS. Under cluster mode, the child processes run as a cluster, thus incoming requests are handled simultaneously. It results in better throughput.</p><p>It is straightforward to create a cluster service in NestJS. Below is an example of implementation.</p><pre><code>import &#123; NestFactory &#125; from '@nestjs/core';import &#123; AppModule &#125; from './app.module';import * as os from 'os';const cluster = require('node:cluster');const numCPUs = os.cpus().length;async function bootstrap() &#123;  const app = await NestFactory.create(AppModule);  await app.listen(3000);&#125;if(cluster.isMaster)&#123;  console.log(`Master server started on $&#123;process.pid&#125;`);  for (let i = 0; i < numCPUs; i++) &#123;      cluster.fork();  &#125;  cluster.on('exit', (worker, code, signal) => &#123;      console.log(`Worker $&#123;worker.process.pid&#125; died. Restarting`);      cluster.fork();  &#125;)&#125; else &#123;  console.log(`Cluster server started on $&#123;process.pid&#125;`)  bootstrap();&#125;</code></pre><p>The gist of the above code is</p><ul><li><p>Firstly, we import the cluster module and get the number of CPU cores</p></li><li><p>The master process is responsible for creating the worker processes, and the worker processes are responsible for running the NestJS app.</p></li><li><p>For the master process, a worker process is created for each CPU available. We also listen to the exit of a worker process, when any worker process crashes, the master process will fork a new one.</p></li><li><p>For the child process, we can use the bootstrap function to start the server instance.</p></li></ul><p>In the production environment, you can use pm2 to run the App in cluster mode. The command below will start the app with cluster mode for 8 CPU cores.</p><pre><code>pm2 start dist/main.js -i 8</code></pre><p>Overall, using cluster mode in a NestJS app can provide improved performance and scalability by sharing the workload across multiple worker processes.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Optimizing the performance of a NestJS application is a complex and multifaceted task. In this article, we discussed how to utilize the built-in NestJS features like Fastify, and Cache Manager to improve performance. Gzip and Cluster modules are also commonly used to optimize not only NestJS but also other NodeJS web apps.</p><p>If you found this article useful, you may also like to check out my other NestJS-related articles on <a class="link"   href="https://medium.com/p/be6bc77e789e" >how to build efficient and maintainable NestJS apps <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and <a href="https://coffeethinkcode.com/2022/12/21/maximize-code-security-in-your-nestjs-applications-part-1/">NestJS security</a>.</p><p>Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;4-Performance-Boosting-Techniques-to-Get-the-Most-Out-of-NestJS&quot;&gt;&lt;a href=&quot;#4-Performance-Boosting-Techniques-to-Get-the-Most-Out-of-</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    
    <category term="TypeScript" scheme="http://coffeethinkcode.com/tags/TypeScript/"/>
    
    <category term="NestJS" scheme="http://coffeethinkcode.com/tags/NestJS/"/>
    
    <category term="Performance" scheme="http://coffeethinkcode.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Upload Files to S3 Using Angular and NestJS</title>
    <link href="http://coffeethinkcode.com/2022/09/12/upload-files-to-s3-using-angular-and-nestjs/"/>
    <id>http://coffeethinkcode.com/2022/09/12/upload-files-to-s3-using-angular-and-nestjs/</id>
    <published>2022-09-11T14:00:00.000Z</published>
    <updated>2024-06-29T04:22:57.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="An-End-to-End-Example-using-Angular-and-NestJS"><a href="#An-End-to-End-Example-using-Angular-and-NestJS" class="headerlink" title="An End to End Example using Angular and NestJS"></a>An End to End Example using Angular and NestJS</h2><p>Recently, I worked on an S3 file-uploading feature for an Angular&#x2F;NestJS App. To my surprise, I have difficulty finding a tutorial with complete and working examples. Thus, I thought it might be useful to walk through the process of file uploading to the S3 (Amazon Simple Storage Service) bucket with Angular and NestJS.</p><p>I assume that you have basic knowledge of Angular and NestJS. So I will skip those initial App Setups and focus on the file uploading part.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>You will need these technologies to follow along:</p><ul><li><p>Angular 14</p></li><li><p>NestJS version 9</p></li><li><p>NodeJS v14 or above</p></li><li><p>An AWS account</p></li></ul><h3 id="S3-bucket-and-Access-Key-x2F-Secret-Access-Key"><a href="#S3-bucket-and-Access-Key-x2F-Secret-Access-Key" class="headerlink" title="S3 bucket and Access Key&#x2F;Secret Access Key"></a>S3 bucket and Access Key&#x2F;Secret Access Key</h3><p>To upload files to S3, we need to set up the S3 bucket and IAM user required for NestJS API to access it.</p><p>If you don’t have an S3 bucket yet, follow <a class="link"   href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html" >this instruction <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> to create one.</p><p>The next step is to log in to your AWS account and navigate to IAM to add a user. Enter a user name and tick the “Access key -Programmatic access” option.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2000/1*gTTzcQ0WjgRi6hvn5RwJvw.png"                      alt="Create IAM User"                ><em>Create IAM User</em></p><p>Then, click on the “Next: Permission” button to attach the “AmazonS3FullAccess” policy to the IAM user.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2486/1*y72uqoq2Ig1uzhWHQCR39g.png"                      alt="Attach existing policy"                ><em>Attach existing policy</em></p><p>Click on the “Next” button to accept the default setting and create the user. The Access key ID and Secret access key will be shown on the success screen. We can download the CSV file to keep the key values for later use.</p><p>Here we create an IAM user with full access to all the S3 buckets under your AWS account. In the production environment, we should create a custom policy to restrict the IAM user to access the particular S3 bucket for file uploading only. But for sake of simplicity, we skip this step in this article.</p><p>Now, we have the S3 bucket ready. Let’s build the file upload API with NestJS.</p><h3 id="NestJS-file-uploading"><a href="#NestJS-file-uploading" class="headerlink" title="NestJS file uploading"></a>NestJS file uploading</h3><p>We can create a new NestJS App using Nest CLI.</p><pre><code>nest new ng-nest-upload</code></pre><p>We need to install the aws-sdk package.</p><pre><code>npm install aws-sdk @types/aws-sdk</code></pre><p>We also need to install the type definition of multer</p><pre><code>npm i -D @types/multer</code></pre><blockquote><p>NestJs makes use of <a class="link"   href="https://www.npmjs.com/package/multer" >Multer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> to handle the file upload. Multer is a node.js middleware for handling multipart&#x2F;form-data, which is primarily used for uploading files. Multer extracts the values of the form text fields into a body object. It also creates a new object for file or multiple files in the request.file or request.files object. The body object contains the values of the text fields of the form, and the file or files object contains the files uploaded via the form.</p></blockquote><p>Let’s create the file upload endpoint which captures and saves the file from FileInterceptor.</p><pre><code>  @Post('upload')  @UseInterceptors(FileInterceptor('file'))  async uploadFile(    @UploadedFile() file: Express.Multer.File,    @Request() req,  ): Promise<any> &#123;    const result = await this.fileservice.uploadPublicFile(      file.buffer,      file.originalname,    );    return new ResponseModel(result);   &#125;</code></pre><p>We use two decorators here:</p><ul><li><p>FileInterceptor: It takes the field name as the first parameter to extract the uploaded file. The field name is sent from the client multipart&#x2F;form-data, thus you will need to update it to match the name of the field in your code. The FileInterceptor uses Multer under the hood.</p></li><li><p>UploadedFile: It is used to reference the file payload from request.</p></li></ul><h3 id="Save-the-file-to-S3-Bucket"><a href="#Save-the-file-to-S3-Bucket" class="headerlink" title="Save the file to S3 Bucket"></a>Save the file to S3 Bucket</h3><p>In the above controller, we also use FileService to save the file to S3. In FileService, we use aws-sdk v3 to upload a stream object to an S3 bucket. As shown below, we need to specify 3 parameters</p><ul><li><p>Bucket: name of the S3 bucket</p></li><li><p>Body: a buffer object representing the file</p></li><li><p>Key: Unique key for the file</p></li></ul><pre><code>@Injectable()export class FileService &#123;  async uploadPublicFile(dataBuffer: Buffer, filename: string) &#123;    try &#123;      const s3 = new S3();      const uploadResult = await s3        .upload(&#123;          Bucket: 'file-uploads',          Body: dataBuffer,          Key: `$&#123;uuid()&#125;-$&#123;filename&#125;`        &#125;)        .promise();      return  &#123;        key: uploadResult.Key,        url: uploadResult.Location,      &#125;;    &#125; catch (err) &#123;      console.log(err);      return &#123; key: 'error', url: err.message &#125;;    &#125;  &#125;&#125;</code></pre><p>How is the access configuration to S3 set up in NestJS API? we initialize these configurations at thebootstrap method of main.ts.</p><pre><code>async function bootstrap() &#123;  const app = await NestFactory.create(AppModule);  app.setGlobalPrefix('api');   config.update(&#123;        accessKeyId: '[your S3 Access key]',        secretAccessKey: '[your S3 secret]',        region: '[your S3 region]',      &#125;);  await app.listen(3000);&#125;bootstrap();</code></pre><p>Again for Sake of simplicity, the Access Key and Secret are hardcoded in the above example. In the real-life App, they should come from environment variables.</p><h3 id="Angular-client"><a href="#Angular-client" class="headerlink" title="Angular client"></a>Angular client</h3><p>To upload files from an Angular App, we use the <a class="link"   href="https://medium.com/gitconnected/3-ways-to-access-local-files-from-web-browser-70f57fa57e50" >*File *interface <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> that provides information about files and allows JavaScript on a web page to access their content.</p><p>The following<input type="file"> represents a file select field and a “Choose file” button. This plain button allows users to access local files from a browser. We can use the accept attribute to limit the type of files to upload.</p><pre><code>&lt;input type=&quot;file&quot; [accept]=&quot;acceptedFileExtensions&quot; (change)=&quot;attachFile($event)&quot;&gt;</code></pre><p>Unfortunately, we can’t change the style of the default file select button. The solution is to use another custom button to invoke the default button. In the code below, we hide the default button and style the custom button with CSS class fileButton.</p><pre><code>  <input #fileInput type="file" class="file-input" [accept]="acceptedFileExtensions" (change)="attachFile($event)" />  <div class="row document-type">    <div class="col-xs-12">      <button class="fileButton" action="file" (click)="onSelectFile()" type="submit">Upload document</button>      allowed file types(JPG, PNG, GIF)    </div>  </div></code></pre><p>In the UploadComponent, we use @ViewChild decorator to get a reference to the hidden file select button in the template.</p><pre><code>@ViewChild(‘fileInput’, &#123; static: false &#125;) fileInput: ElementRef | undefined;</code></pre><p>Instead of calling the click handler within the Html template, we can invoke the hidden button click within the component class as below.</p><pre><code>this.fileInput.nativeElement.click();</code></pre><p>To send the file to the NestJS API, we construct the formData and post a request to the NestJS endpoint as below.</p><pre><code>  attachFile(event: any) &#123;    const file: File = event.target.files?.[0];    if (file && this.isValid(file)) &#123;      this.errorMessage = '';      const formData = new FormData();      formData.append('file', file, file.name);      const uploadFileHeaders = new HttpHeaders(&#123;        Accept: `application/json, text/plain, */*`,      &#125;);      this.httpClient        .post('/api/file-upload/upload', formData, &#123;          headers: uploadFileHeaders,        &#125;)        .subscribe(&#123;          next: (response) => &#123;            this.successMessage = `Document $&#123;file.name&#125; is uploaded successfully`;          &#125;,          error: (error) => &#123;            this.errorMessage = `failed to upload document.`;            return error;          &#125;,        &#125;);    &#125;  &#125;</code></pre><p>Please note that the post request header should not include the content type.</p><h3 id="Further-consideration"><a href="#Further-consideration" class="headerlink" title="Further consideration"></a>Further consideration</h3><p>In this contrived example, authentication isn’t being implemented. In real-life applications, you may consider using a JWT token to <a class="link"   href="https://medium.com/gitconnected/maximize-code-security-in-your-nestjs-applications-part-2-be707466b7ea" >enforce security <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> between the Angular client and the backend.</p><p>Another thing to consider is the safety of the uploaded files. Although we have implemented the validation of file extensions in the Angular client, it isn’t enough. It is still possible for a file with malicious content to slip in. A better approach is to set up a staging S3 bucket with an anti-virus scanning service. Any uploaded file will need to be scanned before it is moved to the final bucket for consumption. But this topic is out of the scope of this article and <a class="link"   href="https://aws.amazon.com/blogs/apn/integrating-amazon-s3-malware-scanning-into-your-application-workflow-with-cloud-storage-security/" >here  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>is a good starting point.</p><p>By performing these checks on the uploaded file, you can ensure that it is not malicious and protect your system from potential harm.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In this article, we walk through an end-to-end example of uploading a file to S3 Bucket from an Angular client via NestJS API. With the built-in decorators, NestJS makes it really easy to handle the file-uploading process.</p><p>The complete source code can be found in this <a class="link"   href="https://github.com/sunnyy02/ng-nest-s3-upload" >GitHub repo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;An-End-to-End-Example-using-Angular-and-NestJS&quot;&gt;&lt;a href=&quot;#An-End-to-End-Example-using-Angular-and-NestJS&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Web Development" scheme="http://coffeethinkcode.com/categories/Web-Development/"/>
    
    
    <category term="TypeScript" scheme="http://coffeethinkcode.com/tags/TypeScript/"/>
    
    <category term="Angular" scheme="http://coffeethinkcode.com/tags/Angular/"/>
    
    <category term="NestJS" scheme="http://coffeethinkcode.com/tags/NestJS/"/>
    
  </entry>
  
</feed>
