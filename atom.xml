<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://blog.ourcrmonline.com/atom.xml" rel="self"/>
  
  <link href="http://blog.ourcrmonline.com/"/>
  <updated>2024-07-03T22:00:51.430Z</updated>
  <id>http://blog.ourcrmonline.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dynamic Reference Data in NestJS</title>
    <link href="http://blog.ourcrmonline.com/2024/07/04/dynamic-referencedata/"/>
    <id>http://blog.ourcrmonline.com/2024/07/04/dynamic-referencedata/</id>
    <published>2024-07-03T14:00:00.000Z</published>
    <updated>2024-07-03T22:00:51.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Implement-a-Future-Proof-Solution-for-Your-Reference-Data-Needs"><a href="#Implement-a-Future-Proof-Solution-for-Your-Reference-Data-Needs" class="headerlink" title="Implement a Future-Proof Solution for Your Reference Data Needs"></a>Implement a Future-Proof Solution for Your Reference Data Needs</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/0*9XkmXB16W3mtQm9N"                                     ></p><p>Photo by  <a class="link"   href="https://unsplash.com/@sortino?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" >Joshua Sortino <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  on  <a class="link"   href="https://unsplash.com/photos/worms-eye-view-photography-of-ceiling-LqKhnDzSF-8?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" >Unsplash <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>In most API applications, providing reference data is a common need. The provision of reference data ensures we use consistent values across our application. These data include countries, product categories, or any other categorized information needed by our application.</p><p>A common approach for implementing a reference data API endpoint involves using a switch case within a single service to handle different data types. However, it can quickly become cumbersome and inflexible as the application grows.</p><p>I will explore building a dynamic and maintainable reference data endpoint in NestJS in the article.</p><h3 id="The-Switch-Case-Dilemma"><a href="#The-Switch-Case-Dilemma" class="headerlink" title="The Switch Case Dilemma"></a>The Switch Case Dilemma</h3><p>Let’s imagine a scenario where a switch case is used within our ReferenceDataService to handle different data types. Here’s a simplified example:</p><p>&#x2F;&#x2F; app.controller.ts<br> @Get(‘:dataType’)<br> async getReferenceData(@Param(‘dataType’) dataType: string): Promise&lt;Country[]&gt; {<br>   return await this.referenceDataFactory.getReferenceData(dataType);<br> }  </p><p>&#x2F;&#x2F; reference-data.service.ts<br>@Injectable()<br>export class ReferenceDataService {<br>   constructor( private readonly countryService: CountryService,<br>       private readonly industryService: IndustryService ) { }  </p><p>   async getReferenceData(type: string): Promise&lt;any[]&gt; {<br>       switch (type) {<br>           case ‘country’:<br>               return await this.countryService.getReferenceData();<br>           case ‘industry’:<br>               return await this.industryService.getReferenceData();<br>           default:<br>               throw new Error(<code>Unsupported reference data type: $&#123;type&#125;</code>);<br>       }<br>   }<br>}</p><p>While this works for a few data types, it becomes messy and less maintainable as more types are added. Here are the two main issues:</p><ul><li><strong>Code Clutter:</strong>  With each new data type, we need to inject a new service into the constructor and add a corresponding case in the switch statement within getReferenceData. This leads to a bloated constructor and cluttered logic, making the code harder to read and maintain.</li><li><strong>Tight Coupling:</strong>  The service becomes tightly coupled to the specific concrete services (CountryService, IndustryService). If we introduce new data types with different service implementations, we’d need to modify the ReferenceDataService constructor and switch-case statements, making the code harder to read and reason about.</li></ul><h3 id="Improved-reference-data-service-with-ModuleRef-and-Token-Providers"><a href="#Improved-reference-data-service-with-ModuleRef-and-Token-Providers" class="headerlink" title="Improved reference data service with ModuleRef and Token Providers"></a>Improved reference data service with ModuleRef and Token Providers</h3><p>A more scalable and flexible approach is to leverage NestJS’s dependency injection capabilities and dynamic service retrieval. Here’s how we can achieve this:</p><h3 id="Interface-and-Concrete-Services"><a href="#Interface-and-Concrete-Services" class="headerlink" title="Interface and Concrete Services"></a>Interface and Concrete Services</h3><p>Firstly, we define an interface for our reference data service.</p><p>export interface ReferenceDataService<T extends ReferenceDataItem> {<br> getReferenceData(): Promise&lt;T[]&gt;;<br>}  </p><p>&#x2F;&#x2F; Concrete Service Example (country.service.ts)<br>@Injectable()<br>export class CountryService implements ReferenceDataService<Country> {<br> async getReferenceData(): Promise&lt;Country[]&gt; {<br>   &#x2F;&#x2F; Implement logic to fetch country data<br>   return [];<br> }<br>}</p><p>We can implement the concert services based on the ReferenceDataService interface whenever a new data type is introduced.</p><h3 id="Register-the-concert-services-with-token-providers"><a href="#Register-the-concert-services-with-token-providers" class="headerlink" title="Register the concert services with token providers"></a>Register the concert services with token providers</h3><p>In NestJS, we can define token providers to identify services dynamically. Here, we define two constants for token identifiers (<code>COUNTRY_DATA_TOKEN</code>  and  <code>INDUSTRY_DATA_TOKEN</code>), and register a token for each concrete service:</p><p>const COUNTRY_DATA_TOKEN &#x3D; ‘country’;<br>const INDUSTRY_DATA_TOKEN &#x3D; ‘industry’;<br>@Module({<br> imports: [],<br> controllers: [AppController],<br> providers: [<br>   AppService,<br>   ReferenceDataFactory,<br>   {<br>     provide: COUNTRY_DATA_TOKEN,<br>     useClass: CountryService<br>   },<br>   {<br>     provide: INDUSTRY_DATA_TOKEN,<br>     useClass: IndustryService<br>   }]<br>})<br>export class AppModule { }</p><p>By registering services with specific tokens, we decouple the service implementation from its usage.</p><h3 id="Reference-Data-Service-Refactoring"><a href="#Reference-Data-Service-Refactoring" class="headerlink" title="Reference Data Service Refactoring"></a>Reference Data Service Refactoring</h3><p>Now, we can refactor our ReferenceDataService to retrieve the specific service based on the requested data type as below.</p><p>@Injectable()<br>export class ReferenceDataFactory {<br>   constructor(private readonly moduleRef: ModuleRef) { }  </p><p>   async getReferenceDataService(type: string) {<br>       const service &#x3D; await this.moduleRef.resolve(type) as ReferenceDataService<ReferenceDataItem>;<br>       return await service.getReferenceData();<br>   }<br>}</p><p>In the above code, we inject ModuleRef into the service constructor. Then we use moduleRef.get with the retrieved token to dynamically get the corresponding service instance, and the instance is used to fetch the actual data.</p><p>By utilizing ModuleRef and token providers to dynamically retrieve a specific reference data service instance, we eliminate the need for individual service injection in the constructor and the switch case. When introducing a new data type, we don’t need to change the ReferenceDataFactory service!</p><h3 id="Consuming-the-Service"><a href="#Consuming-the-Service" class="headerlink" title="Consuming the Service:"></a>Consuming the Service:</h3><p>Now, in our controller, we can inject the ReferenceDataFactory and dynamically retrieve the desired data:</p><p>@Get(‘:dataType’)<br> async getIndustries(@Param(‘dataType’) dataType: string): Promise&lt;ReferenceDataItem[]&gt; {<br>   return await this.referenceDataFactory.getReferenceDataService(dataType);<br> }</p><p>This approach is much easier to maintain, allowing us to handle new data types as our application evolves.</p><p>Although NestJS is used in this article, the same pattern applies to other programming languages and frameworks. I will write a new post to provide a similar implementation using .Net later. You can find the source code in the post  <a class="link"   href="https://github.com/sunnyy02/nest-reference-data/tree/refactor" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>I hope you find this post useful. Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Implement-a-Future-Proof-Solution-for-Your-Reference-Data-Needs&quot;&gt;&lt;a href=&quot;#Implement-a-Future-Proof-Solution-for-Your-Reference-Data</summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    
    <category term="NestJS" scheme="http://blog.ourcrmonline.com/tags/NestJS/"/>
    
  </entry>
  
  <entry>
    <title>Friend or Foe? Examining the Pros and Cons of Feature Toggles and Trunk-Based Development</title>
    <link href="http://blog.ourcrmonline.com/2024/06/21/friend-or-foe-examining-the-pros-and-cons-of-feature-toggles/"/>
    <id>http://blog.ourcrmonline.com/2024/06/21/friend-or-foe-examining-the-pros-and-cons-of-feature-toggles/</id>
    <published>2024-06-20T14:00:00.000Z</published>
    <updated>2024-06-29T04:15:23.417Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*md8ptcB7nbqro_81fuizyg.png"                                     ></p><p>My experience at  <a class="link"   href="https://www.thoughtworks.com/en-au" >ThoughtWorks <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, a pioneer in Agile development, exposed me to “<a class="link"   href="https://www.thoughtworks.com/en-au/insights/blog/digital-transformation/Digital-talent-defaults-for-agile-org" >sensible defaults <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>” — a set of best practices that ensure efficient software delivery. Two of the most impactful practices I learned are Feature Toggles and Trunk-Based Development (TBD). These approaches are considered foundational to ThoughtWorks’ methodology due to their effectiveness in streamlining development and enabling rapid iteration.</p><p>Although TBD is somehow debatable, even within ThoughtWorks, there is no double that it delivers lots of benefits when used in the right project with proper implementation.</p><p>In this blog, I’ll discuss Feature Toggles and TBD, their benefits, and when they should and shouldn’t be used.</p><h2 id="What-is-a-feature-toggle"><a href="#What-is-a-feature-toggle" class="headerlink" title="What is a feature toggle?"></a>What is a feature toggle?</h2><blockquote><p><em>Feature Toggles (often also refered to as Feature Flags) is a technique, allowing teams to modify system behavior without changing code.</em></p></blockquote><p>Feature toggle allows specific features of an application to be activated or deactivated at will. This allows developers to safely “toggle” new features on or off for testing. Feature toggles have many use cases beyond testing, such as the targeted rollout or quick rollback of new features in production, experimentation, canary releases, operations, or activation of premium features.</p><p>Feature Toggles complement Trunk-Based Development by safely integrating incomplete features into the main branch. This way, the main branch is always in a deployable state, and teams can work on features without long-lived branches.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Let’s consider a simple .NET Core application where we want to toggle a new feature.</p><p><strong>Setting up the Feature Toggle</strong></p><p>First, we define a feature toggle service. For simplicity, we can use a configuration-based approach.</p><p>&#x2F;&#x2F; IFeatureToggleService.cs<br>public interface IFeatureToggleService<br>{<br>    bool IsFeatureEnabled(string feature);<br>}</p><p>&#x2F;&#x2F; FeatureToggleService.cs<br>public class FeatureToggleService : IFeatureToggleService<br>{<br>    private readonly IConfiguration _configuration; public FeatureToggleService(IConfiguration configuration)<br>    {<br>        _configuration &#x3D; configuration;<br>    } public bool IsFeatureEnabled(string feature)<br>    {<br>        return _configuration.GetValue<bool>($”Features:{feature}”);<br>    }<br>}</p><p><strong>Configure and use the Feature Toggle</strong></p><p>In  <code>appsettings.json</code>, we add our feature flags.</p><p>{<br>  “Features”: {<br>    “NewFeature”: true<br>  }<br>}</p><p>Here, we store the feature toggle setting in the config file for simplicity. In real-world projects, it is recommended that the settings be stored in a database. By storing the feature toggle settings in the database, you can change the state of a feature (on&#x2F;off) and see those changes reflected instantly within your application.</p><p>This is particularly important because it allows product owners and stakeholders to have instant control over the visibility of new features, enabling them to be showcased and explored in isolation before being released to production users.</p><p>To use the feature toggle service is as simple as injecting the feature toggle service and an if statement, as in the example below.</p><p> public HomeController(IFeatureToggleService featureToggleService)<br>    {<br>        _featureToggleService &#x3D; featureToggleService;<br>    } public IActionResult Index()<br>    {<br>        if (_featureToggleService.IsFeatureEnabled(“NewFeature”))<br>        {<br>            ViewBag.Message &#x3D; “New Feature is Enabled!”;<br>        }<br>        else<br>        {<br>            ViewBag.Message &#x3D; “Welcome to our website!”;<br>        } return View();<br>    }<br>}</p><h2 id="When-Not-to-Use-Feature-Toggles"><a href="#When-Not-to-Use-Feature-Toggles" class="headerlink" title="When Not to Use Feature Toggles"></a><strong>When Not to Use Feature Toggles</strong></h2><p>While feature toggles offer flexibility, they shouldn’t be a permanent solution. Here’s when to consider alternatives:</p><ul><li><strong>Core Functionality:</strong>  Don’t toggle essential features that define your application’s core behavior.</li><li><strong>Complex Logic:</strong>  Avoid intricate logic based on toggles, which can lead to maintenance headaches.</li><li><strong>Short-Lived Features</strong>: If a feature is very short-lived or experimental, the overhead of adding and managing a toggle might not be worth it.</li></ul><h2 id="Trunk-Based-Development"><a href="#Trunk-Based-Development" class="headerlink" title="Trunk-Based Development"></a>Trunk-Based Development</h2><p>Trunk-based development (TBD) is a source-control branching model in which developers integrate small, frequent changes into the main branch (trunk). With trunk-based development, your team integrates changes directly into the main branch (trunk), whereas other branching strategies like GitFlow involve integrating into multiple feature branches.</p><p>TBD doesn’t mean we completely ditch feature branches. Instead, these branches are kept short-lived. We can still use them for code review, merge requests, and branch builds to get quick feedback. The key difference is that you avoid long-lived branches like release branches.</p><p>TBD and feature toggles are complementary practices used in Agile development. We can use feature toggles in development without adapting TBD, but they are often combined together, as the feature toggle is a must-have tool for TBD.</p><h2 id="Prerequisite-for-TBD"><a href="#Prerequisite-for-TBD" class="headerlink" title="Prerequisite for TBD"></a>Prerequisite for TBD</h2><p>Trunk-based development can be a very efficient and powerful tool only if the team meets the conditions below:</p><ul><li>A capable team with a high level of trust between the members. TBD often works well with a small and skillful team. It is key to have a strong dev team. Without it, the TBD will cause more harm than good.</li><li>Automated unit and integration testing in place with good test coverage.</li><li>A solid CI pipeline</li></ul><p>Implementing trunk-based development without those is a recipe for disaster. The common symptoms include frequent broken builds and code churn.</p><p>Some can argue that the benefits of Trunk-Based Development (TBD) are more a result of its prerequisites, like good unit test coverage, rather than TBD itself. This argument is not wrong. However, TBD acts as a framework that enforces practices like good test coverage, continuous integration, early feedback, and clear communication. These practices, in turn, create an environment where good unit test coverage flourishes and delivers its benefits.</p><h2 id="TBD-only-works-with-a-strong-team"><a href="#TBD-only-works-with-a-strong-team" class="headerlink" title="TBD only works with a strong team"></a>TBD only works with a strong team</h2><p>The success of trunk-based development hinges on a strong, well-coordinated team. Without a culture of clear communication, mutual respect, and a willingness to learn from each other, especially for less experienced developers, the challenges of trunk-based development can quickly become overwhelming.</p><p>The clear communication between teams is essential. The team members must talk openly to fix problems quickly and share any changes affecting the main codebase (trunk).</p><p>Another good practice that complements TBD is  <strong>pair programming</strong>. As developers work together, code reviews become part of the development process. This allows for immediate feedback, early bug detection, and knowledge sharing. However, to avoid burnout, pair programming should be an opt-in approach. Developers should choose when collaboration can be most beneficial.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a><strong>Conclusion</strong></h2><p>Feature toggles and trunk-based development empower developers to deliver features faster and more reliably. By understanding their benefits and limitations, we can leverage them effectively to streamline our development process and deliver faster and more frequently.</p><p>Remember, feature toggles are for temporary control, not a long-term architectural solution. In other words, don’t forget to remove the feature toggle in the end! Use them wisely to keep your application on the cutting edge.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;https://miro.medium.co</summary>
      
    
    
    
    <category term="Software Development" scheme="http://blog.ourcrmonline.com/categories/Software-Development/"/>
    
    <category term="Agile" scheme="http://blog.ourcrmonline.com/categories/Software-Development/Agile/"/>
    
    
    <category term="Best Practice" scheme="http://blog.ourcrmonline.com/tags/Best-Practice/"/>
    
    <category term="Software development" scheme="http://blog.ourcrmonline.com/tags/Software-development/"/>
    
    <category term="Agile" scheme="http://blog.ourcrmonline.com/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title>Embrace Secure RESTful APIs with NestJS on Educative.io</title>
    <link href="http://blog.ourcrmonline.com/2024/06/15/restapi/"/>
    <id>http://blog.ourcrmonline.com/2024/06/15/restapi/</id>
    <published>2024-06-14T14:00:00.000Z</published>
    <updated>2024-06-29T04:21:52.462Z</updated>
    
    <content type="html"><![CDATA[<p>The course is online now!</p><p>As a seasoned developer, I have worked on various frameworks and technologies. NestJS is my favorite. It is easy to start but challenging to master. Its design principles are simple, and it combines sophisticated features with great community support. With its versatility and power, NestJS has always been my reliable partner, whether crafting APIs or architecting intricate applications.</p><p>That’s why I’m thrilled to announce the launch of my first online course, “Building Secure RESTful APIs with NestJS: A Practical Guide(<a class="link"   href="https://www.educative.io/courses/building-secure-restful-apis-with-nestjs-a-practical-guide)%E2%80%9D" >https://www.educative.io/courses/building-secure-restful-apis-with-nestjs-a-practical-guide)” <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on the esteemed <a class="link"   href="https://www.educative.io/learn/home" >Educative  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>platform.</p><h2 id="Why-another-NestJS-course"><a href="#Why-another-NestJS-course" class="headerlink" title="Why another NestJS course?"></a>Why another NestJS course?</h2><p>Since NestJS is one of the most popular NodeJS frameworks, many NestJS online courses are readily available in the market. You might be wondering why you chose this one. Here’s what sets this course apart:</p><h3 id="Text-based-learning-with-Educative-io"><a href="#Text-based-learning-with-Educative-io" class="headerlink" title="Text-based learning with Educative.io"></a>Text-based learning with Educative.io</h3><p>Educative offers a unique interactive course platform. What truly differentiates it from other popular online learning platforms is its **text-based **learning.</p><p>Combined with practical application, text-based learning has demonstrated effectiveness in technical education. On average, reading surpasses video speed, with videos typically spoken at 150 words per minute compared to humans’ reading pace of 250 words per minute.</p><p>Personally, I found the interactive text-based learning environment to be more efficient than the video-based courses. Focusing on the course content is much easier, and practicing the theory using the embedded coding editor is a big plus.</p><h3 id="Online-learning-within-the-browser"><a href="#Online-learning-within-the-browser" class="headerlink" title="Online learning within the browser"></a>Online learning within the browser</h3><p>While many online courses require downloading coding environments, extra packages, and various programs before beginning, Educative streamlines the process with its integrated coding environment within the browser.</p><p>In this course, we have 59 code playgrounds for hands-on practice. You can build a new NestJS application, edit the code online, write new unit tests, or create a new docker image and deploy it to AWS ECS with a free trial AWS account. All these tasks&#x2F; practices are provided within the browser.</p><h3 id="A-beginner-course-that-goes-beyond"><a href="#A-beginner-course-that-goes-beyond" class="headerlink" title="A beginner course that goes beyond"></a>A beginner course that goes beyond</h3><p>While the course is beginner-friendly, it also delves deep into advanced security concepts, making it suitable for developers of all skill levels. Whether you’re just starting your journey or looking to advance your skills, this course offers something valuable.</p><h3 id="What-to-Expect-from-Our-Course"><a href="#What-to-Expect-from-Our-Course" class="headerlink" title="What to Expect from Our Course"></a>What to Expect from Our Course</h3><p>“<a class="link"   href="https://www.educative.io/courses/building-secure-restful-apis-with-nestjs-a-practical-guide" >Building Secure RESTful APIs with NestJS: A Practical Guide <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>” is designed to equip you with the knowledge and skills to develop secure and scalable APIs using NestJS, a powerful Node.js framework. While theoretical knowledge is essential, this course emphasizes practical application. We’ll learn the concepts and see how they are applied in real-world scenarios, preparing us for challenges we’ll encounter in real-world projects.</p><p>Here’s a sneak peek into what you’ll learn:</p><ul><li><p><strong>NestJS Fundamentals</strong>: We’ll gain a solid understanding of NestJS, its architecture, and the powerful tools it provides for building modern web APIs.</p></li><li><p><strong>RESTful API Design</strong>: Learn how to design RESTful APIs, adhering to best practices and industry standards to create efficient and user-friendly APIs.</p></li><li><p><strong>Database Integration</strong>: We’ll explore database integration using MySQL, a popular relational database management system, and TypeORM, a powerful Object-Relational Mapping (ORM) framework.</p></li><li><p><strong>Authentication and Security</strong>: We’ll cover implementing secure authentication methods to protect our APIs and user data.</p></li><li><p><strong>Validation and Serialization</strong>: Discover how to validate incoming data and serialize outgoing responses, ensuring data integrity and consistency.</p></li><li><p><strong>Testing Strategies</strong>: We’ll master the art of writing unit and end-to-end tests to ensure the reliability and correctness of our NestJS applications. (End-to-end testing evaluates the functionality of an entire application to ensure it works correctly from start to finish.)</p></li><li><p><strong>Deployment to AWS</strong>: Learn how to deploy our NestJS applications to AWS ECS (Amazon Elastic Container Service) for seamless scalability and reliability in production environments.</p></li></ul><h2 id="Start-the-Learning-Journey"><a href="#Start-the-Learning-Journey" class="headerlink" title="Start the Learning Journey"></a>Start the Learning Journey</h2><p>Whether you’re a seasoned developer looking to improve your skills or a newcomer eager to explore NestJs development, <a class="link"   href="https://www.educative.io/courses/building-secure-restful-apis-with-nestjs-a-practical-guide" >the course <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> has something for everyone. Its practical approach, focus on best practices, comprehensive content, and hands-on exercises will equip you to tackle real-world challenges and confidently build secure and scalable APIs.</p><p>If you are thinking of enhancing your skills and advancing your career, Enroll now with Educative.io and embark on the journey to becoming a proficient NestJS developer!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The course is online now!&lt;/p&gt;
&lt;p&gt;As a seasoned developer, I have worked on various frameworks and technologies. NestJS is my favorite. It</summary>
      
    
    
    
    <category term="Programming" scheme="http://blog.ourcrmonline.com/categories/Programming/"/>
    
    
    <category term="TypeScript" scheme="http://blog.ourcrmonline.com/tags/TypeScript/"/>
    
    <category term="NestJS" scheme="http://blog.ourcrmonline.com/tags/NestJS/"/>
    
    <category term="Course" scheme="http://blog.ourcrmonline.com/tags/Course/"/>
    
  </entry>
  
  <entry>
    <title>Exploring Etag and If-Match in NestJS</title>
    <link href="http://blog.ourcrmonline.com/2024/03/05/exploring-etag/"/>
    <id>http://blog.ourcrmonline.com/2024/03/05/exploring-etag/</id>
    <published>2024-03-04T14:00:00.000Z</published>
    <updated>2024-06-29T04:15:06.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Optimizing-Concurrency-Handling-with-ETag-and-If-Match"><a href="#Optimizing-Concurrency-Handling-with-ETag-and-If-Match" class="headerlink" title="Optimizing Concurrency Handling with ETag and If-Match"></a>Optimizing Concurrency Handling with ETag and If-Match</h3><p>HTTP headers play an important role in building an efficient RESTful API. Two such headers,  <code>ETag</code>  and  <code>If-Match/If-None-Match</code>, are instrumental in handling concurrency and caching in RESTful APIs.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1091/1*G6CWym8fXby1ip-skwYaXg.png"                                     ></p><p>Photo by  <a class="link"   href="https://unsplash.com/@neonbrand?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" >Kenny Eliason <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  on  <a class="link"   href="https://unsplash.com/photos/black-cat-sitting-on-grey-rug-UETa8mfu38k?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" >Unsplash <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>In this post, we will delve into  <code>Etag</code>  and  <code>If-Match/If-None-Match</code>  headers, and explore how to use them in NestJS. Correctly using them will allow us to design a robust RESTful API capable of handling concurrent transactions.</p><h2 id="Understanding-ETag-and-If-Match"><a href="#Understanding-ETag-and-If-Match" class="headerlink" title="Understanding ETag and If-Match"></a>Understanding ETag and If-Match</h2><p>An Entity Tag, or  <code>ETag</code>, is used to identify a specific version of a resource uniquely. It is a hash or identifier associated with the state of a resource on the server. There are two types of Etag:  <a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Conditional_requests#weak_validation" >weak <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  and  <a class="link"   href="https://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation" >strong <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. The weak Etag allows for flexibility in representing semantically equivalent content. Strong Etag is suitable for the resource representation that is byte-for-byte identical for all users.</p><p>When a client requests a resource, the server attaches an ETag to the response. Subsequent requests from the client can include this ETag in the  <code>If-None-Match</code>  header. The header is used to determine whether the resource has changed, the server responds with a “<code>304 Not Modified</code>” status if the resource has not changed, reducing unnecessary data transfer and enhancing performance.</p><p>On the other hand, the  <code>If-Match</code>  header is employed for optimistic concurrency control. It can ensure that an operation, such as an update or deletion, is only performed if the provided  <code>ETag</code>  matches the current state of the resource on the server.</p><p>The significance of  <code>ETag</code>  and  <code>If-Match</code>  lies in their ability to prevent conflicting updates. In scenarios where multiple clients modify the same resource concurrently, these headers act as safeguards.  <code>ETag</code>  enables efficient caching and reduces unnecessary data transfers while  <code>If-Match</code>  ensuring that updates occur only when the client possesses the latest resource version. Together, they contribute to a more resilient interaction between clients and servers in RESTful APIs.</p><h2 id="Generate-and-return-an-Etag"><a href="#Generate-and-return-an-Etag" class="headerlink" title="Generate and return an Etag"></a>Generate and return an Etag</h2><p>To generate an  <code>ETag</code>  in NestJS using the  <code>[etag](https://github.com/jshttp/etag)</code>  library, follow the below steps to install and import the library.</p><p>&#x2F;&#x2F; install it<br>npm install etag<br>&#x2F;&#x2F; import it<br>import * as etag from ‘etag’;</p><p>Then, we can generate an  <code>Etag</code>  with a one-line call.</p><p>const data &#x3D; &#x2F;&#x2F; your data here;<br>const generatedETag &#x3D; etag(data);</p><p>Please note that the etag function only accepts string, buffer, or steams. We can’t pass objects or arrays directly, but a workaround exists below.</p><p>const arrayData &#x3D; [1, 2, 3];<br>const etagForArray &#x3D; etag(JSON.stringify(arrayData));  </p><p>const objectData &#x3D; { key: ‘value’ };<br>const etagForObject &#x3D; etag(JSON.stringify(objectData));</p><p>Then, we can return the  <code>Etag</code>  in the response header for a GET request.</p><p> @Get(‘etag’)<br>  async GetResource(@Res({ passthrough: true }) res: Response) {<br>    &#x2F;&#x2F; fetching resource data<br>    const resourceData &#x3D; await this.fetchResourceData();  </p><pre><code>// Attach ETag to the response header  res.set(&#39;ETag&#39;, etag(JSON.stringify(resourceData)));  return resourceData;  </code></pre><p>  }</p><p>Please note that we need to set the  <code>passthrough</code>  option to true in the  <code>@Res(&#123; passthrough: true &#125;)</code>  decorator because injecting the  <code>@Res</code>  will disable the default route handling by default.</p><h2 id="Use-Etag-for-Caching"><a href="#Use-Etag-for-Caching" class="headerlink" title="Use Etag for Caching"></a>Use Etag for Caching</h2><p>One of the primary purposes of  <code>Etag</code>  is caching. After calling the GET the first time, the client retrieves the  <code>Etag</code>  in response, and then the subsequent requests can include this  <code>ETag</code>  in the  <code>If-None-Match</code>  header.</p><h3 id="an-example-of-if-none-match-header-in-the-request"><a href="#an-example-of-if-none-match-header-in-the-request" class="headerlink" title="an example of if-none-match header in the request"></a>an example of if-none-match header in the request</h3><p>If-None-Match: “bfc13a64729c4290ef5b2c2730249c88ca92d82d”</p><p>In the GET endpoint, add a check to compare the  <code>Etag</code>  in  <code>If-None-Match</code>  to determine whether a resource has been modified. We can return a 304 Not Modified response if the resource has not been changed.</p><p> @Get()<br>  async getResource( @Res({ passthrough: true }) res: Response,<br>    @Headers(‘if-none-match’) ifNoneMatch: string, ){<br>    &#x2F;&#x2F; fetching the resource data<br>    const resourceData &#x3D; await this.fetchResourceData();  </p><pre><code>// Check If-None-Match header to determine if the resource has changed  if (ifNoneMatch &amp;&amp; ifNoneMatch === etag(JSON.stringify(resourceData))) &#123;    // Resource has not changed, return 304 Not Modified    res.status(HttpStatus.NOT_MODIFIED).send();    return;  &#125;  // Return the resource data with the current ETag  </code></pre><p>  }</p><p>Upon receiving the response with a 304 status, most modern browsers will fetch the resource from the local cache.</p><h2 id="If-Match-for-Optimistic-Concurrency-Control"><a href="#If-Match-for-Optimistic-Concurrency-Control" class="headerlink" title="If-Match for Optimistic Concurrency Control"></a>If-Match for Optimistic Concurrency Control</h2><p>The  <code>If-Match</code>  header is commonly used to facilitate optimistic concurrency control. What exactly is optimistic concurrency control?</p><blockquote><p>Optimistic concurrency control is a strategy for managing multiple users attempting to modify the same piece of data simultaneously. Instead of locking the data and preventing others from making changes, optimistic concurrency assumes that conflicts are rare. Users can make changes independently, but before saving their modifications, the system checks if someone else has modified the data. If no changes conflict, the modifications are accepted; otherwise, the system prompts users to resolve the inconsistency.</p></blockquote><p>Now, let’s see how to implement it in a PUT request.</p><p> @Put(‘:id’)<br>  async updateResource(<br>    @Res() res: Response,<br>    @Param(‘id’) id: string,<br>    @Body() updateData: any,<br>    @Headers(‘if-match’) ifMatch: string, &#x2F;&#x2F; Extract If-Match header<br>  ): Promise<void> {<br>    &#x2F;&#x2F; Simulate fetching the resource data from the database<br>    const currentResourceData &#x3D; await this.getResourceData(id);<br>    const currentEtag &#x3D; etag(JSON.stringify(currentResourceData));  </p><pre><code>// Validate If-Match header against the current ETag  if (ifMatch.toString() !== currentEtag.toString()) &#123;    // ETag mismatch, return Precondition Failed status    res.status(HttpStatus.PRECONDITION_FAILED).send();    return;  &#125;  </code></pre><p>…<br>}</p><p>When a client sends a request to update a resource, the client includes the current  <code>ETag</code>  of the resource in the  <code>If-Match</code>  header. The server then checks if the provided  <code>ETag</code>  matches the current state of the resource. If there’s a match, the update proceeds; otherwise, the server returns a “<code>412 Precondition Failed</code>” status, indicating that another party has modified the resource.</p><p>The same approach can be used not only for PUT but also applicable to DELETE and PATCH requests.</p><h2 id="If-Match-vs-If-None-Match"><a href="#If-Match-vs-If-None-Match" class="headerlink" title="If-Match vs If-None-Match"></a>If-Match vs If-None-Match</h2><p>It is worth highlighting that  <code>If-Match</code>  and  <code>If-None-Match</code>  headers serve different purposes in the context of  <code>ETags</code>. Here’s a breakdown of their differences:</p><p><code>**If-Match**</code> <strong>Header</strong></p><ul><li>It is used in requests to operate (e.g., update or delete) only if the provided  <code>ETag</code>  matches the current ETag of the resource on the server.</li><li>If the ETag matches, the operation is performed; otherwise, the server responds with a “<strong>412</strong>  Precondition Failed” status, indicating that another party modified the resource.</li></ul><p><code>**If-None-Match**</code> <strong>Header</strong></p><ul><li>It is used in requests to get a resource only if its ETag does not match the specified ETag(s).</li><li>If the ETag matches, the server responds with a “<strong>304</strong>  Not Modified” status, indicating that the client’s cached version is still valid and there’s no need to transfer the resource again.</li></ul><p>We discussed the usage of Etag and If-match&#x2F;if-none-match in this post. In many cases, it is a good practice to use a combination of etag and if-match for optimistic concurrency control. I hope you have learned one thing or two in this post.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Optimizing-Concurrency-Handling-with-ETag-and-If-Match&quot;&gt;&lt;a href=&quot;#Optimizing-Concurrency-Handling-with-ETag-and-If-Match&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    
    <category term="NestJS" scheme="http://blog.ourcrmonline.com/tags/NestJS/"/>
    
    <category term="Security" scheme="http://blog.ourcrmonline.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Durandal vs Angular</title>
    <link href="http://blog.ourcrmonline.com/2024/02/05/durandal-angular/"/>
    <id>http://blog.ourcrmonline.com/2024/02/05/durandal-angular/</id>
    <published>2024-02-04T14:00:00.000Z</published>
    <updated>2024-07-04T01:11:30.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-has-changed-for-Single-Page-App-in-the-last-ten-years"><a href="#What-has-changed-for-Single-Page-App-in-the-last-ten-years" class="headerlink" title="What has changed for Single Page App in the last ten years"></a>What has changed for Single Page App in the last ten years</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1046/1*Xbq4XJa6oQ-10YLsjAF-bQ.png"                                     ></p><p>Have you heard of Durandal? If you’re not a seasoned JS developer, you might not have. A decade ago, it was a popular single-page app (SPA) framework.</p><p>Back then, I worked on a significant project using Durandal for more than a year. I liked it. It was small, flexible, and easy to expand.</p><p>A decade is a long time in IT. Now, Durandal is no longer in use. The new generation of front-end JS frameworks is dominating the world of web applications.</p><p>Recently, I had a task to make a minor improvement to an old Durandal application. It felt like reconnecting with an old friend. Naturally, I compared it with the current JS framework, Angular 16.</p><p>As you can guess, Angular has surpassed Durandal in almost every aspect. However, many of the design concepts in Durandal still hold their own. Looking at these comparisons, it’s clear how much Single Page App (SPA) frameworks have evolved over the past decade. It’s kind of fascinating to see how far we’ve come.</p><h3 id="Framework-overview"><a href="#Framework-overview" class="headerlink" title="Framework overview"></a>Framework overview</h3><p>Durandal was created as a lightweight SPA framework focusing on simplicity and modularity. It relied on a combination of libraries like  <code>Knockout</code>  and  <code>Require.js</code>  to achieve its goals.</p><p>Durandal provides the essential features for making SPAs. It’s also designed to be easily integrated with other libraries.</p><p>Angular, on the other hand, is a complete package. That’s why it is called “batteries-included.” This means that Angular provides everything we need to build a rich single-page web app well-suited for large and complex projects.</p><h3 id="AMD-vs-ES6-module"><a href="#AMD-vs-ES6-module" class="headerlink" title="AMD vs ES6 module"></a>AMD vs ES6 module</h3><p>Durandal used the Asynchronous Module Definition (AMD) pattern for module loading and dependency management. One example usage of AMD is as below:</p><p>&#x2F;&#x2F; Define a module using AMD in Durandal<br>define([‘knockout’], function(ko) {<br>    var viewModel &#x3D; {<br>        message: ko.observable(‘Hello, Durandal!’)<br>    };<br>    return viewModel;<br>});</p><p>Angular, as well as other new JS frameworks, use the ES6 Module. Unlike AMD, ES6 modules are native to JavaScript, eliminating the need for additional loaders or libraries like Require.js. ES6 modules allow for static analysis, which enables better tooling, tree-shaking, and improved performance. By default, ES6 modules provide better encapsulation, making managing dependencies easier and preventing unintentional conflicts. Here is an example of usage.</p><p>&#x2F;&#x2F; Import the module<br>import { greet } from ‘.&#x2F;myModule’;  </p><p>&#x2F;&#x2F; Angular Component<br>@Component({<br>  selector: ‘app-greeting’,<br>})<br>export class GreetingComponent {<br>  message: string;  </p><p>  constructor() {<br>    &#x2F;&#x2F; Use the imported function<br>    this.message &#x3D; greet(‘John’);<br>  }<br>}</p><h3 id="Component-Based-Architecture"><a href="#Component-Based-Architecture" class="headerlink" title="Component-Based Architecture"></a>Component-Based Architecture</h3><p>Component-based architecture is a fundamental design paradigm in modern SPA frameworks. It involves breaking down the user interface into reusable, self-contained components, fostering modularity and maintainability in web applications.</p><p>Durandal has the concept of the component but lacks the structured component-based architecture seen in modern SPAs.</p><p>Angular emphasizes a component-based architecture and enforces a structured development approach by encapsulating functionality within reusable components, promoting a clear separation of concerns and maintainability in web applications.</p><h3 id="State-Management"><a href="#State-Management" class="headerlink" title="State Management"></a>State Management</h3><p>Durandal uses a combination of view models, routing, lifecycle methods, and storage options to help us manage and maintain the state. As the application grows, tracking and managing the state transitions between different components and views may become more challenging.</p><p>There are many state management frameworks in Angular. The most popular one is NgRx, a state management library inspired by Redux. It offers a structured way to manage the application state, making it easier to handle complex data flows.</p><h3 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h3><p>Durandal doesn’t provide a dedicated dependency injection container but offers a modular structure and integration with AMD (Asynchronous Module Definition) loaders like  <code>Require.js</code>.</p><p>Angular’s Dependency Injection (DI) is a powerful mechanism that lets us manage and inject dependencies effortlessly. With its built-in DI, we can keep our code clean, organized, and testable, making it an excellent feature for building robust web applications.</p><p>&#x2F;&#x2F; Angular component with dependency injection<br>import { Component } from ‘@angular&#x2F;core’;<br>import { DataService } from ‘.&#x2F;data.service’;  </p><p>@Component({<br>  selector: ‘app-example’,<br>  template: ‘<p></p>‘,<br>})<br>export class ExampleComponent {<br>  constructor(private dataService: DataService) {<br>    this.message &#x3D; this.dataService.getMessage();<br>  }<br>}</p><h3 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h3><p>Durandal employed two-way data binding with  <code>Knockout</code>, allow it to handle dynamic UI updates.</p><!-- Durandal binding -->  <p>var vm &#x3D; {<br>    message &#x3D; ko.observable(‘Hello world’)<br>};<br>ko.applyBindings(vm);</p><p>Angular provides its own two-way data binding mechanism, and it has improved performance and flexibility over time.</p><!-- Angular HTML template -->  <p>&lt;input [(ngModel)]&#x3D;”message” &#x2F;&gt;  </p><p></p><p>Other modern frontend JS frameworks like React utilize one-way data binding, which enhances performance by updating the data state through events.</p><h3 id="Tooling-CLI-and-performance-optimization"><a href="#Tooling-CLI-and-performance-optimization" class="headerlink" title="Tooling, CLI, and performance optimization"></a>Tooling, CLI, and performance optimization</h3><p>Durandal kept things simple and modular but didn’t have a CLI tool. It also doesn’t come with the built-in performance optimization feature.</p><p>Unlike Angular, it didn’t have server-side rendering support out of the box.</p><p>Angular comes with its CLI — a rich toolkit for building, testing, and deploying Angular apps. It makes life easier for developers and supercharges productivity.</p><p>Angular 16 takes it up a notch with cool performance tricks like AOT compilation and improved tree-shaking. This means quicker load times and smaller bundles, making the app faster overall.</p><p>Angular 16 also rolled out the improved Angular Universal, giving us a proper server-side rendering capability. This makes your pages load faster and boosts the SEO.</p><p>These significant advancements have levelled up modern Single Page Apps (SPAs). They’re powerful, easy to maintain, and super fast. Comparing Angular with Durandal is like comparing a fancy new sports car to an older model. Durandal was remarkable in its time, but the new generation SPA frameworks have taken things to a whole new level!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;What-has-changed-for-Single-Page-App-in-the-last-ten-years&quot;&gt;&lt;a href=&quot;#What-has-changed-for-Single-Page-App-in-the-last-ten-years&quot; cl</summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    <category term="Programming" scheme="http://blog.ourcrmonline.com/categories/Web-Development/Programming/"/>
    
    
    <category term="Angular" scheme="http://blog.ourcrmonline.com/tags/Angular/"/>
    
    <category term="Durandal" scheme="http://blog.ourcrmonline.com/tags/Durandal/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Index Signature Explained</title>
    <link href="http://blog.ourcrmonline.com/2024/02/01/typescript-index-signature-explained/"/>
    <id>http://blog.ourcrmonline.com/2024/02/01/typescript-index-signature-explained/</id>
    <published>2024-01-31T14:00:00.000Z</published>
    <updated>2024-06-29T04:22:39.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript-Index-Signature-Explained"><a href="#TypeScript-Index-Signature-Explained" class="headerlink" title="TypeScript Index Signature Explained"></a>TypeScript Index Signature Explained</h1><p>Demystifying TypeScript Index Signatures for Enhanced Code Flexibility</p><p><img src="https://cdn-images-1.medium.com/max/4976/1*U1VoIpghZrD4mkPg7MfZJw.png" alt="Photo by [Maksym Kaharlytskyi](https://unsplash.com/@qwitka?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash) on [Unsplash](https://unsplash.com/photos/file-cabinet-Q9y3LRuuxmg?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash)"><em>Photo by <a class="link"   href="https://unsplash.com/@qwitka?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" >Maksym Kaharlytskyi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on <a class="link"   href="https://unsplash.com/photos/file-cabinet-Q9y3LRuuxmg?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" >Unsplash <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p><p>Index signatures in TypeScript provide a way to define a dynamic data structure when the properties of an object aren’t known beforehand, but the types of properties are known. They allow for dynamic property access and are particularly useful when working with objects with a variable set of keys.</p><p>This post will delve into the index signature, how to use it, and when to use it in TypeScript.</p><h3 id="What-is-the-index-signature"><a href="#What-is-the-index-signature" class="headerlink" title="What is the index signature?"></a>What is the index signature?</h3><p>An index signature is defined using square brackets [] and the type for keys, followed by a colon and the type for corresponding values. It enables TypeScript to understand and enforce the expected structure of the object.</p><pre><code>interface MyStats &#123;  [key: string]: number;&#125;const scores: MyStats = &#123;  total: 50,  average:80&#125;// index siganture enforce the type constraint// here, the value must be a numberconst scores2: MyStats = &#123;  total: &quot;50&quot;, //Type &#39;string&#39; is not assignable to type &#39;number&#39;.(2322)  average:80&#125;</code></pre><p>In this example, MyStats can have any string keys, and the values associated with those keys must be of type number.</p><p>The syntax for index signatures involves using the [] notation within the interface or type declaration. The below example shows the same index signature for interface and type.</p><pre><code>interface Car &#123;  [key: string]: boolean;&#125;type CarType = &#123;  [key: string]: boolean;&#125;</code></pre><p>Note that index signatures can use different key types, such as string, number, symbol or literal typeand the associated value type can be any valid TypeScript type.</p><h3 id="Mixing-an-index-signature-with-explicit-members"><a href="#Mixing-an-index-signature-with-explicit-members" class="headerlink" title="Mixing an index signature with explicit members"></a>Mixing an index signature with explicit members</h3><p>In TypeScript, we can mix an index signature with explicit member declarations. It is helpful for cases requiring a combination of known and dynamic properties.</p><pre><code>interface CarConfiguration &#123;  [feature: string]: number;  price: number;&#125;</code></pre><p>When we mix the index signature with explicit members, all explicit members need to conform to the index signature types.<br>    &#x2F;&#x2F; invalid case<br>    interface CarConfiguration {<br>      [feature: string]: number;<br>      price: number;<br>      model: string; &#x2F;&#x2F; Error: Property ‘model’ of type ‘string’ is not assignable to ‘string’ index type ‘number’<br>    }</p><pre><code>// validinterface CarConfiguration &#123;  [feature: string]: number | string;  price: number;  model: string;&#125;</code></pre><h3 id="Readonly-index-signature"><a href="#Readonly-index-signature" class="headerlink" title="Readonly index signature"></a>Readonly index signature</h3><p>Index signature supports readonly modifier. By applying the readonly modifier, the properties in the object will be immutable.<br>    interface Car {<br>      readonly [key: string]: boolean;<br>    }</p><pre><code>const toyota: Car = &#123;hybrid: true, luxury: false&#125;;toyota.hybrid = false; //Error: Index signature in type &#39;Car&#39; only permits reading.(2542)</code></pre><p>In the above example, an error occurs when trying to modify the ‘hybrid’ property because the interface allows only reading, not writing.</p><h3 id="How-to-use-index-signature"><a href="#How-to-use-index-signature" class="headerlink" title="How to use index signature"></a>How to use index signature</h3><p>Let’s see a real-world example of how index signatures can be used. Imagine we’re developing a web application with various features. Each feature includes its own set of settings. We are also able to enable or disable these features.<br>    interface FeatureConfig {<br>      [feature: string]: {<br>        enabled: boolean;<br>        settings: Record&lt;string, boolean&gt;;<br>      }<br>    }<br>In this example, we define an interface named FeatureConfig. It uses an index signature to allow dynamic property names of type string associated with anenabled boolean property and a settings object. It is handy for representing configurations with dynamic feature names and associated settings. For example, we can apply the interface to the following object.</p><pre><code>const features: FeatureConfig = &#123;  profile: &#123;    enabled: true,    settings: &#123;      showPhoto: true,      allowEdit: false,    &#125;,  &#125;,  notification: &#123;    enabled: false,    settings: &#123;      richText: true,      batchMode: true    &#125;,  &#125;&#125;;</code></pre><p>In the features object, the feature names can vary, but the structure for each feature remains consistent. Each feature is expected to have an enabled boolean and a settings object.   </p><p>To improve the type safety, can we apply a union-type constraint to the feature name in the above interface?</p><p>If the set of features in our application is known, we can define the union of string literals namedFeatureType.<br>    type FeatureType &#x3D; ‘profile’ | ‘notification’ | ‘reporting’;  </p><p>The key of the index signature does not support the union type, but we can work around it using a mapped type.</p><pre><code>type FeatureConfig2 = &#123;  [feature in FeatureType]: &#123;    enabled: boolean;    settings: Record&lt;string, boolean&gt;;  &#125;&#125;</code></pre><p>[feature in FeatureType]is a mapped type that iterates over each string literal in the union type FeatureType (which includes ‘profile’, ‘notification’, and ‘reporting’), and it uses each value as the resulting type’s property name.</p><p>Here’s an example of how we might use it:<br>    const allFeatures: FeatureConfig2 &#x3D; {<br>      profile: {<br>        enabled: true,<br>        settings: {<br>          showPhoto: true,<br>          allowEdit: false,<br>        },<br>      },<br>      notification: {<br>        enabled: false,<br>        settings: {<br>          richText: true,<br>          batchMode: true<br>        },<br>      },<br>        reporting: {<br>        enabled: true,<br>        settings: {<br>          template: false,<br>          advanceExport: true<br>        },<br>      },<br>    };</p><p>Note that we need to include all features defined in FeatureType to the object to match the type expectations.</p><p>If we want to allow a subset of the features as the key, we need to modify the index signature type with an “?” as an optional flag. Then, we could use the FeatureConfig2 type for an object that only contains a subset of features.</p><p>type FeatureType &#x3D; ‘profile’ | ‘notification’ | ‘reporting’;</p><pre><code>type FeatureConfig2 = &#123;  [feature in FeatureType]?: &#123;    enabled: boolean;    settings: Record&lt;string, boolean&gt;;  &#125;&#125;const subsetFeatures: FeatureConfig2 = &#123;  profile: &#123;    enabled: true,    settings: &#123;      showPhoto: true,      allowEdit: false,    &#125;,  &#125;&#125;;</code></pre><h3 id="How-to-use-index-signatures-effectively"><a href="#How-to-use-index-signatures-effectively" class="headerlink" title="How to use index signatures effectively"></a>How to use index signatures effectively</h3><p>Some commonly used scenarios include:</p><ul><li>Configuration Objects: As the above example illustrates, index signatures excel in scenarios where configuration objects may have dynamic keys and associated values.</li><li>Data Transformation: Index signatures can be beneficial when dealing with data transformations or parsing. They allow for flexible handling of input data with varying structures.</li><li>Extensibility: In projects where extensibility is a priority, such as plugin architectures or modular systems, index signatures enable adding new components without modifying existing code.</li></ul><p>While powerful, index signatures should not be overused. Before implementing an index signature, consider whether a more explicit interface or type definition could better represent the data structure, especially when the keys have specific meanings.</p><p>Another consideration is to apply rigorously test scenarios involving index signatures. This includes testing various key-value combinations to ensure that the dynamic nature of the structure does not introduce unforeseen issues.</p><p>By avoiding common mistakes and following best practices, we can use index signatures to make TypeScript code more flexible and resilient.</p><p>Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript-Index-Signature-Explained&quot;&gt;&lt;a href=&quot;#TypeScript-Index-Signature-Explained&quot; class=&quot;headerlink&quot; title=&quot;TypeScript Index Sig</summary>
      
    
    
    
    <category term="Programming" scheme="http://blog.ourcrmonline.com/categories/Programming/"/>
    
    
    <category term="TypeScript" scheme="http://blog.ourcrmonline.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Host Angular App in IIS vs. Nginx</title>
    <link href="http://blog.ourcrmonline.com/2023/07/02/host-angular-iis-nginx/"/>
    <id>http://blog.ourcrmonline.com/2023/07/02/host-angular-iis-nginx/</id>
    <published>2023-07-01T14:00:00.000Z</published>
    <updated>2024-07-06T01:04:07.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A-Practical-Hands-on-Guide"><a href="#A-Practical-Hands-on-Guide" class="headerlink" title="A Practical Hands-on Guide"></a>A Practical Hands-on Guide</h3><p>Hosting an Angular application can be done in various ways. Two popular approaches are IIS (Internet Information Services) and Nginx. While both options allow you to host your Angular app, there are some key differences between the two.</p><p>This article will discuss the pros and cons of these two methods.</p><h2 id="Prepare-Angular-App-for-Deployment"><a href="#Prepare-Angular-App-for-Deployment" class="headerlink" title="Prepare Angular App for Deployment"></a>Prepare Angular App for Deployment</h2><p>To get your app ready to be deployed, we need to build the app with a production configuration.</p><p>Run the following CLI command</p><p>ng build –prod</p><p>The flag  <code>— prod</code>  means the production build output is optimized with minification, tree shaking, and AOT (ahead-of-time) compilation. As a result, the output bundle size will be significantly smaller than a development build. After the build is completed, the output files are stored in a  <code>dist/[app-name]</code>folder. These files are the artifacts for the deployment.</p><h2 id="Deploy-Angular-App-to-IIS"><a href="#Deploy-Angular-App-to-IIS" class="headerlink" title="Deploy Angular App to IIS"></a>Deploy Angular App to IIS</h2><p>IIS is a web server developed by Microsoft and included in the Windows operating system. The benefit of using IIS is that it can take advantage of various security features, i.e., Windows Authentication.</p><p><strong>Add the</strong> <code>**web.config**</code> <strong>file</strong></p><p>To be able to use IIS to host Angular App, we need to add a  <code>web.config</code>  file first.</p><?xml version="1.0" encoding="UTF-8"?><configuration>    <system.webServer>    <rewrite>      <rules>        <rule name="RoutesReWrite" patternSyntax="Wildcard" stopProcessing="true">          <conditions logicalGrouping="MatchAll">            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />          </conditions>          <action type="Rewrite" url="./index.html" />        </rule>      </rules>    </rewrite>    </system.webServer>  </configuration><p>The above  <code>web.config</code>  file contains the IIS rewrite rules. You may need to update the file to match the requirements of your app. For example, add a rewrite rule if your Angular App needs to  <a class="link"   href="https://medium.com/javascript-in-plain-english/all-you-need-to-know-about-angular-proxy-configuration-a1aeb2d8c86" >proxy the API call <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>The  <code>web.config</code>  file must be copied into the root directory of the Anguar app artifacts.</p><p><strong>Set up the website in IIS</strong></p><p>We can follow these steps to set up a new website in IIS.</p><ul><li>Create a new website: Use the IIS manager to create the new site and specify the physical path to the directory where the Angular app’s build artifacts are located.</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*jJwQiRpdNZGA_vkGpOpFpQ.png"                                     ></p><ul><li>Install URL Rewrite module: If it is not installed, install the URL rewrite module from  <a class="link"   href="https://www.iis.net/downloads/microsoft/url-rewrite" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. You should see it appear in the IIS manager after the installation.</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*nuzKYd5H_h3KJfDEQKwrcA.png"                                     ></p><ul><li>Deploy the Angular app: Use a pipeline or scripts to automate copying the build output to the physical path specified for the website in IIS.</li></ul><p>We can restart the IIS by running the following command.</p><p>iisreset</p><p>Now, navigate to the localhost URL to test the Angular App. For any issues configuring the URL rewrite and proxying, refer to this  <a class="link"   href="https://medium.com/javascript-in-plain-english/all-you-need-to-know-about-angular-proxy-configuration-a1aeb2d8c86" >article <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  for more info.</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx is a free and open-source web server commonly used on Linux servers. It is fast and efficient, making it a popular option for hosting websites and web applications.</p><p>Assuming Nginx is installed, run the following command to verify it.</p><p>sudo systemctl restart nginx<br>sudo systemctl status nginx</p><p>If Nginx is started, type the server’s public IP address into the browser, and the default Nginx page will be shown.</p><p>The next step is to edit the Nginx configuration  <code>nginx.conf</code>. Typically, the Nginx configuration file can be found in either  <code>/etc/nginx/nginx.conf</code>  or  <code>/etc/nginx/sites-enabled/default</code>.</p><p>An example of the updated config file is as below.</p><p>http {<br>  …..<br>    server {<br>        listen 80 default_server;<br>        listen [::]:80 default_server;<br>        server_name domainXYZ.com;<br>        location &#x2F; {<br>          proxy_pass &#x2F;app&#x2F;[name of Angular App]&#x2F;dist;<br>        }  </p><pre><code>    error_page 404 /404.html;          location = /40x.html &#123;      &#125;      error_page 500 502 503 504 /50x.html;          location = /50x.html &#123;      &#125;  </code></pre><p>}</p><p>These settings define the server domain name and port number. You can use any port number as long as the port is allowed in your host security group.</p><p>In the above setting, we assume that the app bundles reside on  <code>/app/[name of Angular App]/dist</code>. We need to either enable a pipeline or use a script to copy the Angular build output into the folder.</p><p>After updating the configuration file, we need to restart the Nginx server to make the change effective.</p><p>sudo systemclt restart nginx</p><p>Enter the server domain name and port number into the browser, and your Angular app should run!</p><p>Another must-do in a real-world app is to register and install an SSL certificate and configure it in Nginx. You can find the details in  <a class="link"   href="https://medium.com/gitconnected/build-and-host-a-dynamic-web-site-for-only-1-per-month-1aa5aa3a7bd1#5776" >this article <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><h2 id="IIS-vs-Nginx"><a href="#IIS-vs-Nginx" class="headerlink" title="IIS vs. Nginx"></a>IIS vs. Nginx</h2><p>In summary, both IIS and Nginx can host Angular applications, but they have different strengths and weaknesses.</p><p>IIS is tightly integrated with the Windows operating system, making it easy to use and manage in a corporate environment. At the same time, Nginx is known for its high performance and low resource usage, making it well-suited for high-traffic websites. For normal web apps, the performance difference between these two is negligible. But Nginx has an edge in its flexibility and extensive configuration options.</p><p>Both servers use a reverse proxy to forward incoming requests to the Angular application.</p><p>While IIS is primarily designed for Windows, Nginx can run on multiple platforms, including Linux, macOS, and Windows. This cross-platform compatibility gives Nginx broader adoption and flexibility in deployment scenarios.</p><p>Ultimately, the choice depends on many factors, such as platform preference, the team’s skillset, and performance requirements.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;A-Practical-Hands-on-Guide&quot;&gt;&lt;a href=&quot;#A-Practical-Hands-on-Guide&quot; class=&quot;headerlink&quot; title=&quot;A Practical Hands-on Guide&quot;&gt;&lt;/a&gt;A Practi</summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    <category term="Programming" scheme="http://blog.ourcrmonline.com/categories/Web-Development/Programming/"/>
    
    
    <category term="Angular" scheme="http://blog.ourcrmonline.com/tags/Angular/"/>
    
    <category term="IIS" scheme="http://blog.ourcrmonline.com/tags/IIS/"/>
    
    <category term="Nginx" scheme="http://blog.ourcrmonline.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Postman Flow - The Good Parts and Bad Parts</title>
    <link href="http://blog.ourcrmonline.com/2023/06/27/postman/"/>
    <id>http://blog.ourcrmonline.com/2023/06/27/postman/</id>
    <published>2023-06-26T14:00:00.000Z</published>
    <updated>2024-07-05T08:47:05.568Z</updated>
    
    <content type="html"><![CDATA[<p>Postman is the most popular API testing tool. I often use it to do random API tests in the development process.</p><p>Recently, I‘ve come across a new feature called “flow” in Postman. It was released to the general public in March 2023.</p><p>I was truly excited about Postman Flow because it looked perfect for the task I was working on. However, I realised it wasn’t perfect after a few days working with it. As with any new features or tools, Postman flow comes with its pros and cons.</p><p>In this post, I will share my experiences with Postman flow. Please note this post is not a tutorial on how to use Postman flow. It is an overview of what it can and can’t do.</p><h2 id="What-is-Postman-Flow"><a href="#What-is-Postman-Flow" class="headerlink" title="What is Postman Flow"></a>What is Postman Flow</h2><p>Postman’s official site gives a good definition.</p><blockquote><p>Postman Flows is a visual tool for building API-driven applications for the  <a class="link"   href="https://www.postman.com/api-first/" >API-First <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  world. You can use flows to chain requests, handle data, and create real-world workflows in your Postman workspace.</p></blockquote><p>When we create a new flow, a blank canvas is shown with a start button. We can right-click to add an element from many “Blocks.”</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/0*bHzDZgOahkLAbd0y.gif"                                     ></p><p>Source:  <a class="link"   href="https://learning.postman.com/docs/postman-flows/tutorials/building-your-first-flow/" >https://learning.postman.com/docs/postman-flows/tutorials/building-your-first-flow/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>The blocks are divided into a few categories:  <strong>action</strong> (i.e., Send request),  <strong>decision&#x2F;logic</strong> (i.e., If, Evaluate), and i<strong>nformation</strong> (i.e., text, output).</p><p>The decision&#x2F;logic blocks allow the flow control, such as  <code>if</code> condition or looping. A Flows Query Language(<strong>FQL</strong>) is provided to parse and transform the data. FQL supports some basic functions like  <code>$count</code> or  <code>$each</code>. They can be used with the  <a class="link"   href="https://learning.postman.com/docs/postman-flows/reference/blocks-list/#evaluate" >Evaluate block <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  to manipulate the JSON data.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/0*xJ12NCCFIGo1vu_3.gif"                                     ></p><p>Source:  <a class="link"   href="https://learning.postman.com/docs/postman-flows/tutorials/building-your-first-flow/" >https://learning.postman.com/docs/postman-flows/tutorials/building-your-first-flow/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>Like other entities in Postman, the flow resides within the Postman workspace. You can share or fork the flow within the team workspace or move it to another one.</p><p>Overall, it is a powerful and good-looking tool.</p><p>Let’s dive into the good parts first.</p><h2 id="Good-Parts"><a href="#Good-Parts" class="headerlink" title="Good Parts"></a>Good Parts</h2><h3 id="Visualization"><a href="#Visualization" class="headerlink" title="Visualization"></a>Visualization</h3><p>It is a nice looking visual tool, and the running animation looks great. The animation enhances the running experience, and it makes the flow easier to understand.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*vOowZFMzbhAgDXN1rE523A.png"                                     ></p><p>Source:  <a class="link"   href="https://learning.postman.com/docs/postman-flows/gs/flows-overview/" >https://learning.postman.com/docs/postman-flows/gs/flows-overview/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>If you turn on the dark theme, it looks even better.</p><h2 id="Low-code-x2F-No-code"><a href="#Low-code-x2F-No-code" class="headerlink" title="Low-code &#x2F;No-code"></a><strong>Low-code &#x2F;No-code</strong></h2><p>Prior to Postman Flow, we would need to use the collection runner to chain a few requests. The collection runner would execute the requests by order of requests in the collection or write a script with  <code>setNextRequest</code>  method to create a manual workflow.</p><p>With Postman flow, we only need to drag-and-drop, no code necessary. This is great for non-technical users.</p><h2 id="Select-from-the-sample-response-data"><a href="#Select-from-the-sample-response-data" class="headerlink" title="Select from the sample response data."></a>Select from the sample response data.</h2><p>The Select block is used to select a value from the output of the upstream block (i.e., the response body of the previous request).</p><p>It works well with JSON response data, as well as HTML(although it isn’t documented). After you run the flow once, the response data will be saved as an example, and you can choose from a drop-down with the example data.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:389/1*IpR6Fy5LFFUXjun6pK5Iww.png"                                     ></p><p>Source:  <a class="link"   href="https://learning.postman.com/docs/postman-flows/tutorials/using-response-data-in-a-request/" >https://learning.postman.com/docs/postman-flows/tutorials/using-response-data-in-a-request/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="Re-use-Existing-Requests"><a href="#Re-use-Existing-Requests" class="headerlink" title="Re-use Existing Requests"></a>Re-use Existing Requests</h2><p>If you already have existing Postman collections&#x2F;requests, they can be easily dropped into the flow canvas and chained into a workflow. This is a huge advantage for my project because we have accumulated many Postman requests over the years, most of which are standalone.</p><p>Using the Postman Flow, we can connect them with minor modifications. It provides more test coverage and increases the visibility for business users.</p><p>Compared with the old collection approach, flow can share the existing request in the collection. In other words, you don’t need to duplicate requests to get them into the flow. That makes the flow building much cleaner and more re-usable.</p><h1 id="Bad-Parts"><a href="#Bad-Parts" class="headerlink" title="Bad Parts"></a>Bad Parts</h1><p>Postman offers a free plan which allows you to run basic API tests and other features, including flow. But keep in mind that Postman isn’t an open-source tool. The free features may be changed or limited at any time. Recently, a new limitation was added to restrict the number of runs for free and “professional” paid account usage,  <a class="link"   href="https://community.postman.com/t/250-collection-runs-per-month-on-professional/43946/89" >which many developers felt unjustifiable <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. So, it is something to consider when investing effort into building API tests with Postman flow.</p><h2 id="Lack-of-Export-and-limits-on-the-free-plan"><a href="#Lack-of-Export-and-limits-on-the-free-plan" class="headerlink" title="Lack of Export and limits on the free plan"></a>Lack of Export and limits on the free plan</h2><p>Postman allows you to export requests, collections, and environments to JSON files. These exported files are very handy, as they can be shared between the team and&#x2F;or stored in the version controller system.</p><p>However, the flow cannot be exported. This feature isn’t being provided, though many developers have asked for it in the Postman forum. Instead, the capability to share the flow with Postman team workspace is provided. This means only team members can access or fork a flow.</p><p>Lacking the export feature also means the flow can only be stored in Postman’s workspace.</p><p>To make things worse, the free plan has a limit of 3 members in a team workspace. Although the flow feature is available to a free plan, those limitations make it almost non-usable in a team.</p><p>From a business perspective, it is understandable that the free plan is limited. However, I found it hard to justify that the export feature doesn’t exist for even paid account users.</p><h2 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h2><p>Although we can re-use the existing requests in a flow, there is a hidden limitation: you can’t modify an environment variable or collection variable inside the flow.</p><p>It is very common to have these scripts embedded in a Postman request:</p><p>pm.environment.set(“variable_key”, “variable_value”);<br>pm.collectionVariables.set(“variable_key”, “variable_value”);</p><p>But if you use one of these requests to build your flow, the script above will throw an error. It is  <a class="link"   href="https://github.com/postmanlabs/postman-flows/discussions/142" >a design decision <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  from the Postman team.</p><p>Below are some extracts from the Postman team’s response.</p><p>“_Environment works in a read-only mode, updates to the environment from scripts are not respected._”</p><p>“_We encourage using the connection to pipe data from one block to another, rather than using Globals&#x2F;Environments, etc._”</p><p>I am disappointed with this decision. It breaks many of my existing request scripts. Many developers are in the same situation.</p><h2 id="If-block"><a href="#If-block" class="headerlink" title="If block"></a>If block</h2><p>There is an important logic block in flow:  <code>if</code>. It is a logical gate that allows you to decide the flow path based on the input.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1120/1*xVhZ0XcHm5zuIpDzxy2cLw.png"                                     ></p><p>Source:  <a class="link"   href="https://www.postman.com/postman/workspace/flows-snippets/flow/63bcba94f3155f2e86b54eb0" >https://www.postman.com/postman/workspace/flows-snippets/flow/63bcba94f3155f2e86b54eb0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>As in any programming language,  <code>if</code> is the most essential building block. The issue of  <code>if</code>  block in Post flow is that it only supports  <strong>one</strong>  condition.</p><p>When we have more than one condition, the workaround is to chain multiple  <code>if</code>  blocks together. In a real-world project, multiple conditions are extremely common. Chaining multiple  <em>if</em> blocks for one line of code is so cumbersome!</p><p>These are the main issues I encountered in my few days experience with Postman flow.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Postman flow has the potential to be a game changer in simplifying API testing. With sleek design and user friendly drag and drop UI, it offers an intuitive experience.</p><p>However, I am disappointed as both the absence of the export feature and single-condition if block are deal-breakers for my use cases.Moreover, I have reservations about Postman’s product philosophy, particularly concerning to the way of  <a class="link"   href="https://community.postman.com/t/250-collection-runs-per-month-on-professional/43946/89" >pressuring users to a paid account <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, rather than providing value added services that naturally encourage users to upgrade..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Postman is the most popular API testing tool. I often use it to do random API tests in the development process.&lt;/p&gt;
&lt;p&gt;Recently, I‘ve com</summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    
    <category term="API" scheme="http://blog.ourcrmonline.com/tags/API/"/>
    
    <category term="tools" scheme="http://blog.ourcrmonline.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Types vs. interfaces in TypeScript</title>
    <link href="http://blog.ourcrmonline.com/2023/04/06/type-interface-ts/"/>
    <id>http://blog.ourcrmonline.com/2023/04/06/type-interface-ts/</id>
    <published>2023-04-05T14:00:00.000Z</published>
    <updated>2024-06-29T04:22:31.708Z</updated>
    
    <content type="html"><![CDATA[<h1>Types vs. interfaces in TypeScript</h1><p>We have two options for defining types in TypeScript: types and interfaces. One of the most frequently asked questions about TypeScript is whether we should use interfaces or types. </p><p>The answer to this question, like many programming questions, is that it depends. There are cases where one has a clear advantage over the other, but in many cases they are interchangeable.</p><p>In this article, I will discuss the key differences and similarities between types and interfaces and explore when it is appropriate to use each one.</p><p>Let’s start with the basics of types and interfaces.</p><h2>Types and type aliases</h2><p><code>type</code> is a keyword in TypeScript that we can use to define the shape of data. The basic types in TypeScript include:</p><ul><li>String</li><li>Boolean</li><li>Number</li><li>Array</li><li><a class="link"   href="https://blog.logrocket.com/use-cases-named-tuples-typescript/" >Tuple <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://blog.logrocket.com/typescript-string-enums-guide/" >Enum <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>Advanced types</li></ul><p>Each of these comes with its unique features and purposes, allowing developers to choose the appropriate one for their particular use case.</p><p>Type aliases in TypeScript mean “a name for any type.” They provide a way of creating new names for existing types. Type aliases don’t define new types; instead, they simply provide an alternative name for an existing type. </p><p>Type aliases can be created using the <code>type</code> keyword, and can refer to any valid TypeScript type, including primitive types.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type MyNumber = number;</span><br><span class="line">type User = &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  name: string;</span><br><span class="line">  email: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In the above example, we create two type aliases: <code>MyNumber</code> and <code>User</code>. We can use <code>MyNumber</code> as shorthand for a number type, and use <code>User type aliases</code> to represent the type definition of a user.</p><p>When we say “types versus interfaces,” what we are actually referring to is “type <em>aliases</em> versus interfaces”. For example, you can create the following aliases:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type ErrorCode = string | number;</span><br><span class="line">type Answer = string | number;</span><br></pre></td></tr></table></figure></div><p>The two type aliases above represent alternative names for the same union type: <code>string | number</code>. While the underlying type is the same, the different names express different intents, which makes the code more readable.</p><h2>Interfaces in TypeScript</h2><p>In TypeScript, an interface defines a contract that an object must adhere to. Below is an example:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Client &#123; </span><br><span class="line">    name: string; </span><br><span class="line">    address: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>We can express the same <code>Client</code> contract definition using type annotations:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Client = &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    address: string;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h2>Differences between types and interfaces</h2><p>For the above case, you can use either <code>type</code> or <code>interface</code>. But there are some scenarios in which using <code>type</code> instead of <code>interface</code> makes a difference.</p><h3>Declaration merging</h3><p><a class="link"   href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html" >Declaration merging <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> is a feature that is exclusive to interfaces. With declaration merging, we can define an interface multiple times and the TypeScript compiler will automatically merge these definitions into a single interface definition.</p><p>In the following example, the two <code>Client</code> interface definitions are merged into one by the TypeScript compiler, and we have two properties when using the <code>Client</code> interface:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface Client &#123; </span><br><span class="line">    name: string; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Client &#123;</span><br><span class="line">    age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const harry: Client = &#123;</span><br><span class="line">    name: &#x27;Harry&#x27;,</span><br><span class="line">    age: 41</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Type aliases can’t be merged in the same way. If you try to define the <code>Client</code> type more than once, as in the above example, an error will be thrown:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.logrocket.com/wp-content/uploads/2023/03/define-type-more-than-once-error.png"                      alt="alt_text" title="image_tooltip"                ></p><p>When used in the right places, declaration merging can be very useful. One common use case for declaration merging is to extend a third-party library’s type definition in order to fit the needs of a particular project.</p><p>If you find yourself needing to merge declarations, interfaces are the way to go.</p><h3>`Extends` vs. intersection</h3><p>An interface can extend one or multiple interfaces. By using the <code>extends</code> keyword, a new interface can inherit all the properties and methods of an existing interface, while also adding new properties.</p><p>For example, we can create a <code>VIPClient</code> interface by extending the <code>Client</code> interface:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface VIPClient extends Client &#123;</span><br><span class="line">    benefits: string[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>To achieve a similar result for types, we need to use an intersection operator:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type VIPClient = Client &amp; &#123;benefits: string[]&#125;; // Client is a type</span><br></pre></td></tr></table></figure></div><p>You can also extend an interface from a type alias with statically known members:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type Client = &#123;</span><br><span class="line">    name: string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">interface VIPClient extends Client &#123;</span><br><span class="line">    benefits: string[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>The exception is union types. Union types allow us to describe values that can be one of several types and create unions of various primitive types, literal types, or complex types. </p><p>There is no equivalent to a union type in an interface. If you try to extend an interface from a union type, you’ll receive the following error:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type Jobs = &#x27;salary worker&#x27; | &#x27;retired&#x27;;</span><br><span class="line"></span><br><span class="line">interface MoreJobs extends Jobs &#123;</span><br><span class="line">  description: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.logrocket.com/wp-content/uploads/2023/03/union-type-not-statically-known-error.png"                      alt="alt_text" title="image_tooltip"                ></p><p>This error occurs because the union type is not statically known. The interface definition needs to be statically known at compile time.</p><p>Type aliases can extend interfaces using the intersection, as below:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Client &#123;</span><br><span class="line">    name: string;</span><br><span class="line">&#125;</span><br><span class="line">Type VIPClient = Client &amp; &#123; benefits: string[]&#125;;</span><br></pre></td></tr></table></figure></div><p>In a nutshell, both interfaces and type aliases can be extended. An interface can extend a statically known type alias, while a type alias can extend an interface using an intersection operator.</p><h3>Handling conflicts when extending</h3><p>Another difference between types and interfaces is how conflicts are handled when you try to extend from one with the same property name. </p><p>When extending interfaces, the same property key isn’t allowed, as in the example below:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">  getPermission: () =&gt; string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Staff extends Person &#123;</span><br><span class="line">   getPermission: () =&gt; string[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>An error is thrown because a conflict is detected.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.logrocket.com/wp-content/uploads/2023/03/conflict-detected-error-thrown.png"                      alt="alt_text" title="image_tooltip"                ></p><p>Type aliases handle conflicts differently. In the case of a type alias extending another type with the same property key, it will automatically merge all properties instead of throwing errors.</p><p>In the following example, the intersection operator merges the method signature of the two <code>getPermission</code> declarations, and a <code><a class="link"   href="https://blog.logrocket.com/how-to-use-keyof-operator-typescript/" >typeof operator <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></code> is used to narrow down the union type parameter, so we can get the return value in a type-safe way:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type Person = &#123;</span><br><span class="line">  getPermission: (id: string) =&gt; string;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type Staff = Person &amp; &#123;</span><br><span class="line">   getPermission: (id: string[]) =&gt; string[];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const AdminStaff: Staff = &#123;</span><br><span class="line">  getPermission: (id: string | string[]) =&gt;&#123;</span><br><span class="line">    return (typeof id === &#x27;string&#x27;?  &#x27;admin&#x27; : [&#x27;admin&#x27;]) as string[] &amp; string;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>It is important to note that the type intersection of two properties may produce unexpected results. In the example below, the <code>name</code> property for the extended type <code>Staff</code> becomes <code>never</code>, since it can’t be both <code>string</code> and <code>number</code> at the same time:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type Person = &#123;</span><br><span class="line">    name: string</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type Staff = person &amp; &#123;</span><br><span class="line">    name: number</span><br><span class="line">&#125;;</span><br><span class="line">// error: Type &#x27;string&#x27; is not assignable to type &#x27;never&#x27;.(2322)</span><br><span class="line">const Harry: Staff = &#123; name: &#x27;Harry&#x27; &#125;;</span><br></pre></td></tr></table></figure></div><p>In summary, interfaces will detect property or method name conflicts at compile time and generate an error, whereas type intersections will merge the properties or methods without throwing errors. Therefore, if we need to overload functions, type aliases should be used.</p><h3>Implementing classes using interfaces or type aliases</h3><p>In TypeScript, we can implement a class using either an interface or a type alias:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">interface Person &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  greet(): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student implements Person &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  greet() &#123;</span><br><span class="line">    console.log(&#x27;hello&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Pet = &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  run(): void;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Cat implements Pet &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  run() &#123;</span><br><span class="line">    console.log(&#x27;run&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>As shown above, both interfaces and type aliases can be used to implement a class similarly; the only difference is that we can’t implement a union type.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type primaryKey = &#123; key: number; &#125; | &#123; key: string; &#125;;</span><br><span class="line"></span><br><span class="line">// can not implement a union type</span><br><span class="line">class RealKey implements primaryKey &#123;</span><br><span class="line">  key = 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.logrocket.com/wp-content/uploads/2023/03/class-represents-specific-data-shape-error.png"                      alt="alt_text" title="image_tooltip"                ></p><p>In the above example, the TypeScript compiler throws an error because a class represents a specific data shape, but a union type can be one of several data types.</p><h3>Working with Tuple types</h3><p>In TypeScript, Tuple type allows us to express an array with a fixed number of elements, where each element has its own data type. It can be useful when you need to work with arrays of data with a fixed structure:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type TeamMember = [name: string, role: string, age: number];</span><br></pre></td></tr></table></figure></div><p>Interfaces don’t have direct support for tuple types. Although we can create some workarounds like in the example below, it is not as concise or readable as using the tuple type:</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface ITeamMember extends Array&lt;string | number&gt; </span><br><span class="line">&#123;</span><br><span class="line"> 0: string; 1: string; 2: number </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const peter: ITeamMember = [&#x27;Harry&#x27;, &#x27;Dev&#x27;, 24];</span><br><span class="line">const Tom: ITeamMember = [&#x27;Tom&#x27;, 30, &#x27;Manager&#x27;]; //Error: Type &#x27;number&#x27; is not assignable to type &#x27;string&#x27;.</span><br></pre></td></tr></table></figure></div><h2>Advanced type features</h2><p>TypeScript provides a wide range of advanced type features that can’t be found in interfaces. Some of the unique features in TypeScript include:</p><ul><li>Type inferences: Can infer the type of variables and functions based on their usage. This reduces the amount of code and improves readability</li><li>Conditional types: Allow us to create complex type expressions with conditional behaviors that depend on other types</li><li><a class="link"   href="https://blog.logrocket.com/how-to-use-type-guards-typescript/" >Type guards <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>: Used to write sophisticated control flow based on the type of a variable</li><li>Mapped types: Transforms an existing object type into a new type</li><li>Utility types: A set of out-of-the-box utilities that help to manipulate types</li></ul><p>TypeScript’s typing system is constantly evolving with every new release, making it a complex and powerful toolbox. The impressive typing system is one of the main reasons why many developers prefer to use TypeScript.</p><h2>When to use types vs. interfaces</h2><p>Type aliases and interfaces are very similar, but have some subtle differences, as shown in the previous section.</p><p>While almost all interface features are available in types or have equivalents, there is one exception: declaration merging. In general, interfaces should be used in scenarios where declaration merging is necessary, such as extending an existing library or authoring a new library. Additionally, if you prefer the object-oriented inheritance style, using the <code>extends</code> keyword with an interface is often more readable than using the intersection with type aliases.</p><p>However, many of the features in types are difficult or impossible to achieve with interfaces. For example, TypeScript provides a rich set of features like conditional types, generic types, type guards, advanced types, and more. You can use them to build a well-constrained type system to make your app strongly typed. This can’t be achieved by the interface.</p><p>In many cases, they can be used interchangeably depending on personal preference. But, we should use type aliases in the following use cases:</p><ul><li>To create a new name for a primitive type</li><li>To define a union type, tuple type, function type, or another more complex type</li><li>To overload functions</li><li>To use mapped types, conditional types, type guard, or other advanced type features</li></ul><p>Compared with interfaces, types are more expressive. There are many advanced type features that are not available in interfaces, and those features continue to grow as TypeScript evolves.</p><p>In addition, many developers prefer to use types because they are a good match with the <a class="link"   href="https://en.wikipedia.org/wiki/Functional_programming" >functional programming paradigm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. The rich type expression makes it easier to achieve functional composition, immutability, and other functional programming capabilities in a type-safe manner.</p><h1>Summary</h1><p>In this article, we discussed type aliases and interfaces, as well as their differences. While there are some scenarios in which one is preferred over the other, in most cases, the choice between them boils down to personal preference.</p><p>I lean towards using types, simply because of the amazing type system. What are your preferences? You are welcome to share your opinions in the comments section below.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Types vs. interfaces in TypeScript&lt;/h1&gt;


&lt;p&gt;We have two options for defining types in TypeScript: types and interfaces. One of the most</summary>
      
    
    
    
    <category term="Programming" scheme="http://blog.ourcrmonline.com/categories/Programming/"/>
    
    
    <category term="TypeScript" scheme="http://blog.ourcrmonline.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>All You Need to Know About Angular Proxy Configuration</title>
    <link href="http://blog.ourcrmonline.com/2023/03/05/all-you-need-to-know-about-angular-proxy-configuration/"/>
    <id>http://blog.ourcrmonline.com/2023/03/05/all-you-need-to-know-about-angular-proxy-configuration/</id>
    <published>2023-03-05T01:14:56.000Z</published>
    <updated>2024-06-29T04:12:33.045Z</updated>
    
    <content type="html"><![CDATA[<h3>A complete guide on setting up a proxy in Angular for API calls behind a corporate proxy or with windows authentication</h3><section data-field="body" class="e-content"><section name="d474" class="section section--body section--first"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><p name="d69c" id="d69c" class="graf graf--p graf-after--figure">Angular Developers use Angular CLI for local development. One of the most common needs is to set up a proxy in the local dev environment to avoid CORS error when the Angular app sends an HTTP request to an API residing on a different domain. Angular CLI makes the process relatively easy, but it can be tricky in some edge cases.</p><p name="3469" id="3469" class="graf graf--p graf-after--p">In this article, I am going to discuss how to set up a dev server proxy for</p><ul class="postList"><li name="a340" id="a340" class="graf graf--li graf-after--p"><a href="#e0ed" data-href="#e0ed" class="markup--anchor markup--li-anchor">proxy to API in localhost</a></li><li name="6bb5" id="6bb5" class="graf graf--li graf-after--li"><a href="#d919" data-href="#d919" class="markup--anchor markup--li-anchor">proxy to external API within a corporate network</a></li><li name="fa38" id="fa38" class="graf graf--li graf-after--li"><a href="#2e9b" data-href="#2e9b" class="markup--anchor markup--li-anchor">proxy to API using windows authentication (IIS)</a></li><li name="5e25" id="5e25" class="graf graf--li graf-after--li graf--trailing">m<a href="#55ad" data-href="#55ad" class="markup--anchor markup--li-anchor">ultiple schemes in one WWW-Authenticate header</a></li></ul></div></div></section><section name="8b3e" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><h4 name="e0ed" id="e0ed" class="graf graf--h4 graf--leading">Setup a proxy to connect to API in localhost</h4><p name="74ab" id="74ab" class="graf graf--p graf-after--h4">With Angular CLI, we can start the local dev server using the command below.</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="typescript" name="40ca" id="40ca" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content">ng serve</span></pre><p name="492a" id="492a" class="graf graf--p graf-after--pre">The command invokes the internal dev server based on <a class="link"  href="https://webpack.js.org/configuration/dev-server/" data- href="https://webpack.js.org/configuration/dev-server/"  class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">webpack dev server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. By default, the dev server runs on <code class="markup--code markup--p-code"><a href="http://localhost:4200." data-href="http://localhost:4200." class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">http://localhost:4200</a></code><a href="http://localhost:4200." data-href="http://localhost:4200." class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">.</a></p><p name="7338" id="7338" class="graf graf--p graf-after--p">When the Angular app needs to call its backend API, which is also hosted locally at <code class="markup--code markup--p-code u-paddingRight0 u-marginRight0"><a href="http://localhost:3000." data-href="http://localhost:3000." class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">http://localhost:3000</a>, </code>then we will encounter a CORS error because the HTTP call use a different origin (<code class="markup--code markup--p-code">localhost:3000</code>).</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="kotlin" name="9972" id="9972" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-keyword">this</span>.http.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;http://locahost:3000/api/&#x27;</span>)<br />    .subscribe(res =&gt; {...});</span></pre><p name="db2d" id="db2d" class="graf graf--p graf-after--pre">The CORS issue can be resolved by configuring the Angular dev server proxy. A sample proxy config can be created below</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="kotlin" name="9f70" id="9f70" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-comment">// proxy.conf.json</span><br />{<br />  <span class="hljs-string">&quot;/api&quot;</span>: {<br />    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;http://localhost:3000&quot;</span>,<br />    <span class="hljs-string">&quot;secure&quot;</span>: <span class="hljs-literal">false</span>,<br />  }<br />}<br /><span class="hljs-comment">// we change the angular http call to remove the domain prefix</span><br /><span class="hljs-keyword">this</span>.http.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;/api/&#x27;</span>)<br />    .subscribe(res =&gt; {...});</span></pre><p name="8f6f" id="8f6f" class="graf graf--p graf-after--pre">As illustrated by the following diagram, the proxy sits between the Angular app and the backend API and translates the “<code class="markup--code markup--p-code">api/v1</code>” calls to backend API. The CORS error doesn’t happen because the call to API is the same origin (<code class="markup--code markup--p-code u-paddingRight0 u-marginRight0"><a href="http://localhost:4200." data-href="http://localhost:4200." class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">localhost:4200</a>/api</code><strong class="markup--strong markup--p-strong">)</strong> now.</p><figure name="7f63" id="7f63" class="graf graf--figure graf-after--p"><img  class="graf-image" data-image-id="1*_2jpbQ3XXY-FzQ3Nq-8DSQ.png" data-width="1488" data-height="548"                      lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/800/1*_2jpbQ3XXY-FzQ3Nq-8DSQ.png"                                     ></figure><p name="2613" id="2613" class="graf graf--p graf-after--figure">To make the proxy configuration takes effect, it must be passed into the <code class="markup--code markup--p-code">ng serve</code> command.</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="css" name="f9a1" id="f9a1" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content">ng serve <span class="hljs-attr">--proxy-config</span> proxy<span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.json</span></span></pre><p name="00bf" id="00bf" class="graf graf--p graf-after--pre">Or we can add it to the <code class="markup--code markup--p-code">angular.json</code> configuration</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="bash" name="6e4f" id="6e4f" class="graf graf--pre graf-after--p graf--trailing graf--preV2"><span class="pre--content"><br /><span class="hljs-string">&quot;serve&quot;</span>: {<br />  ...<br />  <span class="hljs-string">&quot;options&quot;</span>: {<br />    ...<br />    <span class="hljs-string">&quot;proxyConfig&quot;</span>: <span class="hljs-string">&quot;proxy.conf.json&quot;</span><br />  }<br />}</span></pre></div></div></section><section name="7fbe" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><h4 name="d919" id="d919" class="graf graf--h4 graf--leading">Connect to external API behind corporate Proxy</h4><p name="3103" id="3103" class="graf graf--p graf-after--h4">Often we worked within a corporate network, and the Angular app in a local dev environment also need to connect to an external API. Using the previous example, we might need to call <a class="link"  href="http://abc.company.com/api." data- href="http://abc.company.com/api."  class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">http://abc.company.com/api <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> in the Angular app instead of calling <a href="http://localhost:3000," data-href="http://localhost:3000," class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">http://localhost:3000/api</a>.</p><p name="31c6" id="31c6" class="graf graf--p graf-after--p">Accessing an external API behind a corporate proxy requires the <code class="markup--code markup--p-code">HTTP_PROXY</code> and <code class="markup--code markup--p-code">HTTPS_PROXY</code> environment variables to be configured. If the proxy utilizes an SSL certificate, the <code class="markup--code markup--p-code">secure</code> flag needs to be set to false, to bypass the certificate verification.</p><p name="67a7" id="67a7" class="graf graf--p graf-after--p">To handle corporate proxy, we need to create a <code class="markup--code markup--p-code">proxy.conf.js</code> as below.</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="javascript" name="cbd3" id="cbd3" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HttpsProxyAgent</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;https-proxy-agent&#x27;</span>);<br /><br /><span class="hljs-keyword">const</span> proxyConfig = [<br />  {<br />    <span class="hljs-attr">context</span>: <span class="hljs-string">&#x27;/api&#x27;</span>,<br />    <span class="hljs-attr">pathRewrite</span>: { <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span> },<br />    <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;https://api.abc.com&#x27;</span>,<br />    <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br />    <span class="hljs-attr">secure</span>: <span class="hljs-literal">false</span><br />  }<br />];<br /><br /><span class="hljs-keyword">function</span> <span class="hljs-title function_">setupForCorporateProxy</span>(<span class="hljs-params">proxyConfig</span>) {<br />  <span class="hljs-keyword">const</span> proxyServer = process.<span class="hljs-property">env</span>.<span class="hljs-property">http_proxy</span> || process.<span class="hljs-property">env</span>.<span class="hljs-property">HTTP_PROXY</span>;<br /><br />  <span class="hljs-keyword">if</span> (proxyServer) {<br />    <span class="hljs-keyword">const</span> agent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpsProxyAgent</span>(proxyServer);<br />    proxyConfig.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> {<br />      c.<span class="hljs-property">agent</span> = agent;<br />    });<br />  }<br />  <span class="hljs-keyword">return</span> proxyConfig;<br />}<br /><br /><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">setupForCorporateProxy</span>(proxyConfig);</span></pre><p name="03f1" id="03f1" class="graf graf--p graf-after--pre">In the above example, we proxy a request like <code class="markup--code markup--p-code">api/v1/client</code> to an external server <code class="markup--code markup--p-code">https://api.abc.com/v1/client</code>. When a corporate proxy is required, we set up an <a class="link"  href="https://nodejs.org/api/https.html#https_class_https_agent" data- href="https://nodejs.org/api/https.html#https_class_https_agent"  class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">HTTPS agent <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> object in the proxy based on <code class="markup--code markup--p-code">HTTP_PROXY</code> and <code class="markup--code markup--p-code">HTTPS_PROXY</code> environment variables. The <code class="markup--code markup--p-code">secure:false</code> option is added to handle the custom SSL certificate in the corporate proxy.</p><p name="4042" id="4042" class="graf graf--p graf-after--p">To use the new js configuration for the Angular app, run the following</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="css" name="a9cc" id="a9cc" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content">ng serve <span class="hljs-attr">--proxy-config</span> proxy<span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.js</span></span></pre><p name="5771" id="5771" class="graf graf--p graf-after--pre graf--trailing">It is worth noting that there are two types of agents: <code class="markup--code markup--p-code">HttpsProxyAgent</code> and <code class="markup--code markup--p-code">HttpProxyAgent,</code> it is necessary to choose the appropriate one based on the environment setting.</p></div></div></section><section name="ced4" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><h4 name="2e9b" id="2e9b" class="graf graf--h4 graf--leading">Proxy to API using windows authentication (IIS)</h4><p name="e3c6" id="e3c6" class="graf graf--p graf-after--h4">Windows authentication is widely used by many companies that rely on Microsoft Ecosystem. The situation can be tricky if the Angular App is connecting to an API service hosted with IIS that is protected by windows authentication.</p><p name="d613" id="d613" class="graf graf--p graf-after--p">The typical problem is that the call from the Angular app to the API will return 401 when using the proxy setting in the local dev environment.</p><p name="ea6e" id="ea6e" class="graf graf--p graf-after--p">For example, <code class="markup--code markup--p-code">/api/v1/../login</code> is an Endpoint protected by Windows Authentication, the request to the API from a locally running Angular App receives 401 unauthorized responses. Below is the network tab screenshot in Chrome dev tools.</p><figure name="f8c2" id="f8c2" class="graf graf--figure graf-after--p"><img  class="graf-image" data-image-id="1*kewDSVjh_LP_TjNEEitLAA.png" data-width="1360" data-height="104"                      lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/800/1*kewDSVjh_LP_TjNEEitLAA.png"                                     ><figcaption class="imageCaption">failed request</figcaption></figure><p name="3798" id="3798" class="graf graf--p graf-after--figure">The root cause of the issue is that windows authentication is connection based, but the Proxy break the keep-live connection.</p><p name="7495" id="7495" class="graf graf--p graf-after--p">Under the hood of windows authentication, it uses either Kerberos or NTLM, either protocol will require a keep-live connection to keep the authentication state.</p><p name="3772" id="3772" class="graf graf--p graf-after--p">When the <code class="markup--code markup--p-code">/api/v1/../login</code> is called, the browser tries to establish a connection with the IIS server via NTLM negotiation handshake which includes 3 parts. They are the Type-1 message, the Type-2, and the Type-3 message. You can find more details of the NTLM handshake <a class="link"  href="https://web.archive.org/web/20210126065105/http://www.innovation.ch/personal/ronald/ntlm.html" data- href="https://web.archive.org/web/20210126065105/http://www.innovation.ch/personal/ronald/ntlm.html"  class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. You may already notice that there are two HTTP calls shown for the same request in the above screenshot. They are the first two parts of the handshake.</p><p name="3bb5" id="3bb5" class="graf graf--p graf-after--p">Because the request is proxying locally, the 3 handshake messages were sent in 3 separate requests(sockets) through the proxy, thus a keep-live connection can’t be kept in the process. That is the reason the last message didn’t occur.</p><p name="b679" id="b679" class="graf graf--p graf-after--p">To fix the issue, We need to configure the proxy to maintain a single connection between the browser and IIS server. The<code class="markup--code markup--p-code"><a class="link"  href="https://github.com/node-modules/agentkeepalive#readme" data- href="https://github.com/node-modules/agentkeepalive#readme"  class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">agentkeepalive <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></code> package can help us to achieve this goal. The updated proxy configuration is shown below.</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="yaml" name="333d" id="333d" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-string">const</span> <span class="hljs-string">Agent</span> <span class="hljs-string">=</span> <span class="hljs-string">require(&quot;agentkeepalive&quot;);</span><br /><br /><span class="hljs-string">const</span> <span class="hljs-string">keepaliveAgent</span> <span class="hljs-string">=</span> <span class="hljs-string">new</span> <span class="hljs-string">Agent({</span><br />    <span class="hljs-attr">maxSockets:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span><br />    <span class="hljs-attr">keepAlive:</span> <span class="hljs-literal">true</span><span class="hljs-string">,</span><br />    <span class="hljs-attr">maxFreeSockets:</span> <span class="hljs-number">10</span><span class="hljs-string">,</span><br />    <span class="hljs-attr">keepAliveMsecs:</span> <span class="hljs-number">1000</span><span class="hljs-string">,</span><br />    <span class="hljs-attr">timeout:</span> <span class="hljs-number">60000</span><span class="hljs-string">,</span><br />    <span class="hljs-attr">keepAliveTimeout:</span> <span class="hljs-number">30000</span> <span class="hljs-string">//</span> <span class="hljs-string">free</span> <span class="hljs-string">socket</span> <span class="hljs-string">keepalive</span> <span class="hljs-string">for</span> <span class="hljs-number">30</span> <span class="hljs-string">seconds</span><br /><span class="hljs-string">});</span><br /><br /><span class="hljs-string">const</span> <span class="hljs-string">PROXY_CONFIG</span> <span class="hljs-string">=</span> [<br />    {<br />        <span class="hljs-attr">target:</span> <span class="hljs-string">&quot;http://localhost:3000&quot;</span>,<br />        <span class="hljs-attr">context:</span> <span class="hljs-string">&quot;/api&quot;</span>,<br />        <span class="hljs-attr">secure:</span> <span class="hljs-literal">false</span>,<br />        <span class="hljs-attr">changeOrigin:</span> <span class="hljs-literal">true</span>,<br />        <span class="hljs-attr">loglevel:</span> <span class="hljs-string">&quot;debug&quot;</span>,<br />        <span class="hljs-attr">agent:</span> <span class="hljs-string">keepaliveAgent</span><br />    }<br />]<span class="hljs-string">;</span><br /><span class="hljs-string">module.exports</span> <span class="hljs-string">=</span> <span class="hljs-string">PROXY_CONFIG;</span></span></pre><p name="335a" id="335a" class="graf graf--p graf-after--pre">The updated proxy config set the <code class="markup--code markup--p-code">maxSockets</code> to 1, <code class="markup--code markup--p-code">keepAlive</code> flag to true, and sets the timeout to 30 seconds, which is long enough to complete the handshake. This config aims to make <code class="markup--code markup--p-code">http.Agent</code> to maintain a keep-live connection between the browser and IIS server via proxy in the authentication process.</p><p name="7ec0" id="7ec0" class="graf graf--p graf-after--p">Now, the <code class="markup--code markup--p-code">/api/v1/../login</code> API request should work.</p><figure name="ee08" id="ee08" class="graf graf--figure graf-after--p"><img  class="graf-image" data-image-id="1*EWspU6LBiNGgJX32wz7yow.png" data-width="1392" data-height="108"                      lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/800/1*EWspU6LBiNGgJX32wz7yow.png"                                     ><figcaption class="imageCaption">success request</figcaption></figure><p name="1c4a" id="1c4a" class="graf graf--p graf-after--figure graf--trailing">The above is the network tab logs after successful authentication with the new config. We can see the three requests during the handshake, and the last one return HTTP 200 success status.</p></div></div></section><section name="4fd6" class="section section--body"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><h4 name="55ad" id="55ad" class="graf graf--h4 graf--leading">Multiple schemes in one WWW-Authenticate header</h4><p name="48d7" id="48d7" class="graf graf--p graf-after--h4">Another possible cause of the error from windows authentication is the <code class="markup--code markup--p-code">www-authenticate</code> header. According to RFC 7235, it is okay to have multiple authentication schemes in one <code class="markup--code markup--p-code">www-authenticate</code> header field, although it can make the field difficult to be parsed.</p><blockquote name="2917" id="2917" class="graf graf--blockquote graf-after--p">agents will need to take special care in parsing the WWW-<br>Authenticate or Proxy-Authenticate header field value if it contains<br>more than one challenge, or if more than one WWW-Authenticate header<br>field is provided, since the contents of a challenge may itself<br>contain a comma-separated list of authentication parameters.</blockquote><p name="6f59" id="6f59" class="graf graf--p graf-after--blockquote">The reality is that the browser support is <a class="link"  href="http://test.greenbytes.de/tech/tc/httpauth/" data- href="http://test.greenbytes.de/tech/tc/httpauth/"  class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">questionable <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. Below is an example of the www-authenticate header with two schemes.</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="makefile" name="bdc2" id="bdc2" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-section">WWW-Authenticate: Negotiate, NTLM</span></span></pre><p name="5e1c" id="5e1c" class="graf graf--p graf-after--pre">Some browsers may not be able to parse the above correctly and this will break the NTLM handshake process. To resolve this issue, we can utilize the <code class="markup--code markup--p-code">proxyRes</code> callback in the <code class="markup--code markup--p-code"><a class="link"  href="https://www.npmjs.com/package/http-proxy-middleware" data- href="https://www.npmjs.com/package/http-proxy-middleware"  class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">http-proxy-middleware <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></code> as below</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="javascript" name="05dd" id="05dd" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-keyword">const</span> onProxyRes = <span class="hljs-keyword">function</span> (<span class="hljs-params">proxyRes, req, res</span>) {<br />     <span class="hljs-keyword">var</span> key = <span class="hljs-string">&#x27;www-authenticate&#x27;</span>;<br />     proxyRes.<span class="hljs-property">headers</span>[key] = proxyRes.<span class="hljs-property">headers</span>[key] &amp;&amp; proxyRes.<span class="hljs-property">headers</span>[key].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br />};<br /><br /><span class="hljs-comment">// add it into the proxy config option</span><br /><span class="hljs-attr">onProxyRes</span>: onProxyRes</span></pre><p name="f6ae" id="f6ae" class="graf graf--p graf-after--pre">The full proxy configuration looks like below.</p><pre data-code-block-mode="1" spellcheck="false" data-code-block-lang="javascript" name="409b" id="409b" class="graf graf--pre graf-after--p graf--preV2"><span class="pre--content"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Agent</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;agentkeepalive&quot;</span>);<br /><br /><span class="hljs-keyword">const</span> keepaliveAgent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Agent</span>({<br />    <span class="hljs-attr">maxSockets</span>: <span class="hljs-number">1</span>,<br />    <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span>,<br />    <span class="hljs-attr">maxFreeSockets</span>: <span class="hljs-number">10</span>,<br />    <span class="hljs-attr">keepAliveMsecs</span>: <span class="hljs-number">1000</span>,<br />    <span class="hljs-attr">timeout</span>: <span class="hljs-number">60000</span>,<br />    <span class="hljs-attr">keepAliveTimeout</span>: <span class="hljs-number">30000</span> <span class="hljs-comment">// free socket keepalive for 30 seconds</span><br />});<br /><span class="hljs-keyword">const</span> onProxyRes = <span class="hljs-keyword">function</span> (<span class="hljs-params">proxyRes, req, res</span>) {<br />     <span class="hljs-keyword">var</span> key = <span class="hljs-string">&#x27;www-authenticate&#x27;</span>;<br />     proxyRes.<span class="hljs-property">headers</span>[key] = proxyRes.<span class="hljs-property">headers</span>[key] &amp;&amp; proxyRes.<span class="hljs-property">headers</span>[key].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br />};<br /><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PROXY_CONFIG</span> = [<br />    {<br />        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;http://localhost:3000&quot;</span>,<br />        <span class="hljs-attr">context</span>: <span class="hljs-string">&quot;/api&quot;</span>,<br />        <span class="hljs-attr">secure</span>: <span class="hljs-literal">false</span>,<br />        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br />        <span class="hljs-attr">onProxyRes</span>: onProxyRes,<br />        <span class="hljs-attr">agent</span>: keepaliveAgent<br />    }<br />];<br /><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-variable constant_">PROXY_CONFIG</span>;</span></pre><p name="1c36" id="1c36" class="graf graf--p graf-after--pre">With the new callback added, the multiple schemes in the <code class="markup--code markup--p-code">www-authenticate</code> header will be sent in multiple lines, and the NTLM negotiation handshake will be able to continue.</p><pre data-code-block-mode="2" spellcheck="false" data-code-block-lang="json" name="6dc5" id="6dc5" class="graf graf--pre graf-after--p graf--trailing graf--preV2"><span class="pre--content"><span class="hljs-comment">// From the original response header</span><br />www-authenticate<span class="hljs-punctuation">:</span> Negotiate<span class="hljs-punctuation">,</span> NTLM<br /><br /><span class="hljs-comment">// After the onProxRes callback function</span><br />www-authenticate<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>&#x27;Negotiate&#x27;<span class="hljs-punctuation">,</span> &#x27;NTLM&#x27;<span class="hljs-punctuation">]</span><br /><br /><span class="hljs-comment">// It is equivalent to</span><br />&lt; WWW-Authenticate<span class="hljs-punctuation">:</span> Negotiate<br />&lt; WWW-Authenticate<span class="hljs-punctuation">:</span> NTLM<br /><br /></span></pre></div></div></section><section name="4c06" class="section section--body section--last"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><h4 name="db9d" id="db9d" class="graf graf--h4 graf--leading">Summary</h4><p name="1e6a" id="1e6a" class="graf graf--p graf-after--h4">In this article, we discuss how to avoid CORS issues by setting up a proxy using Angular CLI for local development. I hope it is useful to you if you’re working on Angular behind a corporate proxy and/or using IIS with windows authentication.</p><p name="db66" id="db66" class="graf graf--p graf-after--p">Happy programming!</p></section></section><footer><p>By <a class="link"   href="https://medium.com/@sunnysun-5694"  class="p-author h-card">Sunny Sun <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on <a href="https://medium.com/p/a1aeb2d8c86"><time class="dt-published" datetime="2023-02-22T12:16:38.971Z">February 22, 2023</time></a>.</p><p><a class="link"   href="https://medium.com/@sunnysun-5694/all-you-need-to-know-about-angular-proxy-configuration-a1aeb2d8c86"  class="p-canonical">Canonical link <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>Exported from <a class="link"   href="https://medium.com" >Medium <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on March 5, 2023.</p></footer></article></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;
A complete guide on setting up a proxy in Angular for API calls behind a corporate proxy or with windows authentication
&lt;/h3&gt;
&lt;section </summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    
    <category term="TypeScript" scheme="http://blog.ourcrmonline.com/tags/TypeScript/"/>
    
    <category term="Angular" scheme="http://blog.ourcrmonline.com/tags/Angular/"/>
    
    <category term="Proxy" scheme="http://blog.ourcrmonline.com/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Install and ConfigureYour Own MySQL Server On Oracle Always Free Ubuntu VM</title>
    <link href="http://blog.ourcrmonline.com/2023/02/05/install-config-your-own-mysql-on-oracle-free-vm/"/>
    <id>http://blog.ourcrmonline.com/2023/02/05/install-config-your-own-mysql-on-oracle-free-vm/</id>
    <published>2023-02-04T14:00:00.000Z</published>
    <updated>2024-06-29T04:20:39.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Complete-guide-and-tricks-on-how-to-connect-to-the-MySQL-instances-remotely"><a href="#Complete-guide-and-tricks-on-how-to-connect-to-the-MySQL-instances-remotely" class="headerlink" title="Complete guide and tricks on how to connect to the MySQL instances remotely"></a>Complete guide and tricks on how to connect to the MySQL instances remotely</h2><p>In my previous article, I wrote about <a class="link"   href="https://medium.com/gitconnected/build-and-host-a-dynamic-web-site-for-only-1-per-month-1aa5aa3a7bd1" >hosting a site on Oracle always free offering <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. The Oracle always free is a generous offer. One of the eligible free services is:</p><blockquote><p>Arm-based Ampere A1 cores and 24 GB of memory usable as 1 VM or up to 4 VMs with 3,000 OCPU hours and 18,000 GB hours per month</p></blockquote><p>That means you can set up a free VM with 4 cores CPU and 24 GB of memory!</p><p>Recently, I utilize the Oracle Arm-based VM to build a MySQL instance and migrate an existing MySQL database over. The migrated server runs very well.</p><p>In this article, I will go through the process and share some tricks of configuring the database.</p><h3 id="Setup-and-Access-the-VM"><a href="#Setup-and-Access-the-VM" class="headerlink" title="Setup and Access the VM"></a>Setup and Access the VM</h3><p>I won’t repeat the details of VM setup and access via SSH, as it can be found in <a class="link"   href="https://medium.com/gitconnected/build-and-host-a-dynamic-web-site-for-only-1-per-month-1aa5aa3a7bd1" >my previous article <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. The only difference in setup is to choose the AMPERE as Shape.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2072/1*MmzJDp-C5kpQC8ZcRUyY_A.png"                                     ></p><p>Please note that I choose 3 core OCPU and 18 GB memory, although the max total limit is 4 cores and 24 GB memory. I leave some resources for my other free VM instance.</p><p>The new VM is running as below.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/3824/1*NAa7kiGIefLFTZScNoX9rA.png"                                     ></p><h3 id="Install-MySQL-Server"><a href="#Install-MySQL-Server" class="headerlink" title="Install MySQL Server"></a>Install MySQL Server</h3><p>After the new VM runs, we can log in to it via SSH.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2036/1*MNoWCLOvXgGzXZL0-B9wMg.png"                                     ></p><p>It is time to install the MySQL server by running the following commands.</p><pre><code># update aptsudo apt update# install the mysql server using the APT package repositorysudo apt-get install mysql-server</code></pre><p>After the installation is completed, we can verify the installation by checking the version.</p><pre><code>mysql --version</code></pre><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2092/1*iisW-LZm9LZPuawW09nPnQ.png"                                     ></p><h3 id="Secure-the-MySQL-instance"><a href="#Secure-the-MySQL-instance" class="headerlink" title="Secure the MySQL instance"></a>Secure the MySQL instance</h3><p>The next step is to secure the database by running the mysql_secure_installation script.</p><pre><code>sudo mysql_secure_installation</code></pre><p>The mysql_secure_installation script will go through a few steps, and modify MySQL’s default security options to make it more secure. The first step is to set the level of password policy.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2232/1*9t1AlMZBQl1UvBgMbcac6w.png"                                     ></p><p>I choose the strong policy option, then was asked to set up the password of the root user. At this point, the following error is shown and blocks me from continuing.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2488/1*n8XkDiD3jiQ2rE8fryvtyA.png"                                     ></p><p>After some googling, I found a solution: update the authentication method of the root user. Starts a new SSH session, and log in to MySQL using the following command.</p><pre><code>mysql -u root -p#under mysql promptALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;[your passowrd]&#39;;exit;</code></pre><p>Now, we can restart the mysql_secure_installation and should be able to complete the full process. In each question other than the password policy, I choose Yes and Enter for the default choice.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2504/1*ktmsja1IqmDdPXmvJCV0lA.png"                                     ></p><p>The secure installation script performs these actions to tighten up the security.</p><ul><li><p>remove some anonymous users</p></li><li><p>remove the test database</p></li><li><p>disable root login remotely</p></li></ul><p>We can verify the status of the newly installed database instance.</p><pre><code>sudo systemctl status mysql.service</code></pre><h3 id="Add-a-new-MySQL-User"><a href="#Add-a-new-MySQL-User" class="headerlink" title="Add a new MySQL User"></a>Add a new MySQL User</h3><p>Now, our new server is running with theroot user created. Since the root user is designed to be used for admin purposes only, we need to create another user which can be used from an external service or App.</p><p>Firstly, connect to MySQL prompt via root user login. Then, execute the following SQL commands to create an appuser account.</p><pre><code>mysql&gt; CREATE USER &#39;appuser&#39;@&#39;%&#39; IDENTIFIED BY &#39;[your password]&#39;;mysql&gt; GRANT CREATE, ALTER, DROP, INSERT, UPDATE, DELETE, SELECT, REFERENCES, RELOAD on *.* TO &#39;appuser&#39;@&#39;%&#39; WITH GRANT OPTION; mysql&gt; FLUSH PRIVILEGES;mysql&gt; exit;</code></pre><p>Then, we can try to log in as the newly created user.</p><pre><code>mysql -u appuser -p</code></pre><h3 id="Connect-to-the-MySQL-instance-remotely"><a href="#Connect-to-the-MySQL-instance-remotely" class="headerlink" title="Connect to the MySQL instance remotely"></a>Connect to the MySQL instance remotely</h3><p>We have set up the MySQL instance with the necessary security options and user accounts in the Oracle cloud. At this point, you should be able to connect to the instance from the MySQL workbench using the public IP address via TCP&#x2F;IP+SSH.</p><p>But you will receive an error if you try to connect to it via TCP&#x2F;IP only via the MySQL workbench or any clients. That is because by default MySQL server is only configured to listen to local connections.</p><p>To allow remote access to the MySQL instance, we need to open up port 3306 which should be listened to by the MySQL server for external connections. It is a tricky step, as there are a few moving parts. The following are the steps involved:</p><ul><li><p>Add an ingress rule in the security list to allow port 3306</p></li><li><p>Update MySQL configuration to enable it to listen to external requests</p></li><li><p>Open the OS (Ubuntu) level firewall setting for port 3306</p></li></ul><p>Let’s add the ingress access rule first. Navigate to the VM Instance Details page, clicks on the Virtual Cloud Network link will bring you to the VCN page. From the VCN page, navigate to the security list via “Subnet link” &gt; “Default Security List for vcn-xxx”, then clicks on the “Add ingress rule” button to add a new rule.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/3204/1*ZNa4aNgS4yNMCV6c6RkENQ.png"                      alt="Ingress rule"                ><em>Ingress rule</em></p><p>Please note that the Source CIDR field should be the IP address you will use to connect to the MySQL instance from. It is possible to allow any IP addresses by 0.0.0.0&#x2F;0, but it is not recommended for obvious security reasons.</p><h3 id="Update-MySQL-configuration"><a href="#Update-MySQL-configuration" class="headerlink" title="Update MySQL configuration"></a><strong>Update MySQL configuration</strong></h3><p>By default, there is a configuration in MySQL setting to only allow the server to listen to local connections.</p><pre><code>bind-address   = 127.0.0.1</code></pre><p>We need to either comment it out or change it to an external IP address. In the below example, 0.0.0.0 will allow any IP to connect. Since I already set up the ingress rule earlier, so only the whitelisted IP can reach the server, I use any IP setting here.</p><pre><code>bind-address = 0.0.0.0</code></pre><p>The location of the MySQL config varies depending on the distribution versions. In my case, the file can be found at &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf. It can be in my.cnf or mysql.cnf file in other MySQL distributions.</p><p>After the file is updated, you will need to restart the server to make it effective.</p><pre><code>sudo systemctl restart mysql</code></pre><p>To verify the server is listening to port 3306 for any IP address after the change, run the following command</p><pre><code>netstat -anutp | grep : 3306</code></pre><p>You should see a line of output similar to below</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2520/1*bsJksYpJ4Lek4VwxS4Tg0g.png"                                     ></p><p>The last step is to open up port 3306 at the OS level.</p><h3 id="Configure-iptables"><a href="#Configure-iptables" class="headerlink" title="Configure iptables"></a><strong>Configure iptables</strong></h3><p>iptables is a firewall program that is used by ubuntu. The default Ubuntu distribution actually doesn’t apply any restrictions in iptables. In other words, port 3306 should be allowed by default setting. But the Oracle Ubuntu image takes a different approach, iptables is configured to deny all accesses by default. You can run this command to view the current rules:</p><pre><code>sudo iptables -L</code></pre><p>To allow port 3306 to pass through, you can run the following command</p><pre><code>sudo apt install iptables-persistentsudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 3306 -j ACCEPTsudo netfilter-persistent save</code></pre><p>Or for testing purposes, you can allow all ports temporary</p><pre><code>sudo iptables -I INPUT -j ACCEPT</code></pre><p>Finally, you should be able to connect to your new instance</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2516/1*a4SKHpree8Q675Sm8QvB7w.png"                      alt="MySQL Workbench test connection"                ><em>MySQL Workbench test connection</em></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2000/1*5vuWpHM3NGqtj_JYhkPCOQ.png"                                     ></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>So far, what we achieved are:</p><ul><li><p>Create an always free VM with 3 core CPU and 18 GB memory</p></li><li><p>Install and configure a MySQL server instance with proper security and user accounts</p></li><li><p>Update the VCN rules and allow the new server remotely accessible</p></li></ul><p>The new MySQL server runs very fast. I can’t be happier with it.</p><p>There are still some remaining works:</p><ul><li><p>migrate the existing database to the new DB instance</p></li><li><p>Set up automatic backups</p></li></ul><p>But this article is already too long, I will write another post for those tasks.</p><p>Thanks for reading!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Complete-guide-and-tricks-on-how-to-connect-to-the-MySQL-instances-remotely&quot;&gt;&lt;a href=&quot;#Complete-guide-and-tricks-on-how-to-connect-t</summary>
      
    
    
    
    <category term="Database" scheme="http://blog.ourcrmonline.com/categories/Database/"/>
    
    
    <category term="MySQL" scheme="http://blog.ourcrmonline.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t Leave Your NestJS API Exposed</title>
    <link href="http://blog.ourcrmonline.com/2023/01/05/donnot-export-your-nestjs-endpoint/"/>
    <id>http://blog.ourcrmonline.com/2023/01/05/donnot-export-your-nestjs-endpoint/</id>
    <published>2023-01-04T14:00:00.000Z</published>
    <updated>2024-06-29T04:14:35.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Using-Reflect-and-the-NestJS-Undocumented-API-to-Identify-Unsecured-Endpoints-in-Unit-Tests"><a href="#Using-Reflect-and-the-NestJS-Undocumented-API-to-Identify-Unsecured-Endpoints-in-Unit-Tests" class="headerlink" title="Using Reflect and the NestJS Undocumented API to Identify Unsecured Endpoints in Unit Tests"></a>Using Reflect and the NestJS Undocumented API to Identify Unsecured Endpoints in Unit Tests</h2><p>It is a given that an API should be secured to prevent potential attacks. However, it is surprising how often simple human mistakes can lead to an API endpoint being unprotected. A recent example of this is the <a class="link"   href="https://www.acma.gov.au/optus-data-breach" >Optus data breach <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, which was caused by “*an API that did not require authentication to access customer data.*”. This highlights the importance of thorough testing and strict security measures for APIs to prevent such incidents from occurring.</p><p>Unprotected API is one of the top OWASP vulnerabilities. It is defined as below:</p><blockquote><p>Modern applications often involve rich client applications and APIs, such as JavaScript in the browser and mobile apps, that connect to an API of some kind. These APIs are often unprotected and contain numerous vulnerabilities.</p></blockquote><p>To avoid unprotected API, the first line of defense is via unit test. In this article, we are going to discuss how to ensure NestJS controllers and Endpoints are protected using the Unit test.</p><h3 id="Guards"><a href="#Guards" class="headerlink" title="Guards"></a>Guards</h3><p>In NestJS, we use authentication&#x2F;authorization guards to protect controllers or endpoints. Using Guards, we can ensure only authorized users have access to the API. Below is an example of an authentication Guard.</p><pre><code>@Injectable()export class AuthGuard implements CanActivate &#123;  canActivate(    context: ExecutionContext,  ): boolean | Promise&lt;boolean&gt; | Observable&lt;boolean&gt; &#123;    const request = context.switchToHttp().getRequest();    return this.validateRequest(request);  &#125;  private validateRequest(request: any) &#123;    // Authenticate user request to ensure it is authenticated     // i.e. validate a token  &#125;&#125;</code></pre><p>The AuthGuard class contains canActivate method which takes an ExecutionContext object as an argument. The method performs validation to determine whether the request should be allowed.</p><p>To apply the AuthGuard to a controller, we can use the @UseGuards decorator</p><pre><code>@UseGuards(AuthGuard)@Controller()export class AppController &#123;&#125;</code></pre><p>If the @UseGuards decorator is accidentally removed, the API will become unprotected and vulnerable to unauthorized access. To ensure that the Guard is properly applied to the controller, we can use unit tests to verify its presence.</p><p>To achieve that, we need to use the <a class="link"   href="https://www.npmjs.com/package/reflect-metadata" >reflect-metadata <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> library and NestJS undocumented DiscoveryService API. Let’s look at the <a class="link"   href="https://www.npmjs.com/package/reflect-metadata" >reflect-metadata <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> library first.</p><h3 id="Reflect-MetaData"><a href="#Reflect-MetaData" class="headerlink" title="Reflect-MetaData"></a>Reflect-MetaData</h3><p>The reflect-metadata library provides support for the Reflect API, which is part of the ECMAScript specification. We can use it to get metadata at runtime. It is worth noting that NestJS also uses the <a class="link"   href="https://www.npmjs.com/package/reflect-metadata" >reflect-metadata <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> under the hood to work with metadata.</p><p>The below example demonstrates how to retrieve the Guards metadata from the AppController.</p><pre><code>const guards = Reflect.getMetadata(&#39;__guards__&#39;, AppController);</code></pre><p>The getMetaData method takes two arguments:</p><ul><li><p>metadataKey: A key used to store and retrieve metadata. In this case, the key is <strong>guards</strong>, it is used by NestJs to reference the Guards.</p></li><li><p>target: The target object on which the metadata is defined.</p></li></ul><p>with getMetadata method, we can write a simple Unit test to verify the AppController is protected.</p><pre><code>   it(&#39;should AuthGard be applied to the AppController&#39;, async () =&gt; &#123;      const guards = Reflect.getMetadata(&#39;__guards__&#39;, AppController);      const guard = new guards[0]();      expect(guard).toBeInstanceOf(AuthGuard);    &#125;);</code></pre><p>If there are multiple controllers in the app, it is possible to write a unit test that covers all of them at once? The answer is positive, but we need to use the NestJS Discovery Service.</p><h3 id="Discovery-Service"><a href="#Discovery-Service" class="headerlink" title="Discovery Service"></a>Discovery Service</h3><p>The NestJS <a class="link"   href="https://github.com/nestjs/nest/blob/master/packages/core/discovery/discovery-service.ts" >discovery service <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> is an undocumented public API. It is important to note that an “undocumented” feature may be subject to change or breakage in the future. While it is a handy feature to use, it is generally best to avoid relying on undocumented features in your app. In my personal opinion, using it in unit test is acceptable as long as you are aware of the risk.</p><p>As shown below, using this.discoveryService.getControllers(), we can get a collection of type InstanceWrapper &#x3D; { metatype, name, instance, … }.</p><pre><code> const controllers = await discoveryService.getControllers(&#123;&#125;);</code></pre><p>To extract the guards metadata from the InstanceWrapper, we can use the getEnhancersMetadata method. In the test below, we loop through each controller and verify that they are protected by the AuthGuard.</p><pre><code>    it(&#39;should have AuthGard applied for all controllers&#39;, async () =&gt; &#123;      const controllers = await discoveryService.getControllers(&#123;&#125;);      controllers.map((c) =&gt; &#123;        const guard = c          .getEnhancersMetadata()          ?.filter(            (&#123; instance &#125;: InstanceWrapper) =&gt; instance instanceof AuthGuard,          );        expect(guard[0].name).toEqual(&#39;AuthGuard&#39;);      &#125;);    &#125;);</code></pre><p>To achieve a fine level of access control, we can define a RoleGuard and apply it to individual endpoints. We use SetMetadata in the function below to assign metadata with a specific key. SetMetadata is an out-of-box NestJS decorator function.</p><pre><code>import &#123; SetMetadata &#125; from &#39;@nestjs/common&#39;;export const Roles = (...roles: string[]) =&gt; SetMetadata(&#39;roles&#39;, roles);</code></pre><p>To apply a Roles decorator to an endpoint, we need to pass in a role to the decorator</p><pre><code>  @Get()  @Roles(&#39;Admin&#39;)  getAll() &#123;    return [];  &#125;</code></pre><h3 id="Secure-an-Endpoint"><a href="#Secure-an-Endpoint" class="headerlink" title="Secure an Endpoint"></a>Secure an Endpoint</h3><p>To detect whether an endpoint is associated with the Roles decorator, we use the getMetadata as below.</p><pre><code>      const decorators = Reflect.getMetadata(        &#39;roles&#39;,        DevController.prototype.getAll,      );</code></pre><p>In a unit test, we can verify whether an endpoint is protected by the roles decorator with a role</p><pre><code>    it(&#39;should getAll be accessible by Admin role only&#39;, () =&gt; &#123;      const decorators = Reflect.getMetadata(        &#39;roles&#39;,        DevController.prototype.getAll,      );      expect(decorators).toContain(&#39;Admin&#39;);    &#125;);</code></pre><p>The Reflect API can be used to get other metadata of the endPoint.</p><pre><code>  it(&#39;should getHello has correct path and http method&#39;, () =&gt; &#123;    const path = Reflect.getMetadata(&#39;path&#39;, appController.getHello);    expect(path).toBe(&#39;/&#39;);    const method = Reflect.getMetadata(&#39;method&#39;, appController.getHello);    expect(method).toBe(RequestMethod.GET);  &#125;);</code></pre><p>In this above usage of getMetaData, the keys being used are ‘path’ and ‘method’, which corresponds to the path and HTTP method of the getHello method, respectively.</p><h3 id="Bonus-Content-Use-Discovery-Service-to-dynamically-get-a-list-of-Services"><a href="#Bonus-Content-Use-Discovery-Service-to-dynamically-get-a-list-of-Services" class="headerlink" title="Bonus Content: Use Discovery Service to dynamically get a list of Services"></a>Bonus Content: Use Discovery Service to dynamically get a list of Services</h3><p>Discovery service can be a graceful solution to certain problems. For example, in one of my recent NestJS projects, there is a MapperResolver class:</p><pre><code>@Injectable()export class MapperResolver &#123;  private mapperList: IMapper[];  constructor(    private serviceAMapper: ServiceAMapper,    private serviceBMapper: ServiceBMapper,    private serviceCMapper: ServiceCMapper,    private serviceDMapper: ServiceDMapper,  ) &#123;    this.mapperList= [      serviceAMapper,      serviceBMapper,      serviceCMapper,      serviceDMapper    ];  &#125;  public Resolve(serviceType: string):IMapper &#123;    const mapper = this.mapperList.find(c =&gt; c.serviceType=== serviceType);    if (mapper) &#123;      return mapper;    &#125;    throw new Error(`No Mapper found`);  &#125;</code></pre><p>In the real-world project, there are more than 10 Mapper classes injected into the MapperResolver class constructor, this number continues to grow as new features are added. This has become a maintenance issue.</p><p>We can use Discovery Service to solve this problem. As this topic is outside the scope of this article, I will only give a brief description of the solution.</p><ul><li><p>create a decorator @ServiceRegister that takes an argument</p></li><li><p>add the decorator to each Mapper class i.e. @ServiceRegister(‘Mapper’)</p></li><li><p>use discoveryService.getProviders() to retrieve all providers and filter out the mapper services using the metadata.</p></li></ul><p>The end result is that we are able to remove all the injected Mapper services in the MapperResolver class. But again, please be careful in using DiscoveryService as it is an undocumented API.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>It’s important to regularly test and monitor the security of your application to ensure that it is secure and reliable. By embedding the security checking into Unit tests, and regularly running these tests, we can catch any issues and fix them before they cause problems in production.</p><p>Happy programming!</p><p><em>More content at <a class="link"   href="https://plainenglish.io/" >**PlainEnglish.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><strong>. Sign up for our <a class="link"   href="http://newsletter.plainenglish.io/" >**free weekly newsletter <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong>. Follow us on <a class="link"   href="https://twitter.com/inPlainEngHQ" >**Twitter <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>**</em>, <a class="link"   href="https://www.linkedin.com/company/inplainenglish/" >***LinkedIn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><strong>, <a class="link"   href="https://www.youtube.com/channel/UCtipWUghju290NWcn8jhyAw" >**YouTube <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong>, and <a class="link"   href="https://discord.gg/GtDtUAvyhW" >**Discord <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.***</p><p><em><strong>Interested in scaling your software startup</strong>? Check out <a class="link"   href="https://circuit.ooo/?utm=publication-post-cta" >**Circuit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em><em>.</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Using-Reflect-and-the-NestJS-Undocumented-API-to-Identify-Unsecured-Endpoints-in-Unit-Tests&quot;&gt;&lt;a href=&quot;#Using-Reflect-and-the-NestJS-</summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    <category term="Security" scheme="http://blog.ourcrmonline.com/categories/Web-Development/Security/"/>
    
    
    <category term="NestJS" scheme="http://blog.ourcrmonline.com/tags/NestJS/"/>
    
    <category term="Security" scheme="http://blog.ourcrmonline.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Maximize Code Security in Your NestJS Applications (Part 1)</title>
    <link href="http://blog.ourcrmonline.com/2022/12/21/maximize-code-security-in-your-nestjs-applications-part-1/"/>
    <id>http://blog.ourcrmonline.com/2022/12/21/maximize-code-security-in-your-nestjs-applications-part-1/</id>
    <published>2022-12-20T14:00:00.000Z</published>
    <updated>2024-06-29T04:21:17.426Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Top-Secure-Code-Best-Practices-for-NestJS-Developers"><a href="#Top-Secure-Code-Best-Practices-for-NestJS-Developers" class="headerlink" title="Top Secure Code Best Practices for NestJS Developers"></a>Top Secure Code Best Practices for NestJS Developers</h4><p>As a developer, we all know how critical is code security. The recent data breaches at <a class="link"   href="https://www.optus.com.au/about/media-centre/media-releases/2022/09/optus-notifies-customers-of-cyberattack" >Optus <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and <a class="link"   href="https://www.medibank.com.au/health-insurance/info/cyber-security/" >Medibank  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>highlight the importance of code security again. So, the question is: how can we write secure code to prevent various types of attacks in web applications? It is essential to follow best practices to write secure code, so our App is protected against vulnerabilities and threats.</p><p>Before we dive into how to prevent the security risk? let’s first examine the most common types of security risks. This will give us a better understanding of the challenges to keep our App secure.</p><p>The OWASP Top 10 is a widely accepted list of the most critical security risks for web applications, as determined through consensus among industry experts. Below is the list of the top 10 risks in 2017 and 2021.</p><p><img src="https://cdn-images-1.medium.com/max/2250/1*ObUHh3Z9GbA8jFlBoTHaXg.png" alt="Source: [https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/)"><em>Source: <a class="link"   href="https://owasp.org/www-project-top-ten/" >https://owasp.org/www-project-top-ten/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p><p>Many of the top 10 are critical for the security of web Apps.</p><p>As part 1 of a two-part article, I will walk through a few risks and the best practices that you can follow to prevent the risk.</p><p>They include:</p><ul><li><p><a href="#4d65">Broken access control</a></p></li><li><p><a href="#3fb4">Server-side request forgery (SSRF)</a></p></li><li><p><a href="#2dac">Mass assignment</a></p></li><li><p><a href="#ffd8">Sensitive information exposure</a></p></li></ul><h3 id="Broken-access-control"><a href="#Broken-access-control" class="headerlink" title="Broken access control"></a>Broken access control</h3><p>Broken function access is one of the most common risks. It occurs when an attacker is able to access unauthorized functions or resources. One real-world example is the <a class="link"   href="https://gibsonsec.org/snapchat/" >Snapchat incident on Jan 2014 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>To prevent this risk, it is important to follow the principle of <strong>least privilege</strong>. This means that access should always be denied by default, and privileges should only be granted on an as-needed basis.</p><p>We can use access control mechanisms such as role-based access control (RBAC) or access control lists (ACLs) to restrict access to functions or resources based on a user’s role or permissions.</p><p>Here’s an example of RBAC using <a class="link"   href="https://docs.nestjs.com/guards" >Guards  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>in a NestJS application:</p><pre><code>import &#123; Injectable, CanActivate, ExecutionContext &#125; from &#39;@nestjs/common&#39;;@Injectable()export class AdminRoleGuard implements CanActivate &#123;  canActivate(context: ExecutionContext): boolean &#123;    const request = context.switchToHttp().getRequest();    const user = request.user;    return user.role === &#39;admin&#39;;  &#125;&#125;@Controller(&#39;cats&#39;)export class CatsController &#123;  @UseGuards(AdminRoleGuard)  @Get()  async findAll(): Promise&lt;Cat[]&gt; &#123;    return this.catsService.findAll();  &#125;&#125;</code></pre><p>In the above code snippet, we create an AdminRoleGuard that implements the CanActivate interface provided by NestJS. It checks the role of the current user and returns true when the user is an admin. We then use the @UseGuards decorator to apply the AdminRoleGuard to the findAll method, which will restrict access to the endpoint for users withadmin role only.</p><p>The access control mechanisms should be applied using centralized functions from a proven framework, to ensure it is safe and easy to maintain.</p><p>It is also recommended to have unit tests that tests the necessary Guards being applied on a controller. Thus if the Guard is accidentally removed, the unit test will catch it.</p><h3 id="Server-side-request-forgery-SSRF"><a href="#Server-side-request-forgery-SSRF" class="headerlink" title="Server-side request forgery (SSRF)"></a>Server-side request forgery (SSRF)</h3><p>SSRF is a type of cyber attack in which an attacker induces a server to make unintended requests on their behalf. These requests can be used to access restricted resources from internal networks.</p><p>To prevent SSRF, It is essential to properly validate user input. Below is an example of an endpoint vulnerable to SSRF risk.</p><pre><code>import &#123; Controller, Get, Res, HttpStatus, Query &#125; from &#39;@nestjs/common&#39;;@Controller()export class CatsController &#123;  @Get()  async getData(@Query(&#39;url&#39;) url: string, @Res() res) &#123;    const response = await fetch(url);    return await response.json();  &#125;&#125;</code></pre><p>In the above example, the App makes a request to the URL sourced from url query parameter and returns the response data to the client. Obviously, it is vulnerable to SSRF attacks because an attacker can send a request to the server with a malicious URL that accesses restricted resources from the internal network.</p><p>We should validate the URL parameter to prevent the risk as below.</p><pre><code>import &#123; Controller, Get, Res, HttpStatus, Query &#125; from &#39;@nestjs/common&#39;;import &#123; isURL &#125; from &#39;validator&#39;;@Controller()export class CatsController &#123;  @Get()  async getData(@Query(&#39;url&#39;) url: string, @Res() res) &#123;    if (!isURL(url)) &#123;      return res.status(HttpStatus.BAD_REQUEST).send(&#39;Invalid URL&#39;);    &#125;    const response = await fetch(url);    return await response.json();  &#125;&#125;</code></pre><p>To further improve security, we shouldn’t allow users to pass in URLs directly in query parameters. Instead, we should use an existing service to retrieve the data from a trusted API.</p><pre><code>@Controller()export class CatsController &#123;  @Get()  async getData(@Query(&#39;name&#39;) dataName: string, @Res() res) &#123;    const response = await dataService.GetDataByName(dataName);    return await response.json();  &#125;&#125;</code></pre><p>There are other ways to prevent SSRF attacks:</p><ul><li><p>Only make requests to trusted sources (i.e. known APIs or services)</p></li><li><p>Implement security headers (i.e. headers like “<a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options" >X-Frame-Options <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>”) to prevent clickjacking attacks and other types of malicious requests.</p></li><li><p>Use a Content Security Policy(CSP) to specify which sources are allowed to make requests on behalf of your application.</p></li></ul><p>In NestJS, you can use <a class="link"   href="https://docs.nestjs.com/security/helmet" >helmet  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>to easily set up security headers and a Content Security Policy.</p><h3 id="Mass-Assignment"><a href="#Mass-Assignment" class="headerlink" title="Mass Assignment"></a>Mass Assignment</h3><p>Mass assignment is a vulnerability in that an attacker is able to modify multiple object properties by sending a malicious request to your App.</p><p>In the below example, a new user is created based on the data coming from the request body. It is vulnerable to mass assignment attacks because an attacker can send a request with malicious data that overwrites sensitive fields in the Client object (i.e. role or password).</p><pre><code>import &#123; Controller, Post, Body &#125; from &#39;@nestjs/common&#39;;@Controller(&quot;client&quot;)export class ClientController &#123;  @Post()  create(@Body() body) &#123;    const client = new Client(body);    return await client.save();  &#125;&#125;</code></pre><p>To prevent mass assignment, we can define a whitelist of allowed properties for each object. In the below example, we implemented a white list of properties to prevent overwriting of sensitive fields.</p><pre><code>import &#123; Entity, Column, PrimaryGeneratedColumn &#125; from &#39;typeorm&#39;;@Entity()export class Client&#123;  @PrimaryGeneratedColumn()  id: number;  @Column()  name: string;  @Column()  role: string;  @Column()  password: string;  @Column(&#125;)  email: string;&#125;@Controller(&#39;client&#39;)export class ClientController &#123;  constructor(private clientService: ClientService) &#123;&#125;  @Post()  async create(@Body() client: Pick&lt;User, &#39;name&#39; | &#39;email&#39;&gt;) &#123;    return await this.clientService.create(client);  &#125;&#125;</code></pre><p>Here, we use the TypeScript Pick type to define a whitelist of properties for the User entity. The @Body decorator is then used to bind the request body to the user parameter, which will only include the allowed properties. This prevents an attacker from modifying other properties of the User entity through mass assignment.</p><p>Other ways to prevent mass assignment include:</p><ul><li><p>Use a reduced DTO, instead of a general DTO. For example, create a InsertClientEntity and UpdateClientEntity. These DTOs only contain properties that are allowed in the insert and update operation.</p></li><li><p>Avoid directly binding to an object coming from the client side.</p></li></ul><h3 id="Sensitive-information-exposure"><a href="#Sensitive-information-exposure" class="headerlink" title="Sensitive information exposure"></a>Sensitive information exposure</h3><p>Sensitive information includes things like passwords, API keys, and other confidential data. Any data that contains personal information or payment-related information are sensitive.</p><p>Often, when designing web API, excessive data are returned to the client.</p><pre><code>import &#123; Controller, Get, Param &#125; from &#39;@nestjs/common&#39;;import &#123; Client&#125; from &#39;./client/client.entity&#39;;@Controller()export class ClientController &#123;  @Get(&#39;clients/:id&#39;)  async getClient(@Param(&#39;id&#39;) id: string): Promise&lt;Client&gt; &#123;    // Return all fields for the client    return await Client.findById(id);  &#125;&#125;</code></pre><p>In this example, the getClient method is returning all fields for the client including sensitive data like role or password. Although these data aren’t consumed or displayed by clients, they still can be intercepted and exposed by attackers.</p><p>To prevent sensitive personal data exposure, we should only return the necessary data of the client, which is name and email fields in this case. In a nutshell, we should only expose the minimum amount of data.</p><pre><code>import &#123; Controller, Get, Param, UseGuards &#125; from &#39;@nestjs/common&#39;;import &#123; Client&#125; from &#39;./client/client.entity&#39;;@Controller()export class ClientController &#123;  @Get(&#39;clients/:id&#39;)  async getClient(@Param(&#39;id&#39;) id: string): Promise&lt;Client&gt; &#123;    // Only return the name and email    return await Client.findById(id).map(c =&gt; &#123;c.name, c.email&#125;);  &#125;&#125;</code></pre><p>To prevent sensitive data exposure, below are other guidelines to follow:</p><ul><li><p>Do NOT store sensitive information to version control. This information includes environment variables or configuration files</p></li><li><p>Identify sensitive information (<a class="link"   href="https://gdpr-info.eu/" >GDPR <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, <a class="link"   href="https://www.pcisecuritystandards.org/" >PCI,  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>and <a class="link"   href="https://www.cyber.gov.au/acsc/view-all-content/glossary/personally-identifiable-information-pii" >PII data <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>) in your system, and secure them through encryption.</p></li><li><p>Make sure that your App uses HTTPS between the client and the server. This will prevent sensitive data from being intercepted during transmission.</p></li></ul><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In this article, we walk through 4 common risks and the best practices to prevent those risks within the context of NestJS.</p><p>By following these best practices, you can write secure code to ensure that your NestJS app is as secure as possible.</p><p>In part 2 of the article, we continue the discussion on other top OWASP risks.<br><a href="https://levelup.gitconnected.com/maximize-code-security-in-your-nestjs-applications-part-2-be707466b7ea"><strong>Maximize Code Security in Your NestJS Applications (Part 2)</strong><br><em>Secure Code Best Practices with Real-World Examples</em>levelup.gitconnected.com</a></p><p>Happy Programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Top-Secure-Code-Best-Practices-for-NestJS-Developers&quot;&gt;&lt;a href=&quot;#Top-Secure-Code-Best-Practices-for-NestJS-Developers&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="Security" scheme="http://blog.ourcrmonline.com/categories/Security/"/>
    
    
    <category term="TypeScript" scheme="http://blog.ourcrmonline.com/tags/TypeScript/"/>
    
    <category term="NestJS" scheme="http://blog.ourcrmonline.com/tags/NestJS/"/>
    
    <category term="Security" scheme="http://blog.ourcrmonline.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>Turbocharge Your App with NestJS - Tips and Tricks</title>
    <link href="http://blog.ourcrmonline.com/2022/09/21/build-a-high-performance-nestjs-app/"/>
    <id>http://blog.ourcrmonline.com/2022/09/21/build-a-high-performance-nestjs-app/</id>
    <published>2022-09-20T14:00:00.000Z</published>
    <updated>2024-06-29T04:12:44.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-Performance-Boosting-Techniques-to-Get-the-Most-Out-of-NestJS"><a href="#4-Performance-Boosting-Techniques-to-Get-the-Most-Out-of-NestJS" class="headerlink" title="4 Performance Boosting Techniques to Get the Most Out of NestJS"></a>4 Performance Boosting Techniques to Get the Most Out of NestJS</h2><p>As a powerful Node.js application framework, NestJS offers a wide range of features for building server-side apps. Its popularity continues to grow as more developers discover its benefits.</p><p>However, when it comes to building a NestJS app, performance is often an overlooked aspect. In this article, I will discuss a few practical techniques for crafting a high-performance NestJS application</p><h3 id="Architecture-Choice"><a href="#Architecture-Choice" class="headerlink" title="Architecture Choice"></a>Architecture Choice</h3><p>By default, NestJS runs on top of <a class="link"   href="https://expressjs.com/" >Express <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> primary due to its popularity. Although there are some overheads, NestJS’s performance isn’t far away from Express. Express is considered to be a well-performed framework. Thus the default option: Nest-Express is good enough for a normal server-side App.</p><p>But if performance is the first priority, a better option is to use F<a class="link"   href="https://docs.nestjs.com/techniques/performance" >astify <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> which is much faster than Express.</p><p>Below is a recent benchmark test results for Nest-Express vs Nest-Fastify vs Express alone. We can see that Nest-Fastify is more than 3 times faster than Nest-Express.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*1LITO4dK7Uw3AJEuPrh-3g.png" alt="A recent benchmark ([https://github.com/nestjs/nest/pull/10276/checks?check_run_id=8318006381](https://github.com/nestjs/nest/pull/10276/checks?check_run_id=8318006381))"><em>A recent benchmark (<a class="link"   href="https://github.com/nestjs/nest/pull/10276/checks?check_run_id=8318006381" >https://github.com/nestjs/nest/pull/10276/checks?check_run_id&#x3D;8318006381 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</em></p><p>If you are building a new NestJS App, one of the first things to consider is whether you should stick to the Express, or start with Fastify. For existing Apps, it is also possible to migrate to Fastify from Express since Nest provides framework independence using<a class="link"   href="https://docs.nestjs.com/techniques/performance" > adapter <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><h3 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h3><p>Caching can improve your NestJS app or any web app performance dramatically. It is a complex topic and is considered to be one of the <a class="link"   href="https://martinfowler.com/bliki/TwoHardThings.html" >two hard things in computing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. However, NestJS has made it easier with its well-abstracted API.</p><p>NestJS provides an out-of-box<a class="link"   href="https://docs.nestjs.com/techniques/caching" > cache manager. <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> The cache manager provides an API for various cache storage providers. The default storage provider is an in-memory data store and it is built-in. To enable in-memory caching, we need to import the CacheModule as below.</p><pre><code>import &#123; CacheModule, Module &#125; from &#39;@nestjs/common&#39;;import &#123; AppController &#125; from &#39;./app.controller&#39;;@Module(&#123;  imports: [CacheModule.register()],  controllers: [AppController],&#125;)export class AppModule &#123;&#125;</code></pre><p>For more configuration options, refer to the <a class="link"   href="https://docs.nestjs.com/techniques/caching" >official documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>You can switch to a number of other storage providers, for example, <a class="link"   href="https://github.com/dabroek/node-cache-manager-redis-store" >redis store <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>Regardless of which storage provider you choose, you can set up a cache interceptor to automatically cache the get response.</p><pre><code>import * as redisStore from &#39;cache-manager-redis-store&#39;;@Module(&#123;  imports: [CacheModule.register(&#123;store: redisStore&#125;)],  controllers: [AppController],  providers: [    &#123;      provide: APP_INTERCEPTOR,      useClass: CacheInterceptor,    &#125;,  ],&#125;)</code></pre><p>The above configuration will import CacheInterceptor, and bind it to all endpoints globally. Alternatively, you also can use UseInterceptors to bind the CacheInterceptor at the controller level.</p><h3 id="Enable-Gzip"><a href="#Enable-Gzip" class="headerlink" title="Enable Gzip"></a>Enable Gzip</h3><p>Enabling Gzip compression can greatly improve API performance. It doesn’t only work with NestJS, instead, it is applicable to any common Web API service. It is easy to implement and very effective, but at the same time also easily to be forgotten.</p><p>Gzip compresses API requests and responses. The result is up to 10x reduced payload.</p><p>You can either enable Gzip compression via Nginx. Most NestJS apps sit behind Nginx, and you can configure Nginx to use gzip to compress the HTTP response on the fly. The following is an example to enable Gzip in nginx.conf.</p><pre><code>gzip on;gzip_disable &quot;msie6&quot;;</code></pre><p>Another way is to enable Gzip within the NestJS app. In your NestJs App, you can make use of the compression middleware package provided to compress and serve content.</p><pre><code>import * as compression from &#39;compression&#39;;// somewhere in your initialization fileapp.use(compression());</code></pre><p>In the above example, the compression middleware is imported from the @nestjs&#x2F;common package and used to enable gzip compression for all requests to the app. This allows the app to compress the response using gzip if the client supports it, which can improve the performance and efficiency of the app.</p><h3 id="Cluster-Mode"><a href="#Cluster-Mode" class="headerlink" title="Cluster Mode"></a>Cluster Mode</h3><p>By default, the NestJS App instance runs in a single thread. Since all servers have multiple CPU cores, the single-thread instance doesn’t take full advantage of the server resources.</p><p>To utilize the multiple cores to improve performance, we can use the Cluster<a class="link"   href="https://nodejs.org/api/cluster.html" > module <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> in NodeJS. Under cluster mode, the child processes run as a cluster, thus incoming requests are handled simultaneously. It results in better throughput.</p><p>It is straightforward to create a cluster service in NestJS. Below is an example of implementation.</p><pre><code>import &#123; NestFactory &#125; from '@nestjs/core';import &#123; AppModule &#125; from './app.module';import * as os from 'os';const cluster = require('node:cluster');const numCPUs = os.cpus().length;async function bootstrap() &#123;  const app = await NestFactory.create(AppModule);  await app.listen(3000);&#125;if(cluster.isMaster)&#123;  console.log(`Master server started on $&#123;process.pid&#125;`);  for (let i = 0; i < numCPUs; i++) &#123;      cluster.fork();  &#125;  cluster.on('exit', (worker, code, signal) => &#123;      console.log(`Worker $&#123;worker.process.pid&#125; died. Restarting`);      cluster.fork();  &#125;)&#125; else &#123;  console.log(`Cluster server started on $&#123;process.pid&#125;`)  bootstrap();&#125;</code></pre><p>The gist of the above code is</p><ul><li><p>Firstly, we import the cluster module and get the number of CPU cores</p></li><li><p>The master process is responsible for creating the worker processes, and the worker processes are responsible for running the NestJS app.</p></li><li><p>For the master process, a worker process is created for each CPU available. We also listen to the exit of a worker process, when any worker process crashes, the master process will fork a new one.</p></li><li><p>For the child process, we can use the bootstrap function to start the server instance.</p></li></ul><p>In the production environment, you can use pm2 to run the App in cluster mode. The command below will start the app with cluster mode for 8 CPU cores.</p><pre><code>pm2 start dist/main.js -i 8</code></pre><p>Overall, using cluster mode in a NestJS app can provide improved performance and scalability by sharing the workload across multiple worker processes.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Optimizing the performance of a NestJS application is a complex and multifaceted task. In this article, we discussed how to utilize the built-in NestJS features like Fastify, and Cache Manager to improve performance. Gzip and Cluster modules are also commonly used to optimize not only NestJS but also other NodeJS web apps.</p><p>If you found this article useful, you may also like to check out my other NestJS-related articles on <a class="link"   href="https://medium.com/p/be6bc77e789e" >how to build efficient and maintainable NestJS apps <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and <a class="link"   href="https://medium.com/gitconnected/maximize-code-security-in-your-nestjs-applications-part-1-b7abb99fa048" >NestJS security <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;4-Performance-Boosting-Techniques-to-Get-the-Most-Out-of-NestJS&quot;&gt;&lt;a href=&quot;#4-Performance-Boosting-Techniques-to-Get-the-Most-Out-of-</summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    
    <category term="TypeScript" scheme="http://blog.ourcrmonline.com/tags/TypeScript/"/>
    
    <category term="NestJS" scheme="http://blog.ourcrmonline.com/tags/NestJS/"/>
    
    <category term="Performance" scheme="http://blog.ourcrmonline.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Upload Files to S3 Using Angular and NestJS</title>
    <link href="http://blog.ourcrmonline.com/2022/09/12/upload-files-to-s3-using-angular-and-nestjs/"/>
    <id>http://blog.ourcrmonline.com/2022/09/12/upload-files-to-s3-using-angular-and-nestjs/</id>
    <published>2022-09-11T14:00:00.000Z</published>
    <updated>2024-06-29T04:22:57.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="An-End-to-End-Example-using-Angular-and-NestJS"><a href="#An-End-to-End-Example-using-Angular-and-NestJS" class="headerlink" title="An End to End Example using Angular and NestJS"></a>An End to End Example using Angular and NestJS</h2><p>Recently, I worked on an S3 file-uploading feature for an Angular&#x2F;NestJS App. To my surprise, I have difficulty finding a tutorial with complete and working examples. Thus, I thought it might be useful to walk through the process of file uploading to the S3 (Amazon Simple Storage Service) bucket with Angular and NestJS.</p><p>I assume that you have basic knowledge of Angular and NestJS. So I will skip those initial App Setups and focus on the file uploading part.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>You will need these technologies to follow along:</p><ul><li><p>Angular 14</p></li><li><p>NestJS version 9</p></li><li><p>NodeJS v14 or above</p></li><li><p>An AWS account</p></li></ul><h3 id="S3-bucket-and-Access-Key-x2F-Secret-Access-Key"><a href="#S3-bucket-and-Access-Key-x2F-Secret-Access-Key" class="headerlink" title="S3 bucket and Access Key&#x2F;Secret Access Key"></a>S3 bucket and Access Key&#x2F;Secret Access Key</h3><p>To upload files to S3, we need to set up the S3 bucket and IAM user required for NestJS API to access it.</p><p>If you don’t have an S3 bucket yet, follow <a class="link"   href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html" >this instruction <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> to create one.</p><p>The next step is to log in to your AWS account and navigate to IAM to add a user. Enter a user name and tick the “Access key -Programmatic access” option.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2000/1*gTTzcQ0WjgRi6hvn5RwJvw.png"                      alt="Create IAM User"                ><em>Create IAM User</em></p><p>Then, click on the “Next: Permission” button to attach the “AmazonS3FullAccess” policy to the IAM user.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2486/1*y72uqoq2Ig1uzhWHQCR39g.png"                      alt="Attach existing policy"                ><em>Attach existing policy</em></p><p>Click on the “Next” button to accept the default setting and create the user. The Access key ID and Secret access key will be shown on the success screen. We can download the CSV file to keep the key values for later use.</p><p>Here we create an IAM user with full access to all the S3 buckets under your AWS account. In the production environment, we should create a custom policy to restrict the IAM user to access the particular S3 bucket for file uploading only. But for sake of simplicity, we skip this step in this article.</p><p>Now, we have the S3 bucket ready. Let’s build the file upload API with NestJS.</p><h3 id="NestJS-file-uploading"><a href="#NestJS-file-uploading" class="headerlink" title="NestJS file uploading"></a>NestJS file uploading</h3><p>We can create a new NestJS App using Nest CLI.</p><pre><code>nest new ng-nest-upload</code></pre><p>We need to install the aws-sdk package.</p><pre><code>npm install aws-sdk @types/aws-sdk</code></pre><p>We also need to install the type definition of multer</p><pre><code>npm i -D @types/multer</code></pre><blockquote><p>NestJs makes use of <a class="link"   href="https://www.npmjs.com/package/multer" >Multer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> to handle the file upload. Multer is a node.js middleware for handling multipart&#x2F;form-data, which is primarily used for uploading files. Multer extracts the values of the form text fields into a body object. It also creates a new object for file or multiple files in the request.file or request.files object. The body object contains the values of the text fields of the form, and the file or files object contains the files uploaded via the form.</p></blockquote><p>Let’s create the file upload endpoint which captures and saves the file from FileInterceptor.</p><pre><code>  @Post('upload')  @UseInterceptors(FileInterceptor('file'))  async uploadFile(    @UploadedFile() file: Express.Multer.File,    @Request() req,  ): Promise<any> &#123;    const result = await this.fileservice.uploadPublicFile(      file.buffer,      file.originalname,    );    return new ResponseModel(result);   &#125;</code></pre><p>We use two decorators here:</p><ul><li><p>FileInterceptor: It takes the field name as the first parameter to extract the uploaded file. The field name is sent from the client multipart&#x2F;form-data, thus you will need to update it to match the name of the field in your code. The FileInterceptor uses Multer under the hood.</p></li><li><p>UploadedFile: It is used to reference the file payload from request.</p></li></ul><h3 id="Save-the-file-to-S3-Bucket"><a href="#Save-the-file-to-S3-Bucket" class="headerlink" title="Save the file to S3 Bucket"></a>Save the file to S3 Bucket</h3><p>In the above controller, we also use FileService to save the file to S3. In FileService, we use aws-sdk v3 to upload a stream object to an S3 bucket. As shown below, we need to specify 3 parameters</p><ul><li><p>Bucket: name of the S3 bucket</p></li><li><p>Body: a buffer object representing the file</p></li><li><p>Key: Unique key for the file</p></li></ul><pre><code>@Injectable()export class FileService &#123;  async uploadPublicFile(dataBuffer: Buffer, filename: string) &#123;    try &#123;      const s3 = new S3();      const uploadResult = await s3        .upload(&#123;          Bucket: 'file-uploads',          Body: dataBuffer,          Key: `$&#123;uuid()&#125;-$&#123;filename&#125;`        &#125;)        .promise();      return  &#123;        key: uploadResult.Key,        url: uploadResult.Location,      &#125;;    &#125; catch (err) &#123;      console.log(err);      return &#123; key: 'error', url: err.message &#125;;    &#125;  &#125;&#125;</code></pre><p>How is the access configuration to S3 set up in NestJS API? we initialize these configurations at thebootstrap method of main.ts.</p><pre><code>async function bootstrap() &#123;  const app = await NestFactory.create(AppModule);  app.setGlobalPrefix('api');   config.update(&#123;        accessKeyId: '[your S3 Access key]',        secretAccessKey: '[your S3 secret]',        region: '[your S3 region]',      &#125;);  await app.listen(3000);&#125;bootstrap();</code></pre><p>Again for Sake of simplicity, the Access Key and Secret are hardcoded in the above example. In the real-life App, they should come from environment variables.</p><h3 id="Angular-client"><a href="#Angular-client" class="headerlink" title="Angular client"></a>Angular client</h3><p>To upload files from an Angular App, we use the <a class="link"   href="https://medium.com/gitconnected/3-ways-to-access-local-files-from-web-browser-70f57fa57e50" >*File *interface <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> that provides information about files and allows JavaScript on a web page to access their content.</p><p>The following<input type="file"> represents a file select field and a “Choose file” button. This plain button allows users to access local files from a browser. We can use the accept attribute to limit the type of files to upload.</p><pre><code>&lt;input type=&quot;file&quot; [accept]=&quot;acceptedFileExtensions&quot; (change)=&quot;attachFile($event)&quot;&gt;</code></pre><p>Unfortunately, we can’t change the style of the default file select button. The solution is to use another custom button to invoke the default button. In the code below, we hide the default button and style the custom button with CSS class fileButton.</p><pre><code>  <input #fileInput type="file" class="file-input" [accept]="acceptedFileExtensions" (change)="attachFile($event)" />  <div class="row document-type">    <div class="col-xs-12">      <button class="fileButton" action="file" (click)="onSelectFile()" type="submit">Upload document</button>      allowed file types(JPG, PNG, GIF)    </div>  </div></code></pre><p>In the UploadComponent, we use @ViewChild decorator to get a reference to the hidden file select button in the template.</p><pre><code>@ViewChild(‘fileInput’, &#123; static: false &#125;) fileInput: ElementRef | undefined;</code></pre><p>Instead of calling the click handler within the Html template, we can invoke the hidden button click within the component class as below.</p><pre><code>this.fileInput.nativeElement.click();</code></pre><p>To send the file to the NestJS API, we construct the formData and post a request to the NestJS endpoint as below.</p><pre><code>  attachFile(event: any) &#123;    const file: File = event.target.files?.[0];    if (file && this.isValid(file)) &#123;      this.errorMessage = '';      const formData = new FormData();      formData.append('file', file, file.name);      const uploadFileHeaders = new HttpHeaders(&#123;        Accept: `application/json, text/plain, */*`,      &#125;);      this.httpClient        .post('/api/file-upload/upload', formData, &#123;          headers: uploadFileHeaders,        &#125;)        .subscribe(&#123;          next: (response) => &#123;            this.successMessage = `Document $&#123;file.name&#125; is uploaded successfully`;          &#125;,          error: (error) => &#123;            this.errorMessage = `failed to upload document.`;            return error;          &#125;,        &#125;);    &#125;  &#125;</code></pre><p>Please note that the post request header should not include the content type.</p><h3 id="Further-consideration"><a href="#Further-consideration" class="headerlink" title="Further consideration"></a>Further consideration</h3><p>In this contrived example, authentication isn’t being implemented. In real-life applications, you may consider using a JWT token to <a class="link"   href="https://medium.com/gitconnected/maximize-code-security-in-your-nestjs-applications-part-2-be707466b7ea" >enforce security <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> between the Angular client and the backend.</p><p>Another thing to consider is the safety of the uploaded files. Although we have implemented the validation of file extensions in the Angular client, it isn’t enough. It is still possible for a file with malicious content to slip in. A better approach is to set up a staging S3 bucket with an anti-virus scanning service. Any uploaded file will need to be scanned before it is moved to the final bucket for consumption. But this topic is out of the scope of this article and <a class="link"   href="https://aws.amazon.com/blogs/apn/integrating-amazon-s3-malware-scanning-into-your-application-workflow-with-cloud-storage-security/" >here  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>is a good starting point.</p><p>By performing these checks on the uploaded file, you can ensure that it is not malicious and protect your system from potential harm.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In this article, we walk through an end-to-end example of uploading a file to S3 Bucket from an Angular client via NestJS API. With the built-in decorators, NestJS makes it really easy to handle the file-uploading process.</p><p>The complete source code can be found in this <a class="link"   href="https://github.com/sunnyy02/ng-nest-s3-upload" >GitHub repo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;An-End-to-End-Example-using-Angular-and-NestJS&quot;&gt;&lt;a href=&quot;#An-End-to-End-Example-using-Angular-and-NestJS&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    
    <category term="TypeScript" scheme="http://blog.ourcrmonline.com/tags/TypeScript/"/>
    
    <category term="Angular" scheme="http://blog.ourcrmonline.com/tags/Angular/"/>
    
    <category term="NestJS" scheme="http://blog.ourcrmonline.com/tags/NestJS/"/>
    
  </entry>
  
  <entry>
    <title>My Journey to Becoming a Certified Kubernetes Application Developer</title>
    <link href="http://blog.ourcrmonline.com/2022/07/11/how-i-passed-the-ckad-exam-certified-kubernetes-application-developer/"/>
    <id>http://blog.ourcrmonline.com/2022/07/11/how-i-passed-the-ckad-exam-certified-kubernetes-application-developer/</id>
    <published>2022-07-10T14:00:00.000Z</published>
    <updated>2024-06-29T04:16:01.424Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Tips-to-study-prepare-and-pass-the-CKAD-exam"><a href="#Tips-to-study-prepare-and-pass-the-CKAD-exam" class="headerlink" title="Tips to study, prepare and pass the CKAD exam"></a>Tips to study, prepare and pass the CKAD exam</h5><p>As a <a class="link"   href="https://betterprogramming.pub/why-i-choose-to-be-a-contract-programmer-7d36bad23b6d" >seasoned contractor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, I am keen to update my skillset. Recently I passed the CKAD certification exam(Certified Kubernetes Application Developer).</p><p>Get ready to roll up your sleeves and put your skills to the test!</p><p>The CKAD exam is a hands-on challenge that requires you to solve real-world problems in live environments. It’s not an easy exam, but the payoff is worth it — this exam is highly valued in the industry and can give you an edge in your career. Don’t be fooled by traditional MCQ exams — the CKAD exam truly tests your knowledge and expertise in a way that sets you apart from the competition.</p><p>In this article, I am going to share my experiences with the exam.</p><h3 id="My-background"><a href="#My-background" class="headerlink" title="My background"></a>My background</h3><p>Before I started preparing for this exam, I had limited knowledge of Kubernetes. I had some exposure to OpenShift, and I understood some Kubernetes concepts like Pod, deployments, etc.</p><p>I am familiar with vim and basic Linux commands. This proved to be an important advantage.</p><h3 id="How-I-prepared-for-the-exam"><a href="#How-I-prepared-for-the-exam" class="headerlink" title="How I prepared for the exam"></a>How I prepared for the exam</h3><p>It took me 6 weeks to prepare and pass the exam. I did the following:</p><ul><li><p>I completed the Udemy course <a class="link"   href="https://www.udemy.com/course/certified-kubernetes-application-developer/" >Kubernetes Certified Application Developer (CKAD) with Tests <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. This is an excellent course, with up-to-date information.</p></li><li><p>The two mock exams and two lightning labs on <a class="link"   href="https://kodekloud.com/" >kodecloud <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (provided free if you subscribe to the above Udemy course).</p></li><li><p><a class="link"   href="https://killer.sh/ckad" >CKAD simulator <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> from killer.sh. I practiced it a few times before the exam. You will get two free sessions after purchasing the CKAD exam. Each session allows you to access the simulator for 36 hours, it includes 22 exam questions and 3 preview questions. The simulator questions are slightly more difficult than the real exam, but the style and scope are very similar.</p></li><li><p><a class="link"   href="https://www.devopsmadness.com/cka_cheatsheet/" >CKAD Cheatsheet <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. It’s essential to get familiar with all the imperative commands.</p></li><li><p>I set up minikube on my Macbook and did a fair bit of practice.</p></li></ul><p>My study strategy is composed of multiple iterations of Udemy courses and practices. After completing the first round of the course, I took the mock exams and lightning labs. The first mock test result was not great, so I went back to the Udemy course to study the related topics again. I repeated this process until I passed all the mock exams and lightning labs within half an hour each.</p><p>I applied the same strategy for the simulator exam at killer.sh. During the first session, I couldn’t finish the 22 questions within two hours. After studying the answers and revisiting the topics, I got a good score and completed the 22 questions within the time frame. That gave me the confidence to take the actual exam.</p><p>The most important thing is to understand the key concepts. Many of the questions ask you to troubleshoot issues like a Pod or service not working&#x2F;un-connectable. Without a deep understanding of how those elements work together, it will be hard to answer them.</p><h3 id="Before-the-exam"><a href="#Before-the-exam" class="headerlink" title="Before the exam"></a>Before the exam</h3><p>During the pre-exam check, a proctor will check your exam environment via video. I got a few surprises during the check. Here are a few things you may want to know:</p><ul><li><p>Browser bookmarks are not allowed</p></li><li><p><strong>2nd monitor isn’t allowed</strong></p></li><li><p>the desk needs to be clear (no books, cups, or anything unrelated to the exam)</p></li></ul><h3 id="During-the-exam"><a href="#During-the-exam" class="headerlink" title="During the exam"></a>During the exam</h3><p>The test is carried out with a Linux VM embedded within PSI secure browser. The platform isn’t very friendly, and the latency is not ideal during the exam. In the beginning, I spent a few minutes figuring out how to properly copy&#x2F;paste. My vim skill is a great help during the exam.</p><p>The first thing I did is to create a few aliases</p><pre><code>alias k=kubectlalias kc=&quot;kubectl create&quot;export do=&quot;--dry-run=client -o yaml&quot;</code></pre><p>In the exam, I normally use an imperative command to create a YAML file as in the below example.</p><pre><code>k -n mynamspace run newPod --image=nginx $do &gt; newPod.yml</code></pre><p>Then, I edit the YAML file to add in what is required for the exam question and run the create command to action it.</p><pre><code>kc -f newPod.yml</code></pre><p>For each question, there is a warning to remind you to switch to the context required for the question. Don’t forget to do that, otherwise, you may get zero marks even if you did everything else perfectly.</p><p>The 2-hour exam came with 16 questions (the number of questions in your exam may be slightly different). I completed all questions with 10 mins left. I use the time left re-check my answers. So on average, I spent 6 to 7 mins on each question.</p><p>Before the exam, I read some blog posts suggesting answering based on score weighting instead of sequentially. But I didn’t follow this advice. I answered all the questions sequentially. I felt it was a distraction to consider score weighting during the exam. The score weighting is normally linear with complexity. The 2% score question is easier than the 8% score question. If I got stuck on a question, I will move on to the next one regardless of the score weighting.</p><h3 id="After-the-exam"><a href="#After-the-exam" class="headerlink" title="After the exam"></a>After the exam</h3><p>I received a few emails exactly after 24 hours (from the time that exam started) to inform me of the result, badge, certificate, etc. The certificate is valid for 3 years.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://cdn-images-1.medium.com/max/2244/1*Xj-8Ib3kpBBUpwTYon6dIQ.png"                                     ></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Overall, I felt that the level of difficulty of the exam is similar to the lightning labs in the Udemy course. It’s not difficult to pass if you prepare well and practice enough. I am satisfied with the time and effort spent preparing for the exam because I learned real skills on top of the certificate.</p><p>If you plan to take the exam, please remember</p><ul><li><p>Study the key concepts and get a good understanding</p></li><li><p>Be good with vim and Linux commands</p></li><li><p>Use alias, and imperative commands to save time</p></li><li><p>Be familiar with the official documentation website</p></li></ul><p>Good luck.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Tips-to-study-prepare-and-pass-the-CKAD-exam&quot;&gt;&lt;a href=&quot;#Tips-to-study-prepare-and-pass-the-CKAD-exam&quot; class=&quot;headerlink&quot; title=&quot;Tips</summary>
      
    
    
    
    <category term="Software Development" scheme="http://blog.ourcrmonline.com/categories/Software-Development/"/>
    
    <category term="Certification" scheme="http://blog.ourcrmonline.com/categories/Software-Development/Certification/"/>
    
    
    <category term="Kubernetes" scheme="http://blog.ourcrmonline.com/tags/Kubernetes/"/>
    
    <category term="CKAD" scheme="http://blog.ourcrmonline.com/tags/CKAD/"/>
    
  </entry>
  
  <entry>
    <title>Comparing four popular NestJS ORMs</title>
    <link href="http://blog.ourcrmonline.com/2022/07/01/comparing-four-popular-nestjs-ORM/"/>
    <id>http://blog.ourcrmonline.com/2022/07/01/comparing-four-popular-nestjs-ORM/</id>
    <published>2022-06-30T14:00:00.000Z</published>
    <updated>2024-06-29T04:13:22.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>NestJS is a popular Node.js server-side framework. It’s highly customizable, comes with a rich ecosystem, and is compatible with most Node.js libraries, including the ORM libraries.</p><h2 id="ORMs-in-NestJS"><a href="#ORMs-in-NestJS" class="headerlink" title="ORMs in NestJS"></a>ORMs in NestJS</h2><p>Object-relational mapping (ORM) is a technique that abstracts your database tables to data objects in memory. It allows you to query and write data to databases using data objects. ORMs are used to make database access easier, as developers won’t need to write raw queries. </p><p><a class="link"   href="https://blog.logrocket.com/why-you-should-avoid-orms-with-examples-in-node-js-e0baab73fa5/" >ORMs have their limitations <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, such as performance issues with complex queries, but they can still make your life easier when used in the right places.</p><p>NestJS is database-agnostic. For convenience, NestJS provides tight integrations with TypeORM and Sequelize out of the box with the @nestjs&#x2F;typeorm and @nestjs&#x2F;sequelize packages. You can also directly use any general purpose Node.js database integration library or ORM, but the ecosystem of NestJS ORMs is so massive, it can be daunting to choose the right one for your project. </p><p>In this article, we are going to walk through using four common ORMs with NestJS. They are:</p><ul><li>Sequelize</li><li>TypeORM</li><li>MikroORM</li><li>Prisma</li></ul><p>Our intention is to summarize their common characteristics, like popularity, features, documentation, and maturity, and for each ORM, a code snippet will be provided to give you the simplest example of applying the framework.</p><h2 id="NestJS-and-Sequelize"><a href="#NestJS-and-Sequelize" class="headerlink" title="NestJS and Sequelize"></a>NestJS and Sequelize</h2><p>Introduced around 2014, <a class="link"   href="https://github.com/sequelize/sequelize" >Sequelize <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> is an easy-to-use and Promise-based ORM for Node.js.</p><p>It supports many databases, including PostgreSQL, MySQL, MariaDB, SQLite, DB2 and MSSQL. Its limitations include a lack of NoSQL support and only supporting the Active Record pattern.</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><p>Sequelize provides a rich set of features: transaction and migration support, model validations, eager and lazy loading, and read replication, among others. Sequelize has reasonable documentation with rich information and good examples, but sometimes I find it’s not easy to search for a particular topic.</p><p>Sequelize comes with a CLI that can create a database, initialize configuration and seeders, or manage migration. It also uses the <a class="link"   href="https://www.martinfowler.com/eaaCatalog/activeRecord.html" >Active Record <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> pattern. In the Active Record pattern, a database row is mapped into an object in application, and a database table is represented by a class. Thus, when we create an entity object and call the <code>save</code> method, a new row is added to the database table. </p><p>The main benefit of the Active Record pattern is its simplicity: you can directly use the entity classes to represent and interact with the database tables.</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>Sequelize is easy to set up and use. Below is an example of the basic database configuration and operation. </p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">// TypeScript</span><br><span class="line">// Firstly, we create a Sequelize instance with an options object</span><br><span class="line">export const databaseProviders = [</span><br><span class="line">  &#123;</span><br><span class="line">    provide: &#x27;SEQUELIZE&#x27;,</span><br><span class="line">    useFactory: async () =&gt; &#123;</span><br><span class="line">      const sequelize = new Sequelize(&#123;</span><br><span class="line">        dialect: &#x27;postgres&#x27;,</span><br><span class="line">        host: &#x27;localhost&#x27;,</span><br><span class="line">        port: 5432,</span><br><span class="line">        username: &#x27;postgres&#x27;,</span><br><span class="line">        password: &#x27;postgres&#x27;,</span><br><span class="line">        database: &#x27;postgres&#x27;,</span><br><span class="line">      &#125;);</span><br><span class="line">      sequelize.addModels([Cat]); // Add all models</span><br><span class="line">      await sequelize.sync(); // Sync database tables</span><br><span class="line">      return sequelize;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">// Then, export the provider to make it accessible</span><br><span class="line">@Module(&#123;</span><br><span class="line">  providers: [...databaseProviders],</span><br><span class="line">  exports: [...databaseProviders],</span><br><span class="line">&#125;)</span><br><span class="line">export class DatabaseModule &#123;&#125;</span><br><span class="line"></span><br><span class="line">// Define model entity, each represent a table in the database</span><br><span class="line">@Table</span><br><span class="line">export class Cat extends Model &#123;</span><br><span class="line">  @Column</span><br><span class="line">  name: string;</span><br><span class="line"></span><br><span class="line">  @Column</span><br><span class="line">  age: number;</span><br><span class="line"></span><br><span class="line">  @Column</span><br><span class="line">  breed: string;</span><br><span class="line">&#125;</span><br><span class="line">// Create a repository provider</span><br><span class="line">export const catsProviders = [</span><br><span class="line">  &#123;</span><br><span class="line">    provide: &#x27;CATS_REPOSITORY&#x27;,</span><br><span class="line">    useValue: Cat,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line">// In CatsService, we inject the repository</span><br><span class="line">export class CatsService &#123;</span><br><span class="line">  constructor(</span><br><span class="line">    @Inject(&#x27;CATS_REPOSITORY&#x27;)</span><br><span class="line">    private catsRepository: typeof Cat,</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">// Then, we can perform database operations</span><br><span class="line">this.catsRepository.findAll&lt;Cat&gt;();</span><br></pre></td></tr></table></figure></div><p>In some cases, where it’s just easier to execute raw SQL queries, you can use the function <code>sequelize.query</code>.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// SQL Script. Source https://sequelize.org/docs/v6/core-concepts/raw-queries/</span><br><span class="line">const [results, metadata] = await sequelize.query(&quot;UPDATE users SET y = 42 WHERE x = 12&quot;);</span><br><span class="line">// Results will be an empty array and metadata will contain the number of affected rows.</span><br></pre></td></tr></table></figure></div><p>Sequelize is hard at work <a class="link"   href="https://sequelize.org/docs/v7/other-topics/typescript/" >making official TypeScript support possible <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, but for now, it is still recommended that you use the <code><a class="link"   href="https://www.npmjs.com/package/sequelize-typescript" >sequelize-typescript package <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></code> to work with TypeScript in your project.</p><h3 id="Community-and-popularity"><a href="#Community-and-popularity" class="headerlink" title="Community and popularity"></a>Community and popularity</h3><p>Sequelize is a very mature and stable ORM. It has an active community and a wide array of necessary tooling. As one of the most popular ORM frameworks, Sequelize has 26K stars and 4K forks on GitHub. It’s also directly supported by NestJS with <code>@nestjs/sequelize</code>.</p><h3 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h3><p>Sequelize is a general purpose ORM for Node.js apps. If you are looking for a stable, easy-to-use ORM, it is worth your consideration.</p><h2 id="TypeORM"><a href="#TypeORM" class="headerlink" title="TypeORM"></a>TypeORM</h2><p><a class="link"   href="https://typeorm.io/" >TypeORM <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> is another mature ORM for Node.js. It has a rich feature set, including an entity manager, connection pooling, replication, and query caching. It’s also directly supported by NestJS with its own package, <code>@nestjs/typeorm</code>.</p><p>Released in 2016, TypeORM supports the dialects PostgreSQL, MySQL, MariaDB, SQLite, MSSQL, and MongoDB. That means that you can use both NoSQL and SQL databases at the same time with TypeORM. </p><h3 id="Features-1"><a href="#Features-1" class="headerlink" title="Features"></a>Features</h3><p>TypeORM provides a CLI that can create entities, projects, and subscribers or manage migration. It supports both <a class="link"   href="https://www.martinfowler.com/eaaCatalog/activeRecord.html" >Active Record <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and <a class="link"   href="https://martinfowler.com/eaaCatalog/dataMapper.html" >Data Mapper <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> patterns.</p><p>The Data Mapper pattern adds a data access layer (DAL) between the business domain of your application and the database. Using the Data Mapper pattern provides more flexibility and better performance, as it makes more efficient use of the database than a naive Active Record implementation. Providing both approaches gives you a choice of pattern that suits your application.</p><p>Much like some open source projects, its documentation has room for improvement. One of the common issues is a lack of necessary API details.</p><h3 id="Setup-1"><a href="#Setup-1" class="headerlink" title="Setup"></a>Setup</h3><p>Below is the basic database configuration and operation for TypeORM using the Active Record pattern.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// TypeScript</span><br><span class="line">// Firstly, we setup Database Connection</span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    TypeOrmModule.forRoot(&#123;</span><br><span class="line">      type: &#x27;postgres&#x27;,</span><br><span class="line">      host: &#x27;localhost&#x27;,</span><br><span class="line">      port: 5432,</span><br><span class="line">      username: &#x27;postgres&#x27;,</span><br><span class="line">      password: &#x27;postgres&#x27;,</span><br><span class="line">      database: &#x27;postgres&#x27;,</span><br><span class="line">      entities: [Cat],</span><br><span class="line">      synchronize: true, // Sync the entities with the database every time the application runs</span><br><span class="line">    &#125;),</span><br><span class="line">    CatsModule,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// Then you can define the data entity</span><br><span class="line">@Entity()</span><br><span class="line">export class Cat &#123;</span><br><span class="line">  @PrimaryGeneratedColumn()</span><br><span class="line">  id: number;</span><br><span class="line"></span><br><span class="line">  @Column()</span><br><span class="line">  name: string;</span><br><span class="line"></span><br><span class="line">  @Column()</span><br><span class="line">  breed: string;</span><br><span class="line">&#125;</span><br><span class="line">// We can use the repository design pattern which means each entity has its own repository.</span><br><span class="line">// Here, we inject the catRepository into your service</span><br><span class="line">export class CatsService &#123;</span><br><span class="line">  constructor(</span><br><span class="line">    @InjectRepository(Cat)</span><br><span class="line">    private catsRepository: Repository&lt;Cat&gt;,</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">// Then you can use the injected repo to perform database operation</span><br><span class="line">  this.catsRepository.find();</span><br><span class="line">  this.catsRepository.save&lt;Cat&gt;(cat);</span><br></pre></td></tr></table></figure></div><p>To run a raw SQL query, you can use the <code>@InjectConnection</code> decorator and use the <code>query</code> method to run a custom query script.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Inject the connection</span><br><span class="line">constructor(@InjectConnection() private readonly connection: Connection) </span><br><span class="line">&#123;&#125; </span><br><span class="line">// Run the query</span><br><span class="line">this.connection.query(&#x27;SELECT * FROM [TableName];&#x27;); </span><br></pre></td></tr></table></figure></div><p>You can use either JavaScript or TypeScript with TypeORM. <a class="link"   href="https://blog.logrocket.com/typeorm-object-relational-mapping-node-js/" >Using TypeORM <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> with TypeScript is more natural as compared to other ORMs, as it’s written by TypeScript.</p><h3 id="Community-and-popularity-1"><a href="#Community-and-popularity-1" class="headerlink" title="Community and popularity"></a>Community and popularity</h3><p>It’s one of the most popular ORM libraries, with 28.2K stars and 5.1K forks on GitHub.</p><p>With its rich feature set and flexibility, TypeORM is one of the best ORMs for NestJS.</p><h3 id="Use-cases-1"><a href="#Use-cases-1" class="headerlink" title="Use cases"></a>Use cases</h3><p>TypeORM can run on Node.js and a number of other platforms. It is a great choice if your application requires one or more of the following features:</p><ul><li>Scalable to a large, enterprise-grade app</li><li>Support for multiple databases</li><li>Support for both SQL and NoSQL databases</li><li>Support for multiple platforms, including Node.js, Ionic, Cordova, React Native, NativeScript, Expo, or Electron</li></ul><h2 id="MikroORM"><a href="#MikroORM" class="headerlink" title="MikroORM"></a>MikroORM</h2><p><a class="link"   href="https://github.com/mikro-orm/mikro-orm" >MikroORM <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> is another TypeScript ORM for Node.js based on the Data Mapper, Unit of Work, and Identity Map patterns.</p><p>Launched in 2018, it’s a relatively young ORM. MikroORM supports both SQL and NoSQL databases, including MongoDB, MySQL, PostgreSQL and SQLite databases. MikroORM also has its own NestJS support, <code><a class="link"   href="https://mikro-orm.io/docs/usage-with-nestjs/" >@mikro-orm/nestjs package <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></code>, which is a third-party package and not managed by the NestJS team.</p><h3 id="Features-2"><a href="#Features-2" class="headerlink" title="Features"></a>Features</h3><p>MikroORM provides an impressive list of features, including transactions, support for the Identity Map pattern, cascading persist and remove, a query builder, and more. It’s a fully-featured ORM with all the major database options, and is easily migrated to from TypeORM, if you’re looking to switch.</p><p>It comes with a CLI tool that can create&#x2F;update&#x2F;drop database schema, manage database migration, and generate entities.</p><p>MikroORM supports the Data Mapper pattern. It’s also built based on <a class="link"   href="https://martinfowler.com/eaaCatalog/unitOfWork.html" >Unit of Work <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and <a class="link"   href="https://martinfowler.com/eaaCatalog/identityMap.html" >Identity Map <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> patterns. Implementing Unit of Work allows us to handle transactions automatically. It’s also optimized for transactions via Identity Map patterns, which makes it possible to prevent unnecessary round-trips to the database. Those patterns also help MikroORM achieve good performance: <a class="link"   href="https://mikro-orm.io/blog/mikro-orm-4-1-released" >a recent benchmark <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> shows it only takes around 70ms for inserting 10K entities with SQLite.</p><h3 id="Setup-2"><a href="#Setup-2" class="headerlink" title="Setup"></a>Setup</h3><p>The syntax of MikroORM is very simple and straightforward. Below is an example of using MikroORM for the simplest database operations in NestJS.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// TypeScript</span><br><span class="line">// Firstly, import MikroOrmModule in App.module</span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [MikroOrmModule.forRoot(), CatsModule],</span><br><span class="line">&#125;)</span><br><span class="line">// The Database configuration is store in mikro-orm.config.ts</span><br><span class="line">const config: Options = &#123;</span><br><span class="line">  entities: [Cat],</span><br><span class="line">  dbName: &#x27;postgres&#x27;,</span><br><span class="line">  type: &#x27;postgresql&#x27;,</span><br><span class="line">  port: 5432,</span><br><span class="line">  host: &#x27;localhost&#x27;,</span><br><span class="line">  debug: true,</span><br><span class="line">  user: &#x27;postgres&#x27;,</span><br><span class="line">  password: &#x27;postgres&#x27;,</span><br><span class="line">&#125; as Options;</span><br><span class="line"></span><br><span class="line">// The config paths are defined in package.json</span><br><span class="line">  &quot;mikro-orm&quot;: &#123;</span><br><span class="line">    &quot;useTsNode&quot;: true,</span><br><span class="line">    &quot;configPaths&quot;: [</span><br><span class="line">      &quot;./src/mikro-orm.config.ts&quot;,</span><br><span class="line">      &quot;./dist/mikro-orm.config.js&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">// To use repository pattern, we register entities via forFeature() in feature module</span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [MikroOrmModule.forFeature(&#123; entities: [Cat] &#125;)],</span><br><span class="line">&#125;)</span><br><span class="line">export class CatsModule &#123;&#125;</span><br><span class="line"></span><br><span class="line">// We inject the repository into service</span><br><span class="line">  constructor(</span><br><span class="line">    @InjectRepository(Cat)</span><br><span class="line">    private readonly catRepository: EntityRepository&lt;Cat&gt;,</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line"></span><br><span class="line"> // Then, we can perform database operation</span><br><span class="line">this.catRepository.findOne(findOneOptions);</span><br></pre></td></tr></table></figure></div><h3 id="Community-and-popularity-2"><a href="#Community-and-popularity-2" class="headerlink" title="Community and popularity"></a>Community and popularity</h3><p>The documentation of MikroORM is actively maintained and easy to navigate. Although it’s one of the youngest ORMs, it doesn’t have a long list of open issues in GitHub. The repo is actively maintained, and issues are normally resolved quickly.</p><p>MikroORM is built to overcome some existing issues of other Node.js ORMs, like lack of transaction support. It’s fast growing and offers strong type safety in addition to a list of great features.</p><h3 id="Use-cases-2"><a href="#Use-cases-2" class="headerlink" title="Use cases"></a>Use cases</h3><p>MikroORM stands out because of its unique features, strong typing and good support. It’s worth considering if you are looking for an ORM for:</p><ul><li>A greenfield app that needs good transaction support</li><li>An app that needs regular batch data updates and fast performance</li></ul><h2 id="Prisma"><a href="#Prisma" class="headerlink" title="Prisma"></a>Prisma</h2><p><a class="link"   href="https://github.com/prisma/prisma" >Prisma <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> is an open source ORM for Node.js. It currently supports PostgreSQL, MySQL, SQL Server, SQLite, MongoDB, and CockroachDB (which is still available for preview only).</p><p>Prisma integrates smoothly with NestJS. Unlike the other ORMs, there is no need to have a separate package for the NestJS-ORM integration. Instead, the Prisma CLI package is the only thing we need to use Prisma in NestJS.</p><h3 id="Features-3"><a href="#Features-3" class="headerlink" title="Features"></a>Features</h3><p>Prisma is a unique library compared with other ORMs discussed in this article. Instead of using entity models as other ORMs do, it uses a schema definition language. Developers can define the data models with Prisma schema, and the models are used to generate the migration files for the chosen database. It also generates strongly typed code to interact with the database.</p><p>Schema files are used as a single source of truth for both database and application, and the code generation based on it helps to build type-safe queries to catch errors during compile time. </p><p>Prisma provides good tooling, including Prisma CLI and Prisma Studio. You can use the CLI to create migrations, or use the Studio to inspect databases, which works well with the Entity structure of Prisma. It also provides a Prisma data platform for database hosting.</p><p>The documentation of Prisma is nicely formatted and actively maintained.</p><h3 id="Setup-3"><a href="#Setup-3" class="headerlink" title="Setup"></a>Setup</h3><p>Using Prisma, developers can simply define their schemas and not worry about specific ORM frameworks. Below is the most basic usage of PrismaORM with NestJS.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">// TypeScript</span><br><span class="line">// Firstly, we need a schema file to model the database</span><br><span class="line">generator client &#123;</span><br><span class="line">  provider = &quot;prisma-client-js&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">datasource db &#123;</span><br><span class="line">  provider = &quot;postgresql&quot;</span><br><span class="line">  url      = env(&quot;DATABASE_URL&quot;) // the DATABASE_URL is stored in .env file</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model Cat &#123;</span><br><span class="line">  id            Int         @default(autoincrement()) @id</span><br><span class="line">  name          String</span><br><span class="line">  age           Int</span><br><span class="line">  breed         String   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// To generates SQL files and also runs them on the configured database, run following command</span><br><span class="line"> npx prisma migrate dev --name init</span><br><span class="line"></span><br><span class="line">// Create a Database service to interact with the Prisma Client API</span><br><span class="line">@Injectable()</span><br><span class="line">export class PrismaService extends PrismaClient implements OnModuleInit &#123;</span><br><span class="line">  async onModuleInit() &#123;</span><br><span class="line">    await this.$connect();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  async enableShutdownHooks(app: INestApplication) &#123;</span><br><span class="line">    this.$on(&#x27;beforeExit&#x27;, async () =&gt; &#123;</span><br><span class="line">      await app.close();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// In service layer, we inject the DatabaseService</span><br><span class="line">constructor(private prisma: PrismaService) &#123;&#125;</span><br><span class="line"></span><br><span class="line">// We can perform database operation via Prisma client api as below</span><br><span class="line">// Please note that we use Prisma Client&#x27;s generated types, like the &quot;Cat&quot;</span><br><span class="line">  async cat(</span><br><span class="line">    catWhereUniqueInput: Prisma.CatWhereUniqueInput,</span><br><span class="line">  ): Promise&lt;Cat | null&gt; &#123;</span><br><span class="line">    return this.prisma.cat.findUnique(&#123;</span><br><span class="line">      where: catWhereUniqueInput,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h3 id="Community-and-popularity-3"><a href="#Community-and-popularity-3" class="headerlink" title="Community and popularity"></a>Community and popularity</h3><p>First released in 2019, Prisma is the newest ORM of the four we discussed. It will need time to get to a more mature state. Recently, the release of version 3 introduced a few <a class="link"   href="https://www.prisma.io/docs/guides/upgrade-guides/upgrading-versions/upgrading-to-prisma-3" >breaking changes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. There are also some existing issues noted in GitHub, such as that it <a class="link"   href="https://github.com/prisma/prisma1/issues/2466" >does not support some Postgres column types <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><p>With 23.3K GitHub stars and 828 forks, it’s grown rapidly in popularity.</p><h3 id="Use-cases-3"><a href="#Use-cases-3" class="headerlink" title="Use cases"></a>Use cases</h3><p>Overall, Prisma is a very promising ORM. It’s designed to mitigate existing problems in traditional ORMs and can be used with either JavaScript or TypeScript. The advantage of using TypeScript is that you can leverage the Prisma Client’s generated types for better type-safety.</p><p>Some good use cases for Prisma are:</p><ul><li>Rapid prototype development for new apps</li><li>Apps that require good database tooling and strong typing support</li></ul><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>There are a number of ORMs that can be used together with NestJS. Thus, choosing a suitable ORM for your NestJS application can be a hard decision. In this article, we have walked through four popular ORMs, and discussed their strengths and weaknesses.</p><p>I also created a repo with the most basic sample code for each ORM, so it will be easier for you to have a direct impression if you have not used them. You can find the source code <a class="link"   href="https://github.com/sunnyy02/nestjs-orms" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;NestJS is a popular Node.js server-side framework. It’s highly customizable, c</summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    <category term="Frameworks" scheme="http://blog.ourcrmonline.com/categories/Web-Development/Frameworks/"/>
    
    
    <category term="TypeScript" scheme="http://blog.ourcrmonline.com/tags/TypeScript/"/>
    
    <category term="NestJS" scheme="http://blog.ourcrmonline.com/tags/NestJS/"/>
    
    <category term="ORM" scheme="http://blog.ourcrmonline.com/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>6 TypeScript Code Patterns To Make Your Code More Robust</title>
    <link href="http://blog.ourcrmonline.com/2021/11/06/6-typescript-code-patterns-to-make-your-code-more-robust/"/>
    <id>http://blog.ourcrmonline.com/2021/11/06/6-typescript-code-patterns-to-make-your-code-more-robust/</id>
    <published>2021-11-05T14:00:00.000Z</published>
    <updated>2024-06-29T04:12:08.999Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Simple-and-practical-solutions-you-can-apply-in-daily-work"><a href="#Simple-and-practical-solutions-you-can-apply-in-daily-work" class="headerlink" title="Simple and practical solutions you can apply in daily work"></a>Simple and practical solutions you can apply in daily work</h3><p>I found out that I repeatedly use some TypeScript code patterns in daily work. Those code patterns aren’t heavy or complex, and they also don’t require a lot of boilerplate code. They’re just simple and practical solutions to resolve a few common problems.</p><p>In the next few sections, I’ll share my six favorite TypeScript code patterns.</p><h2 id="Use-Pick-To-Implement-Interface-Segregation-Principle"><a href="#Use-Pick-To-Implement-Interface-Segregation-Principle" class="headerlink" title="Use Pick To Implement Interface Segregation Principle"></a>Use Pick To Implement Interface Segregation Principle</h2><p>The interface segregation principle is defined as:</p><blockquote><p>Clients should not be forced to implement interfaces they do not use.</p></blockquote><p>Let’s say we have a Client type, it’s used in multiple places. Sometimes only a subset of properties is used. According to the interface segregation principle, the function parameter with the type should be the minimal type required.</p><p>We can use <a class="link"   href="https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys" >Pick <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> utility type to exclude unused properties from the Client type. As shown in the code snippet below, only the name and active properties are picked. Thus the ClientSummary type represents a smaller, more specific interface that only includes the properties that it needs.</p><pre><code>interface Client &#123;  name: string;  dateOfBirth: Date;  active: boolean;&#125; type ClientSummary = Pick<Client, "name" | "active">; const clients: ClientSummary = &#123;  name: 'John',  active: true,&#125;;</code></pre><p>An alternative way is to use <a class="link"   href="https://www.typescriptlang.org/docs/handbook/utility-types.html#excludetype-excludedunion" >Exclude <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> utility type as below:</p><pre><code>type ClientSummary = Exclude&lt;Client, &#39;dateOfBirth&#39;&gt;;</code></pre><p>However, Pick is more robust because no changes are required when additional properties are added to the Client type.</p><h2 id="Const-Assertion-To-Derive-Types-From-Literal-Expressions"><a href="#Const-Assertion-To-Derive-Types-From-Literal-Expressions" class="headerlink" title="Const Assertion To Derive Types From Literal Expressions"></a>Const Assertion To Derive Types From Literal Expressions</h2><p>as const is a TypeScript construct for literal values called<a class="link"   href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions" > const assertion <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. When as const is applied, we get a const object with every property as a non-widen literal type. We can use it to derive types from the declared constants with const assertion.</p><p>The following code snippet is an example that I<a class="link"   href="https://medium.com/codex/how-to-share-constants-in-typescript-project-8f76a2e40352?sk=4d6297705c65d9c6db493d251d9a7666" > discussed in another article <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. In a nutshell, we derived payGradeType and payValueType from the payGrades constant. These types form a constraint-type system. When the source constant is modified, all related types will be automatically updated.</p><pre><code>export const payGrades = &#123;   low: "1",   average: "2",   high: "3"&#125; as const;type t = typeof payGrades;type payGradeType = keyof t; // 'low' | 'average' | 'high'type payValueType =  t[keyof t]; // '1' | '2' | '3'const hisPay: payValueType = '3'; //okayconst myPay:  payValueType = '4'; // error</code></pre><p>By using const assertions to derive types from literal expressions, you can create variables with more specific and accurate types, which can help to improve the type-safety and correctness of your Type.</p><h2 id="Exhaustive-Checks-With-“never”-Type"><a href="#Exhaustive-Checks-With-“never”-Type" class="headerlink" title="Exhaustive Checks With “never” Type"></a>Exhaustive Checks With “never” Type</h2><p>The never type represents the type of values that never occur. It can be useful for performing exhaustive checks, as you can use the never type to ensure that all possible cases are handled in a switch statement or other control flow construct.</p><p>A good application of never type is as the type guard for impossible types.</p><p>The following example shows how to cover all possible literal type values. Since the DataTypes includes only the two literal types client and order, assertUnreachable will never be reached.</p><p>If another developer adds a new literal type into the DataTypes, and forgets to update the switch statement, a compile-time error will be thrown.</p><pre><code>type DataTypes = 'client' | 'order';function getProcessName(c: DataTypes): string &#123;    switch(c) &#123;        case 'client':            return 'register' + c;        case 'order':            return 'process' + c;        default:        return assertUnreachable(c);    &#125;   &#125;function assertUnreachable(x: never): never &#123;    throw new Error("something is very wrong");&#125;</code></pre><p>With the exhaustive type checking in place, we can detect a missing condition at compile time instead of run time.</p><h2 id="Use-Opaque-Type-To-Simulate-Nominal-Typing-Behavior"><a href="#Use-Opaque-Type-To-Simulate-Nominal-Typing-Behavior" class="headerlink" title="Use Opaque Type To Simulate Nominal Typing Behavior"></a>Use Opaque Type To Simulate Nominal Typing Behavior</h2><p>TypeScript is a structural type system. In the <a class="link"   href="https://www.typescriptlang.org/play#example/structural-typing" >structure type system <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, two types with the same shape are compatible. This makes TypeScript very flexible, but it can also create potential issues.</p><p>In the contrived example below, we have two compatible types Customer and VIPCustomer. The function getVIPName should only take the VIPCustomer type argument. But, if the Customer type argument is passed in by mistake, it won’t error out due to the structure typing limitation.</p><pre><code>type Customer &#123;  name: string&#125;type VIPCustomer &#123;  name: string&#125;const cust = &#123;name: 'John'&#125; as Customer;const vip = &#123;name: 'Mark'&#125; as VIPCustomer;function getVIPName(vip: VIPCustomer) &#123;  return vip.name;&#125;console.log('vip name:', getVIPName(vip)); //vip name: Mark// The getVIPName works without errorconsole.log('vip name:', getVIPName(cust)); //vip name: John</code></pre><p>The above problem can be resolved by opaque type. Opaque types allow you to create types that are nominally typed, but are still compatible with structural types.</p><p>Although TypeScript doesn’t support opaque type out-of-box, we can achieve similar behavior using intersection type.</p><p>The below OpaqueType makes use of <a class="link"   href="https://www.typescriptlang.org/docs/handbook/2/generics.html" >Generic Type  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>and intersection type. Now the type Customer and VIPCustomer are structurally different. As the internal _brand property only exists in compile-time, there is no run-time cost associated with it.</p><pre><code>type OpaqueType<K, T> = K & &#123; _brand: T &#125;type Customer = OpaqueType<Person, "Customer">type VIPCustomer = OpaqueType<Person, "VIP">function getVIPName(vip: VIPCustomer) &#123;  return vip.name;&#125;const cust = &#123;name: 'John'&#125; as Customer;const vip = &#123;name: 'Mark'&#125; as VIPCustomer;console.log('vip name:', getVIPName(vip)); //vip name: Mark// Error: Argument of type 'Customer' is not assignable to parameter of type 'VIPCustomer'.console.log('vip name:', getVIPName(cust)); </code></pre><p>The opaque type implementation can make your TypeScript code cleaner and stronger when used in the right place.</p><h2 id="Lookup-property-type-from-an-Object-Type"><a href="#Lookup-property-type-from-an-Object-Type" class="headerlink" title="Lookup property type from an Object Type"></a>Lookup property type from an Object Type</h2><p><a class="link"   href="https://blog.logrocket.com/type-flowing-rethinking-typescript-typing-system/" >TypeScript is about types <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. Often, we need to extract an existing object property type from a complex object type.</p><p>We use conditional types and never to filter out the required data type definitions in lookup type definition below.</p><pre><code>type PropertyType<T, Path extends string> =    Path extends keyof T ? T[Path] :        Path extends `$&#123;infer K&#125;.$&#123;infer R&#125;` ? K extends keyof T ? PropertyType<T[K], R> :         never :    never;type lookup<T, Key, prop extends string> = Key extends keyof T? PropertyType<T[Key], prop>: never;</code></pre><p>The lookup type may look confusing at the first glance. Let’s break it down.</p><p>Firstly, to access a property type, we’ll create a new type with recursive type aliases.</p><p>When Path extends keyof T is truthy, it means the full path is matched. Thus, we return the current property type.</p><p>When Path extends keyof T is falsy, we use the infer keyword to build a pattern to match the Path. If it matches, we make a recursive call to the next-level property. Otherwise, it will return a never and that means the Path does not match with the type.</p><p>If it does not match, continue recursively with the current property as the first parameter.</p><p>The generated property type can be used in other functions to enforce type safety.</p><h2 id="Refactor-Excessive-Function-Parameters-With-Destructing-Assignments"><a href="#Refactor-Excessive-Function-Parameters-With-Destructing-Assignments" class="headerlink" title="Refactor Excessive Function Parameters With Destructing Assignments"></a>Refactor Excessive Function Parameters With Destructing Assignments</h2><p>A common issue for TypeScript code is excessive function parameters. We can use destructing assignments to refactor excessive function parameters and make your code more concise and readable.</p><p>Destructing assignments allow you to unpack the values of an object or array into individual variables. This can be useful when you have a function with multiple parameters that are related, as you can use destructing assignments to unpack the values into individual variables and pass them to the function as separate arguments.</p><p>The example below illustrates the issue of excessive parameters. For example, if a new parameter type, let’s say middleName is required. We need to be very careful in adding parameters to the right place.</p><p>Obviously, it’s hard to maintain. It’s also hard to read the caller function to match the argument with its name.</p><pre><code>interface Staff &#123;   firstName: string,   lastName: string,   age: number,   contact: string,  isActive: boolean,  isDelete: boolean&#125;function register(firstName: string, lastName: string, age: number, contact: string, isActive: boolean, isDelete: boolean)&#123;  console.log(`$&#123;firstName&#125; $&#123;lastName&#125; $&#123;age&#125; $&#123;contact&#125; $&#123;isActive&#125;  $&#123;isDelete&#125;`)&#125;register('john', 'duggan', 25, '123456', true, false);</code></pre><p>To refactor it, we make use of object destructuring and object literals as below. It’s one of my favorite methods as it’s simple. concise and readable.</p><p>TypeScript is intelligent. It not only assigns the value to the corresponding variable but also infers the type correctly.</p><pre><code>// use destructing and pass in an objectfunction register2(&#123;firstName, lastName, age, contact, isActive, isDelete&#125;: Staff)&#123;  console.log(`$&#123;firstName&#125; $&#123;lastName&#125; $&#123;age&#125; $&#123;contact&#125; $&#123;isActive&#125; $&#123;isDelete&#125;`)&#125;const user = &#123;   firstName: 'john',   lastName: 'duggan',   age: 25,   contact: '1234567',  isActive: true,  isDelete: false&#125;;register2(user);</code></pre><p>After the refactoring, the sequence of parameters doesn’t matter anymore. You can add or remove a property without worrying about its position.</p><p>The TypeScript typing system is amazing. The challenge for developers is to make full use of its powerful toolbox for clean and strongly typed code.</p><p>I hope this article is useful to you. If you have your favorite TypeScript code patterns, do let me know.</p><p>If you like this article, you may also like to check out my <a class="link"   href="https://betterprogramming.pub/6-typescript-typing-system-tricks-you-should-know-5aa39bda8049?sk=b8a4adbb43a591a64da08b4987ea079d" >other article about TypeScript best practices <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Simple-and-practical-solutions-you-can-apply-in-daily-work&quot;&gt;&lt;a href=&quot;#Simple-and-practical-solutions-you-can-apply-in-daily-work&quot; cl</summary>
      
    
    
    
    <category term="Design Patterns" scheme="http://blog.ourcrmonline.com/categories/Design-Patterns/"/>
    
    
    <category term="TypeScript" scheme="http://blog.ourcrmonline.com/tags/TypeScript/"/>
    
    <category term="Design Pattern" scheme="http://blog.ourcrmonline.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>Inject dynamic content in Angular components with portals</title>
    <link href="http://blog.ourcrmonline.com/2021/09/23/inject-dynamic-content-angular-components-with-portals/"/>
    <id>http://blog.ourcrmonline.com/2021/09/23/inject-dynamic-content-angular-components-with-portals/</id>
    <published>2021-09-22T14:00:00.000Z</published>
    <updated>2024-06-29T04:20:08.679Z</updated>
    
    <content type="html"><![CDATA[<p>As an Angular developer, a large part of our daily job is putting components together to build our app. From time to time, we will need to inject a component or UI template into another component dynamically.</p><p>In Angular, there are a couple of ways to render dynamic components into a host component before the CDK portals are released. These are:</p><ul><li>ngComponentOutlet)</li><li>ComponentFactoryResolver<br>Both methods have a drawback: the host component needs to reference the injected component directly. The coupling between the host and injected component makes it hard to test and maintain.</li></ul><p>Portal provides a flexible and clean alternative method of injecting content into an Angular component.</p><p>Let’s walk through an example of using Portal step-by-step.</p><h3 id="Defining-the-problem"><a href="#Defining-the-problem" class="headerlink" title="Defining the problem"></a>Defining the problem</h3><p>Let’s say we’re enhancing the dashboard screen in an Angular app. The screen contains</p><ul><li>A parent component (dashboard): this is the container of the dashboard screen</li><li>A dropdown selector: the change of selection will change the context of the dashboard</li><li>A router outlet: this is used to load the components from subroutes</li><li>Two subcomponents (the stats and action components): these display information related with current context of dashboard</li></ul><p>When the user picks an option from the selector, the app will navigate to different subroutes. As a result, the corresponding component will be loaded into the router outlet. The two subcomponents will then be updated with different content.</p><p>Upon the selection change, the selected service type data is pushed into the serviceType$ observable in the DashboardService. In the action component, we subscribe to the serviceType$ observable.</p><pre><code>// dashboard.component.ts// when user change a selection, new serviceType are broadcastedthis.service.searchType$.next(serviceType);// dashboard.service.tsexport class DashboardService &#123;  searchType$ = new BehaviorSubject('');  constructor() &#123; &#125;&#125;// action.component.tsexport class ActionComponent &#123;  serviceType$ = this.service.searchType$;  constructor(private service: DashboardService) &#123;&#125;&#125;</code></pre><p>We use ngSwitch to react to the observable serviceType$. In the following example, the action component content is updated when the observable value changes.</p><pre><code>   <div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div [ngSwitch]=&quot;serviceType&quot;&gt;</span><br><span class="line">    &lt;div *ngSwitchCase=&quot;&#x27;client&#x27;&quot;&gt;</span><br><span class="line">      &lt;button (click)=&quot;registerNewClient()&quot; class=&quot;btn btn-primary&quot;&gt;</span><br><span class="line">        Register New Client</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div *ngSwitchCase=&quot;&#x27;order&#x27;&quot;&gt;</span><br><span class="line">      &lt;button (click)=&quot;registerNewOrder()&quot; class=&quot;btn btn-danger&quot;&gt;</span><br><span class="line">        Search order</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div *ngSwitchDefault&gt;default action&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></div></code></pre><p>The dashboard works, but there are a couple of problems with the code:</p><h4 id="The-two-subcomponents-are-smart-components"><a href="#The-two-subcomponents-are-smart-components" class="headerlink" title="The two subcomponents are smart components"></a>The two subcomponents are smart components</h4><p>These subcomponents are designed to present data, so they should be dumb, or presentational, components. Instead, the current design makes them aware of the external data entities</p><h4 id="The-subcomponents-also-contain-side-effects"><a href="#The-subcomponents-also-contain-side-effects" class="headerlink" title="The subcomponents also contain side effects"></a>The subcomponents also contain side effects</h4><p>This means that they register event handling, which makes them hard to be reused. To add a new service type, we need to add ngSwitchCase into all of our subcomponents, and with more service types or subcomponents being added, the dashboard will become more complex and harder to maintain. What we want is to inject UI contents into the subcomponents while the subcomponents don’t know where the contents are coming from.</p><h3 id="How-can-portals-help"><a href="#How-can-portals-help" class="headerlink" title="How can portals help?"></a>How can portals help?</h3><p>Portals are provided as part of the Angular Material CDK, which is internally developed by the Angular Material team. Its name was recently shortened to Angular CDK. The definition of portals in the official documentation is: portal is a piece of UI that can be dynamically rendered to an open slot on the page. There are two key parts:</p><ul><li>Portal: the UI element (component or template) to render. It can be a component, a templateRef or a DOM element.</li><li>PortalOutlet: the slot where the content will be rendered. In the previous version, it was called PortalHost.<br>Let’s make use of the portals to solve the above problem.</li></ul><h3 id="Setting-up"><a href="#Setting-up" class="headerlink" title="Setting up"></a>Setting up</h3><p>To start using the Angular CDK portal, the following package needs to be installed.</p><pre><code>        npm install @angular/cdk</code></pre><p>Then in the app.module.ts file, we need to import the CDK module.</p><pre><code>    import &#123;PortalModule&#125; from '@angular/cdk/portal';</code></pre><h3 id="Types-of-portals"><a href="#Types-of-portals" class="headerlink" title="Types of portals"></a>Types of portals</h3><p>We have a few options to create a portal.</p><ul><li>ComponentPortal: create a portal from a component type.<pre><code>  this.portal = new ComponentPortal(StatsComponent);</code></pre></li></ul><p>*TemplatePortal: create a portal from a &lt;ng-template&gt;</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ng-template #templatePortal&gt;</span><br><span class="line">&lt;ng-content&gt;&lt;/ng-content&gt;</span><br><span class="line">&lt;/ng-template&gt;</span><br></pre></td></tr></table></figure></div><ul><li>DomPortal: create a portal from a native DOM element. This allows us to take any DOM element and inject it to the host<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div #domPortal&gt;Total clients&lt;/div&gt;</span><br></pre></td></tr></table></figure></div></li></ul><p>With DomPortal, the Angular binding within the content won’t be effective because it’s treated as a native DOM element.</p><p>Angular CDK also provides a cdkPortal directive, which is a version of TemplatePortal. The cdkPortal directive saves some boilerplate code compared to TemplatePortal, as we don’t need to manually instantiate the portal.</p><h3 id="Create-a-portal"><a href="#Create-a-portal" class="headerlink" title="Create a portal"></a>Create a portal</h3><p>In this example, we use the cdkPortal directive because it’s simpler and more declarative.</p><p>As the below code shows, we wrap ng-content inside the ng-template in the ActionButtonComponent template. Then, we add the portal directive into the ng-template.</p><p>There are two equivalent selectors for the cdkPortal directive: portal or cdk-portal. ng-content is used so we can project contents from the other components.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Html   </span><br><span class="line">// ActionButtonComponent</span><br><span class="line">&lt;ng-template cdk-portal&gt;</span><br><span class="line">    &lt;ng-content&gt;&lt;/ng-content&gt;</span><br><span class="line">&lt;/ng-template&gt;</span><br></pre></td></tr></table></figure></div><p>Please note that the element with the cdkPortal directive will not be shown until it’s attached to CdkPortalOutlet. This applies to all elements, including div.</p><p>In the ActionButtonComponent class, we can reference the template using the @ViewChild and CdkPortal directives.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// TypeScript</span><br><span class="line">// ActionButtonComponent</span><br><span class="line">@ViewChild(CdkPortal)</span><br><span class="line">private portal: CdkPortal;</span><br></pre></td></tr></table></figure></div><h3 id="Creating-the-PortalOutlet"><a href="#Creating-the-PortalOutlet" class="headerlink" title="Creating the PortalOutlet"></a>Creating the PortalOutlet</h3><p>In the ActionComponent, we created a placeholder with the ID set to action.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Html</span><br><span class="line">// ActionComponent</span><br><span class="line">&lt;div id=&quot;action&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></div><p>Now we can create the DomPortalOutlet. We use document.querySelector to get hold of the DOM element placeholder defined above. The rest of the parameters are injected via the component constructor.</p><p>Please note that the DomPortalOutlet was previously called DomPortalHost. Since Angular 9, it’s been renamed to DomPortalOutlet.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// Html</span><br><span class="line">// ActionButtonComponent</span><br><span class="line"></span><br><span class="line">  private host: DomPortalOutlet;</span><br><span class="line"></span><br><span class="line">  constructor(</span><br><span class="line">    private cfr: ComponentFactoryResolver,</span><br><span class="line">    private appRef: ApplicationRef,</span><br><span class="line">    private injector: Injector</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  ngAfterViewInit(): void &#123;</span><br><span class="line">    this.host = new DomPortalOutlet(</span><br><span class="line">      document.querySelector(&#x27;#action),</span><br><span class="line">      this.cfr,</span><br><span class="line">      this.appRef,</span><br><span class="line">      this.injector</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div><p>The creation of DomPortalOutlet occurs within the ngAfterViewInit lifecycle event. It’s necessary because ngAfterViewInit occurs right after the view is rendered.</p><h3 id="Putting-them-together"><a href="#Putting-them-together" class="headerlink" title="Putting them together"></a>Putting them together</h3><p>After both portal and DomPortalOutlet are defined, we can attach the portal to the portalOutlet. This will inject the portal into the placeholder referenced by the portalOutlet.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// TypeScript</span><br><span class="line">// ActionButtonComponent</span><br><span class="line">export class ActionButtonComponent implements AfterViewInit, OnDestroy&#123;</span><br><span class="line"></span><br><span class="line">  @ViewChild(CdkPortal)</span><br><span class="line">  private portal: CdkPortal;</span><br><span class="line">  private host: DomPortalOutlet;</span><br><span class="line"></span><br><span class="line">  constructor(</span><br><span class="line">    private cfr: ComponentFactoryResolver,</span><br><span class="line">    private appRef: ApplicationRef,</span><br><span class="line">    private injector: Injector</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  ngAfterViewInit(): void &#123;</span><br><span class="line">    this.host = new DomPortalOutlet(</span><br><span class="line">      document.querySelector(&#x27;#action),</span><br><span class="line">      this.cfr,</span><br><span class="line">      this.appRef,</span><br><span class="line">      this.injector</span><br><span class="line">    );</span><br><span class="line">    this.host.attach(this.portal);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In this case, both the client and order components can project content into ActionButtonComponent. Those contents are shown in the portalOutlet in ActionComponent.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;app-action-button&gt;</span><br><span class="line">&lt;button (click)=&quot;registerClient()&quot; class=&quot;btn btn-primary&quot;&gt;Register New Client&lt;/button&gt;</span><br><span class="line">&lt;/app-action-button&gt;</span><br></pre></td></tr></table></figure></div><p>Here is an overview of how the portal and portalOutlet work together.<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.logrocket.com/wp-content/uploads/2021/09/how-portal-portaloutlet-work-together.png"                                     ></p><h3 id="detach-method-vs-dispose-method"><a href="#detach-method-vs-dispose-method" class="headerlink" title="detach method vs. dispose method"></a>detach method vs. dispose method</h3><p>We use the detach method to remove the previously attached portal from the portalOutlet. It’s to clean things up when the parent component is removed.</p><p>Another way is to use the dispose method. When calling dispose, we permanently remove the portalOutlet from DOM.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngOnDestroy(): void &#123;</span><br><span class="line">this.host.detach();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>In our example, we use the detach method, as our intention is to detach the portal instead of removing the portalOutlet from DOM.</p><h3 id="Passing-context-instead-of-contents"><a href="#Passing-context-instead-of-contents" class="headerlink" title="Passing context instead of contents"></a>Passing context instead of contents</h3><p>In the previous example, we don’t need to pass data because ng-content is used to project contents. But for other use cases, you may need to pass contextual data into the portal.</p><p>To pass context data in templatePortal, we can use the context property.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.portal.context = &#123;&#125;; // Your context data</span><br></pre></td></tr></table></figure></div><p>For ComponentPortal, we can use token injection shown in the code below.</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export const CONTEXT_TOKEN = new InjectionToken(&#123;...&#125;);</span><br><span class="line"></span><br><span class="line">// when creating the componentPortal, provide the token injector</span><br><span class="line">const injector = Injector.create(&#123;</span><br><span class="line">providers: [&#123; provide: CONTEXT_TOKEN, useValue: &#123;...&#125;, // context data variable</span><br><span class="line">&#125;);</span><br><span class="line">const portal = new ComponentPortal(ComponentClass, null, injector);</span><br><span class="line"></span><br><span class="line">//Inject the token into the constructor of the component, so it can be accessed</span><br><span class="line">constructor(@Inject(CONTEXT_TOKEN) private data: T)</span><br></pre></td></tr></table></figure></div><h3 id="Final-results"><a href="#Final-results" class="headerlink" title="Final results"></a>Final results</h3><p>Below is what the final result looks like. Our dashboard shows dynamic content when the dropdown selector changes. Best of all, the subcomponents (the stats and action components) are loosely coupled. They do not contain logic about clients or orders; instead, they only need to focus on rendering the content correctly.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.logrocket.com/wp-content/uploads/2021/09/final-results-dashboard.gif"                                     ></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In this article, we discussed how to use Angular CDK portals to inject dynamic contents to a few components in a dashboard. You can find the full example code on my GitHub.</p><p>The CDK Portal is a powerful feature. Its major benefits include its flexibility and clean separations. It gives us the ability to “teleport” content to any component within the screen, even if it’s outside the current component tree.</p><p>I hope this article can help you to apply this technique in your own awesome app!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;As an Angular developer, a large part of our daily job is putting components together to build our app. From time to time, we will need t</summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    
    <category term="TypeScript" scheme="http://blog.ourcrmonline.com/tags/TypeScript/"/>
    
    <category term="Angular" scheme="http://blog.ourcrmonline.com/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>4 Simple and Effective Ways To Avoid Too Many Ifs With TypeScript</title>
    <link href="http://blog.ourcrmonline.com/2021/09/21/4-simple-and-effective-ways-to-avoid-too-many-ifs-with-typescript/"/>
    <id>http://blog.ourcrmonline.com/2021/09/21/4-simple-and-effective-ways-to-avoid-too-many-ifs-with-typescript/</id>
    <published>2021-09-20T14:00:00.000Z</published>
    <updated>2024-06-29T04:17:41.528Z</updated>
    
    <content type="html"><![CDATA[<h4>If…else is not bad — excessive usage is</h4><p>If…else exists in all programming languages. They’re not bad practices if used properly. It’s a simple, easy-to-understand, and flexible logic control structure.</p><p>But in reality, it’s often used excessively. They can be bad in the following cases:</p><ul><li><p>Nested if-else or multiple-level nesting (worse)</p></li><li><p>Too many if-else cause large numbers of condition branches</p></li><li><p>Complex condition statement with mixed flags</p></li></ul><p>The excessive usages of if…else are code smells. It makes your codebase hard to read and maintain, as there are more branching paths to consider.</p><p>As a developer, we always look to<a class="link"   href="https://sunnysun-5694.medium.com/path-to-functional-style-a-typescript-refactoring-example-f5f052fe4d84" > improve the code by refactoring <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. In this article, we will go through four different approaches in the context of TypeScript.</p><h2 id="1-Guard-and-Early-Return"><a href="#1-Guard-and-Early-Return" class="headerlink" title="1. Guard and Early Return"></a>1. Guard and Early Return</h2><p><strong>Problem</strong>: In this nested if…else code snippet, it can be challenging to follow the changes to the status value. Even in this simplified example, the control flow is not straightforward. You can imagine the code quickly growing into a hard-to-maintain state when more condition logic is added.</p><pre><code>  getStatus(response: &#123; status: string, error: any &#125;) &#123;    let status = '';    if (response.status === '200') &#123;      this.process();      status = 'success';    &#125; else &#123;      if (response.error) &#123;        status = response.error.message;      &#125; else &#123;        status =  'unexpected error';      &#125;    &#125;    return status;  &#125;</code></pre><p><strong>The solution</strong>: <a class="link"   href="https://refactoring.guru/replace-nested-conditional-with-guard-clauses" >Guard <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and early return is my favorite refactoring method. It’s simple to implement and gives you quick and immediate results.</p><p>In the code below, we move the edge cases to the beginning of the function. We also simplified the nested if into a flat statement with a ternary operator. When the edge case condition is met, the error status is immediately returned.</p><pre><code>   getStatus(response: &#123; status: string, error: any &#125;) &#123;    if (response.status !== '200') &#123;      return response.error ? response.error.message : 'unexpected error';    &#125;    this.process();    return 'success';  &#125; </code></pre><p>After refactoring, the code becomes linear. The early return handles failure cases first, making the code easier to test and less error-prone. The result is better readability and better maintainability.</p><p>Another similar way is to use the “Data guard” <a class="link"   href="https://sunnysun-5694.medium.com/how-to-map-rest-api-data-using-decorator-pattern-in-angular-6-94eb49ba16b1" >decorator <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> which contains the validation logic. The main function is only invoked after the validation passing.</p><h2 id="2-Table-Driven-Method"><a href="#2-Table-Driven-Method" class="headerlink" title="2. Table-Driven Method"></a>2. Table-Driven Method</h2><p><strong>Problem</strong>: The intention of the code snippet below is to get the number of days for a month. Obviously, it’s error-prone and hard to change. For example, what happens if we need support in leap years? It will be a maintenance nightmare.</p><pre><code>     if (month === 1) return 31;    if (month === 2) return 29;    if (month === 3) return 31;    if (month === 4) return 30;    if (month === 5) return 31;    if (month === 6) return 30;    if (month === 7) return 31;    if (month === 8) return 31;    if (month === 9) return 30;    if (month === 10) return 31;    if (month === 11) return 30;    if (month === 12) return 31; </code></pre><p><strong>The solution</strong>: We use the <a class="link"   href="https://rads.stackoverflow.com/amzn/click/com/0735619670" >Table-driven method <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> to improve the above code snippet.</p><blockquote><p>Table-driven methods are schemes that allow you to look up information in a table rather than using logic statements (i.e. case, if). — dev.to</p></blockquote><pre><code>     const monthDays= [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];    return monthDays[month - 1]; </code></pre><p>Here we define an array monthDays that maps the possible values of a month. The result is much more compact and readable. Please note that this method is more suitable when input parameters are mutually exclusive.</p><p>The same method can be applied to a group of functions.</p><pre><code> // many ifsfunction performActions(actionName: string) &#123;  if (actionName === "save") &#123;    // save...  &#125; else if (actionName === "update") &#123;    // update ...  &#125; else if (actionName === "delete") &#123;    // delete...  &#125;&#125;// refactor with table driven methodsconst funcs: Record<string, () => void> = &#123;  save: () => &#123;    // save ...  &#125;,  update: () => &#123;    // update ...  &#125;,  delete: () => &#123;    //delete ...  &#125;&#125;;function performActions2(actionName: string) &#123;  const action = funcs[actionName];  if (action) &#123;    action();  &#125;&#125; </code></pre><p>In the above code sample, the performAction function contains multiple ifs. It can be difficult to extend when more actions need to be added into. We use the funcs <a class="link"   href="https://betterprogramming.pub/typescripts-record-type-explained-691372b1a449" >RecordType  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>to map the actionName matching function. Thus we avoid the multiple ifs, and it can be extended to additional actions easily.</p><p>The table-driven method can be applied beyond just one-to-one key-value mappings. In the following example, the ifs statement is used to rating by a given score range. How can we refactor this method?</p><pre><code>  getRating(score: number) &#123;    if (score &gt; 12) &#123;      return 5;    &#125; else if (score &gt; 9) &#123;      return 4;    &#125; else if (score &gt; 6) &#123;      return 3;    &#125; else if (score &gt; 3) &#123;      return 2;    &#125; else &#123;      return 1;    &#125;  &#125;</code></pre><p>we can apply the Table-driven method using Object.keys as below:</p><pre><code>  getRating(score: number) &#123;    const ratingScoreMap = &#123;      12: 5,      9: 4,      6: 3,      3: 2,      1: 1    &#125;;    const sortedRating = Object.keys(ratingScoreMap)      .map(Number)      .sort((a, b) =&gt; b - a);    for (const threshold of sortedRating) &#123;      if (score &gt; Number(threshold)) &#123;        return ratingScoreMap[threshold];      &#125;    &#125;    return 1;  &#125;</code></pre><p>By using a lookup table to store the mapping relationships, the table-driven method allows for efficient and flexible value mapping in a variety of contexts.</p><h2 id="3-Extract"><a href="#3-Extract" class="headerlink" title="3. Extract"></a>3. Extract</h2><p><strong>Problem</strong>: Complex conditions aren’t a problem as long as they are readable. The below example contains a nested and complex if condition statement. It’s hard to figure out what the condition is.</p><pre><code>    transfer(fromAccount, toAccount, amount: number) &#123;    if (fromAccount.status === 'Active' && toAccount.status === 'Active' && amount > 0) &#123;      if (amount < fromAccount.dailyLimit && amount < fromAccount.amount) &#123;        fromAccount.amout -= amount;        fromAccount.transactions.add(amount, 'debit');        toAccount.amout += amount;        toAccount.transactions.add(amount, 'credit');      &#125;      this.logTransaction();    &#125;  &#125;</code></pre><p><strong>Solution</strong>: The extract method is a way to refactor conditional logic into a more modular form. In the code snippet below, we use the extract method to refactor the above example.</p><p>The multiple checks in the nested ifs are wrapped into a separate function with a meaningful name. The nested ifs are replaced by a single if with a simple condition function.</p><pre><code>   transfer(fromAccount, toAccount, amount: number) &#123;    if(this.validateTransactoin(fromAccount, toAccount, amount))&#123;      this.performTransaction();    &#125;    this.logTransaction();  &#125; </code></pre><p>The improved version is much easier to understand and change.</p><h2 id="4-Default-Value-and-operators"><a href="#4-Default-Value-and-operators" class="headerlink" title="4. Default Value and || operators"></a>4. Default Value and || operators</h2><p><strong>Problem</strong>: The following if..else is used to perform the null checks, but the code is unnecessarily complex and not very readable.</p><pre><code>   getStatusMessage(status: string, errorCode: number) &#123;    if (!status) return 'NA';    if(errorCode) &#123;      return `Status:$&#123;status&#125;, err:&#123;errorCode&#125;`;    &#125; else &#123;      return `Status:$&#123;status&#125;, err: -1`;    &#125;  &#125; </code></pre><p><strong>The solution</strong>: Giving parameters a default value is another of my personal favorite refactoring methods.</p><p>Default value combined with the || operator is a simple and effective way of reducing code complexity.</p><p>In this example, we give the status a default value and use the || operator to handle the null check. Thanks to the flexibility of JavaScript, the result is less code duplication and more readable code.</p><pre><code>   getStatusMessage(status = 'NA', errorCode: number) &#123;    return `Status:$&#123;status&#125;, err: $&#123;errorCode || -1&#125;`;  &#125; </code></pre><h2 id="Focus-on-the-Root-Cause"><a href="#Focus-on-the-Root-Cause" class="headerlink" title="Focus on the Root Cause"></a>Focus on the Root Cause</h2><p>Excessive usage of if…else can be a symptom of other issues. When working on refactoring, we should focus on the root cause instead of just fixing the symptom.</p><p>A function is composed of input, internal state, and output. The function takes the input parameters, executes the internal state mutation, and returns the output result. The excessive usage of if..else can be the result of:</p><ul><li><p><strong>Excessive logic for the internal state</strong>: All the above four methods may be applied to improve the code.</p></li><li><p><strong>Complex input parameters with mixed flags</strong>: In this case, the default value method may help. But the root cause may be the function interface abstraction. We may need to review and improve the abstraction.</p></li><li><p><strong>Too many different return paths and complex output</strong>: It’s a sign that the function may be doing too many things. The focus should be refactoring the function instead of reducing the if..else statements.</p></li></ul><p>To do a clean refactoring, we should focus on formulating a clear interface so that the function is doing one single thing. (<a class="link"   href="https://en.wikipedia.org/wiki/Single-responsibility_principle#:~:text=The%20single%2Dresponsibility%20principle%20(SRP,it%20should%20encapsulate%20that%20part.&text=Hence%2C%20each%20module%20should%20be%20responsible%20for%20each%20role.)" >Single responsibility principle <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>We discussed four simple and effective ways to remove the excessive usage of if…else. Applying these methods will help you write cleaner, more readable code.</p><p>There are other approaches to refactor the if..else, like using a <a class="link"   href="https://medium.com/codex/factory-pattern-type-script-implementation-with-type-map-ea422f38862" >factory pattern <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or responsibility chain pattern. They are not covered in this article because I want to focus on simpler and more practical solutions.</p><p>There is no one size fits all solution as every approach has its own pros and cons. The ability to pick the right tool for a particular job separates a <a class="link"   href="https://betterprogramming.pub/5-attributes-of-a-top-developer-bf5ae55a2b67" >top developer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> from an average one.</p><p>If you like this article, you may also like to read another TypeScript article.<br><a href="https://betterprogramming.pub/apply-builder-pattern-to-generate-query-filter-in-typescript-651a6b13da38"><strong>Apply Builder Pattern To Generate Query Filter In TypeScript</strong><br><em>Implement an immutable and strongly typed filter builder</em>betterprogramming.pub</a></p><p>Happy programming!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4&gt;If…else is not bad — excessive usage is&lt;/h4&gt;


&lt;p&gt;If…else exists in all programming languages. They’re not bad practices if used properl</summary>
      
    
    
    
    <category term="Web Development" scheme="http://blog.ourcrmonline.com/categories/Web-Development/"/>
    
    
    <category term="TypeScript" scheme="http://blog.ourcrmonline.com/tags/TypeScript/"/>
    
    <category term="Best Practice" scheme="http://blog.ourcrmonline.com/tags/Best-Practice/"/>
    
    <category term="Refactoring" scheme="http://blog.ourcrmonline.com/tags/Refactoring/"/>
    
  </entry>
  
</feed>
